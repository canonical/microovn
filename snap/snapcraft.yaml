name: microovn
icon: microovn.png
base: core24
assumes:
 - snapd2.59
adopt-info: microovn
source-code: https://github.com/canonical/microovn.git
summary: Simple clustered OVN deployment
description: |-
 Self-contained self-deployment with clustering.

confinement: strict

slots:
  ovn-certificates:
    interface: content
    source:
      read:
        - "$SNAP_COMMON/data/pki"
  ovn-env:
    interface: content
    source:
      read:
        - "$SNAP_COMMON/data/env"
  ovn-chassis:
    interface: content
    source:
      write:
        - "$SNAP_COMMON/run/switch"
        - "$SNAP_COMMON/run/ovn"
  ovn-central-data:
    interface: content
    source:
      read:
        - "$SNAP_COMMON/data/central"

hooks:
  install:
    plugs:
      - network
      - network-control

apps:
  # Service
  daemon:
    command: commands/daemon.start
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control
      - network-setup-control
    slots:
      - microovn

  ovn-ovsdb-server-nb:
    command: commands/ovn-ovsdb-server-nb.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind

  ovn-ovsdb-server-sb:
    command: commands/ovn-ovsdb-server-sb.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind

  ovn-northd:
    command: commands/ovn-northd.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind

  bird:
    command: commands/bird.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind
      - network-control

  chassis:
    command: commands/chassis.start
    daemon: simple
    install-mode: disable
    stop-command: commands/chassis.stop
    plugs:
      - network
      - network-bind
      - network-control
      - process-control
      - system-trace
      - hardware-observe

  switch:
    command: commands/switch.start
    daemon: simple
    install-mode: disable
    stop-command: commands/switch.stop
    plugs:
      - firewall-control
      - hardware-observe
      - hugepages-control
      - network
      - network-bind
      - network-control
      - openvswitch-support
      - process-control
      - system-trace

  # Commands
  microovn:
    command: commands/microovn
    plugs:
      - network

  ovn-appctl:
    command: commands/ovn-appctl
    plugs:
      - network
  ovn-nbctl:
    command: commands/ovn-nbctl
    plugs:
      - network
      - network-bind
  ovn-sbctl:
    command: commands/ovn-sbctl
    plugs:
      - network
      - network-bind
  ovn-trace:
    command: commands/ovn-trace
    plugs:
      - network

  ovs-appctl:
    command: commands/ovs-appctl
    plugs:
      - network
  ovs-dpctl:
    command: commands/ovs-dpctl
    plugs:
      - network
      - network-control
  ovs-ofctl:
    command: commands/ovs-ofctl
    plugs:
      - network
  ovs-vsctl:
    command: commands/ovs-vsctl
    plugs:
      - network
  ovsdb-tool:
    command: bin/ovsdb-tool
  ovsdb-client:
    command: commands/ovsdb-client
    plugs:
      - network

  birdc:
    command: commands/birdc
    plugs:
      - network

  refresh-expiring-certs:
    command: commands/refresh-expiring-certs
    daemon: oneshot
    timer: 02:00~02:30


parts:
  # Dependencies
  dqlite:
    source: https://github.com/canonical/dqlite
    source-type: git
    source-depth: 1
    source-tag: v1.17.1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
      - --enable-build-raft
    stage-packages:
      - libuv1
      - libsqlite3-0
      - liblz4-1
    build-packages:
      - make
      - libuv1-dev
      - liblz4-dev
      - libsqlite3-dev
      - pkg-config
    organize:
      usr/lib/: lib/
    prime:
      - lib/libdqlite*so*
      - lib/libraft*so*
      - lib/*/libuv*so*

  bird:
    plugin: autotools
    source: https://gitlab.nic.cz/labs/bird.git
    source-type: git
    source-tag: v3.1.4
    autotools-configure-parameters:
      - --prefix=/usr
      - --sysconfdir=/etc/bird
      - --mandir=/usr/share/man
      - --infodir=/usr/share/info
      - --localstatedir=/var
      - --runstatedir=/run/bird
      - --docdir=/usr/share/bird3
      - --enable-client
    build-packages:
      - gcc
      - autoconf
      - libtool
      - bison
      - flex
      - libncurses-dev
      - libreadline-dev
    override-prime: |
      craftctl default
      # shrink the default bird.conf to bare minimum
      printf "log syslog all;\nprotocol device {};\n" > $CRAFT_PRIME/etc/bird/bird.conf
  ovn:
    plugin: autotools
    source: https://github.com/ovn-org/ovn.git
    source-type: git
    source-tag: branch-25.09
    override-build: |
      # build OVS first
      cd ovs
      ./boot.sh
      ./configure \
        --enable-ssl \
        --localstatedir=/var \
        --sysconfdir=/etc \
        --prefix=/usr
      make -j$CRAFT_PARALLEL_BUILD_COUNT
      # build OVN
      cd ..
      ./boot.sh
      ./configure \
        --prefix=/usr \
        --localstatedir=/var \
        --sysconfdir=/etc \
        --with-dbdir=/var/lib/ovn \
        --enable-ssl
      make -j$CRAFT_PARALLEL_BUILD_COUNT
      make install DESTDIR=$CRAFT_PART_INSTALL
      mkdir -p $CRAFT_PART_INSTALL/etc/ovn
    build-packages:
      - gcc
      - libssl-dev
      - libunbound-dev
      - python3
      - make
      - automake
      - autoconf
      - libtool-bin
      - pkgconf
    stage-packages:
      - libunbound8
    organize:
      usr/bin/: bin/
      usr/share/: share/
      usr/sbin/: bin/
      usr/lib/: lib/
    prime:
     - bin/ovn-appctl
     - bin/ovn-controller
     - bin/ovn-nbctl
     - bin/ovn-northd
     - bin/ovn-sbctl
     - bin/ovn-trace
     - etc/ovn
     - share/ovn
  ovs:
    plugin: nil
    stage-packages:
      - openvswitch-switch
    organize:
      usr/bin/: bin/
      usr/sbin/: bin/
      usr/lib/: lib/
      usr/share/: share/
    prime:
     - bin/ovs-appctl
     - bin/ovs-dpctl
     - bin/ovs-ofctl
     - bin/ovs-vsctl
     - bin/ovs-vswitchd
     - bin/ovsdb-client
     - bin/ovsdb-server
     - bin/ovsdb-tool
       # The lib cherry-picking is unfortunately necessary to avoid pulling in
       # external symlinks provided by the openssl package dependency.
       # (External symlinks, i.e. pointing at something in /, are not allowed.)
     - lib/*/libevent-2.1.so*
     - lib/*/libnuma.so.*
     - lib/*/bpf/*
     - lib/*/libbpf.so.*
     - lib/*/libxdp.so.*
     - lib/*/libunbound.so*
     - share/openvswitch
    override-build: |
        craftctl default

        mkdir -p "${CRAFT_PART_INSTALL}/bin/"
        mv "${CRAFT_PART_INSTALL}/usr/lib/openvswitch-switch/ovs-vswitchd" "${CRAFT_PART_INSTALL}/bin/"

  # Main part
  microovn:
    source: microovn/
    after:
      - dqlite
      - ovn
      - ovs
    build-snaps:
      # golangci-lint is currently not available on all architectures.
      # (alexmurray/golangci-lint-snap#3)
      - to riscv64:
        - go/1.22/stable
      - else:
        - go/1.22/stable
        - golangci-lint
    plugin: nil
    override-pull: |
      craftctl default
      set -ex

      # Download the dependencies
      go get -d -v ./...
    override-build: |
      set -ex
      
      # Load dynamic configuration options for MicroOVN snap build
      source ./build-aux/environment
      
      # Conditionally build MicroOVN with coverage instrumentation
      EXTRA_BUILD_ARGS=""
      EXTRA_TEST_ARGS=""

      rm -rf "$CRAFT_STAGE/.coverage"
      UNIT_TEST_COVERAGE_DIR="$CRAFT_STAGE/.coverage/unit_test/coverage"
      mkdir -p "$UNIT_TEST_COVERAGE_DIR"

      echo "" > $CRAFT_STAGE/coverage.env
      if [ "$MICROOVN_COVERAGE" = "yes" ]; then
        EXTRA_BUILD_ARGS="-cover"
        EXTRA_TEST_ARGS="-args -test.gocoverdir=$UNIT_TEST_COVERAGE_DIR"
        cp "$CRAFT_PROJECT_DIR/snapcraft/coverage.env.ignore" "$CRAFT_STAGE/coverage.env"
      fi

      # Setup build environment
      export CGO_CFLAGS="-I${CRAFT_STAGE}/include/ -I${CRAFT_STAGE}/usr/local/include/"
      export CGO_LDFLAGS="-L${CRAFT_STAGE}/lib/ -L${CRAFT_STAGE}/usr/local/lib/"
      export CGO_LDFLAGS_ALLOW="(-Wl,-wrap,pthread_create)|(-Wl,-z,now)"

      # Check that `golangci-lint` is happy with the code.
      if command -v golangci-lint; then
          golangci-lint run --verbose
      else
          echo WARNING: Not running golangci-lint as binary is not available.
      fi

      # Run any unit tests.
      LD_LIBRARY_PATH=${CRAFT_STAGE}/lib/:${CRAFT_STAGE}/usr/local/lib/ \
          go test $EXTRA_BUILD_ARGS ./... $EXTRA_TEST_ARGS

      # Determine versions of packages used to build MicroOVN
      # Note (mkalcok): This code reaches into other snapcraft parts via hardcoded paths
      #                 to determine version of packages from which they were built. It
      #                 will require updates if these part names ever change.
      ovn_pkg_version=$(grep -E '^PACKAGE_VERSION' $CRAFT_PART_SRC/../../ovn/build/Makefile | \
                        awk '{print $NF;}')
      ovs_pkg_version=$(
          dpkg-deb -f \
          $CRAFT_PART_SRC/../../ovs/stage_packages/openvswitch-switch*.deb Version)
      git_version=$(
          git -C $CRAFT_PROJECT_DIR describe \
              --always \
              --dirty \
              --abbrev=10)
      
      craftctl set version=${ovn_pkg_version}+snap${git_version}
      
      version_package=github.com/canonical/microovn/microovn/version
      go_ldflags="-X '${version_package}.MicroOvnVersion=${git_version}${EXTRA_BUILD_ARGS}' \
                  -X '${version_package}.OvnVersion=${ovn_pkg_version}' \
                  -X '${version_package}.OvsVersion=${ovs_pkg_version}'"
      # Build the binaries
      go build -o "${CRAFT_PART_INSTALL}/bin/microovn" \
               -ldflags "$go_ldflags" \
               $EXTRA_BUILD_ARGS \
               ./cmd/microovn
      go build -o "${CRAFT_PART_INSTALL}/bin/microovnd" \
               -ldflags "$go_ldflags" \
               -tags=libsqlite3 \
               $EXTRA_BUILD_ARGS \
               ./cmd/microovnd

    override-prime: |
      craftctl default

      set -ex
      # Load dynamic configuration options for MicroOVN snap build
      source $CRAFT_PART_BUILD/build-aux/environment

      # Prime unit test coverage data if MicroOVN is being built with coverage
      # support
      rm -rf "$CRAFT_PRIME/.coverage"
      if [ "$MICROOVN_COVERAGE" = "yes" ]; then
        cp -r "$CRAFT_STAGE/.coverage" "$CRAFT_PRIME/"
      fi

    prime:
      - bin/microovn
      - bin/microovnd
      - coverage.env

  docs:
    plugin: nil
    source: docs/
    build-packages:
      - libpython3-dev
      - libxml2-dev
      - libxslt1-dev
      - make
      - python3-venv
      - rustc
      - cargo
    override-build: |
      set -ex
      make .sphinx/venv || ( cat .sphinx/venv/pip_install.log && exit 1 )
      make text
      rm -rf ${CRAFT_PART_INSTALL}/docs/microovn
      mkdir -p ${CRAFT_PART_INSTALL}/docs
      cp -pR _build/text ${CRAFT_PART_INSTALL}/docs/microovn
    stage:
      # drop doc starter pack boiler plate files
      - -docs/microovn/help-woke.*
      - -docs/microovn/readme.txt
      - -docs/microovn/setup.txt
      - -docs/microovn/_*

  wrappers:
    plugin: dump
    source: snapcraft/
    stage-packages:
      - jq
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
    prime:
      - commands/*
      - ./*.env
      - bin/jq
      - lib/*/libjq.so*
      - lib/*/libonig.so*
