name: microovn
icon: microovn.png
base: core24
build-base: devel
assumes:
 - snapd2.59
adopt-info: microovn
grade: devel
source-code: https://github.com/canonical/microovn.git
summary: Simple clustered OVN deployment
description: |-
 Self-contained self-deployment with clustering.

confinement: strict

slots:
  ovn-certificates:
    interface: content
    source:
      read:
        - "$SNAP_COMMON/data/pki"
  ovn-env:
    interface: content
    source:
      read:
        - "$SNAP_COMMON/data/env"
  ovn-chassis:
    interface: content
    source:
      write:
        - "$SNAP_COMMON/run/switch"

hooks:
  install:
    plugs:
      - network
      - network-control

apps:
  # Service
  daemon:
    command: commands/daemon.start
    daemon: simple
    plugs:
      - network
      - network-bind
    slots:
      - microovn

  central:
    command: commands/central.start
    daemon: simple
    install-mode: disable

  ovn-ovsdb-server-nb:
    command: commands/ovn-ovsdb-server-nb.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind

  ovn-ovsdb-server-sb:
    command: commands/ovn-ovsdb-server-sb.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind

  ovn-northd:
    command: commands/ovn-northd.start
    daemon: simple
    install-mode: disable
    plugs:
      - network
      - network-bind

  chassis:
    command: commands/chassis.start
    daemon: simple
    install-mode: disable
    stop-command: commands/chassis.stop
    plugs:
      - network
      - network-bind
      - network-control
      - process-control
      - system-trace
      - hardware-observe

  switch:
    command: commands/switch.start
    daemon: simple
    install-mode: disable
    stop-command: commands/switch.stop
    plugs:
      - firewall-control
      - hardware-observe
      - hugepages-control
      - network
      - network-bind
      - network-control
      - openvswitch-support
      - process-control
      - system-trace

  # Commands
  microovn:
    command: commands/microovn
    plugs:
      - network

  ovn-appctl:
    command: commands/ovn-appctl
    plugs:
      - network
  ovn-nbctl:
    command: commands/ovn-nbctl
    plugs:
      - network
  ovn-sbctl:
    command: commands/ovn-sbctl
    plugs:
      - network
  ovn-trace:
    command: commands/ovn-trace
    plugs:
      - network

  ovs-appctl:
    command: commands/ovs-appctl
    plugs:
      - network
  ovs-dpctl:
    command: commands/ovs-dpctl
    plugs:
      - network
      - network-control
  ovs-ofctl:
    command: commands/ovs-ofctl
    plugs:
      - network
  ovs-vsctl:
    command: commands/ovs-vsctl
    plugs:
      - network
  ovsdb-tool:
    command: bin/ovsdb-tool
  ovsdb-client:
    command: bin/ovsdb-client
    plugs:
      - network

  refresh-expiring-certs:
    command: commands/refresh-expiring-certs
    daemon: oneshot
    timer: 02:00~02:30


parts:
  # Dependencies
  dqlite:
    after:
      - raft
    source: https://github.com/canonical/dqlite
    source-type: git
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    stage-packages:
      - libuv1
      - libsqlite3-0
    build-packages:
      - make
      - libuv1-dev
      - libsqlite3-dev
      - pkg-config
    organize:
      usr/lib/: lib/
    prime:
      - lib/libdqlite*so*
      - lib/*/libuv*

  raft:
    source: https://github.com/canonical/raft
    source-type: git
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    stage-packages:
      - libuv1
      - liblz4-1
    build-packages:
      - make
      - libuv1-dev
      - liblz4-dev
      - pkg-config
    organize:
      usr/lib/: lib/
    prime:
      - lib/libraft*so*
      - lib/*/libuv.so*

  ovn:
    plugin: nil
    stage-packages:
      - ovn-central
      - ovn-host
    organize:
      usr/bin/: bin/
      usr/share/: share/
    prime:
     - bin/ovn-appctl
     - bin/ovn-controller
     - bin/ovn-nbctl
     - bin/ovn-northd
     - bin/ovn-sbctl
     - bin/ovn-trace
     - etc/ovn
     - share/ovn
    override-build: |
        craftctl default

        mkdir -p "${CRAFT_PART_INSTALL}/etc/ovn/"

  ovs:
    plugin: nil
    stage-packages:
      - openvswitch-switch
    organize:
      usr/bin/: bin/
      usr/sbin/: bin/
      usr/lib/: lib/
      usr/share/: share/
    prime:
     - bin/ovs-appctl
     - bin/ovs-dpctl
     - bin/ovs-ofctl
     - bin/ovs-vsctl
     - bin/ovs-vswitchd
     - bin/ovsdb-client
     - bin/ovsdb-server
     - bin/ovsdb-tool
       # The lib cherry-picking is unfortunately necessary to avoid pulling in
       # external symlinks provided by the openssl package dependency.
       # (External symlinks, i.e. pointing at something in /, are not allowed.)
     - lib/*/libevent-2.1.so*
     - lib/*/libnuma.so.*
     - lib/*/bpf/*
     - lib/*/libbpf.so.*
     - lib/*/libxdp.so.*
     - lib/*/libunbound.so*
     - share/openvswitch
    override-build: |
        craftctl default

        mkdir -p "${CRAFT_PART_INSTALL}/bin/"
        mv "${CRAFT_PART_INSTALL}/usr/lib/openvswitch-switch/ovs-vswitchd" "${CRAFT_PART_INSTALL}/bin/"

  # Main part
  microovn:
    source: microovn/
    after:
      - dqlite
      - ovn
      - ovs
    build-snaps:
      - go
    plugin: nil
    override-pull: |
      craftctl default
      set -ex

      # Download the dependencies
      go get -d -v ./...
    override-build: |
      set -ex

      # Setup build environment
      export CGO_CFLAGS="-I${CRAFT_STAGE}/include/ -I${CRAFT_STAGE}/usr/local/include/"
      export CGO_LDFLAGS="-L${CRAFT_STAGE}/lib/ -L${CRAFT_STAGE}/usr/local/lib/"
      export CGO_LDFLAGS_ALLOW="(-Wl,-wrap,pthread_create)|(-Wl,-z,now)"

      # Determine versions of packages used to build MicroOVN
      # Note (mkalcok): This code reaches into other snapcraft parts via hardcoded paths
      #                 to determine version of packages from which they were built. It
      #                 will require updates if these part names ever change.
      ovn_pkg_version=$(
          dpkg-deb -f \
          $CRAFT_PART_SRC/../../ovn/stage_packages/ovn-host*.deb Version)
      ovs_pkg_version=$(
          dpkg-deb -f \
          $CRAFT_PART_SRC/../../ovs/stage_packages/openvswitch-switch*.deb Version)
      git_version=$(
          git -C $CRAFT_PROJECT_DIR describe \
              --always \
              --dirty \
              --abbrev=10)
      
      # Set Snap's version string
      # Note (mkalcok): Short version string does not include potential package snapshot hash.
      #                 This is required because Snap's version string is limited to 32 chars
      #                 and inclusion of snapshot hash violates this boundary.
      ovn_pkg_short_version=$(echo $ovn_pkg_version | sed -rne 's/([0-9.]+)[-+~].*$$/\1/p')
      craftctl set version=${ovn_pkg_short_version}+snap${git_version}
      
      # Build the binaries
      go build -o "${CRAFT_PART_INSTALL}/bin/microovn" \
               -ldflags "-X 'main.MicroOvnVersion=${git_version}' \
                         -X 'main.OvnVersion=${ovn_pkg_version}' \
                         -X 'main.OvsVersion=${ovs_pkg_version}'" \
               ./cmd/microovn
      go build -o "${CRAFT_PART_INSTALL}/bin/microovnd" -tags=libsqlite3 ./cmd/microovnd
    prime:
      - bin/microovn
      - bin/microovnd

  docs:
    plugin: nil
    source: docs/
    build-packages:
      - libpython3-dev
      - libxml2-dev
      - libxslt1-dev
      - make
      - python3-venv
    override-build: |
      set -ex
      make .sphinx/venv
      make text
      rm -rf ${CRAFT_PART_INSTALL}/docs/microovn
      mkdir -p ${CRAFT_PART_INSTALL}/docs
      cp -pR _build/text ${CRAFT_PART_INSTALL}/docs/microovn
    stage:
      # drop doc starter pack boiler plate files
      - -docs/microovn/help-woke.*
      - -docs/microovn/readme.txt
      - -docs/microovn/setup.txt
      - -docs/microovn/_*

  wrappers:
    plugin: dump
    source: snapcraft/
    stage-packages:
      - jq
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
    prime:
      - commands/*
      - ./*.env
      - bin/jq
      - lib/*/libjq.so*
      - lib/*/libonig.so*
