From patchwork Thu Jan  2 15:19:33 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029077
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=P0PtvY/o;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=P0PtvY/o;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::138; helo=smtp1.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp1.osuosl.org (smtp1.osuosl.org [IPv6:2605:bc80:3010::138])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9PH14fCz1ycG
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:03 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp1.osuosl.org (Postfix) with ESMTP id 585BB80D92;
	Thu,  2 Jan 2025 15:20:00 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id GMCaqzpj0dMQ; Thu,  2 Jan 2025 15:19:58 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp1.osuosl.org 6582280D6E
Authentication-Results: smtp1.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=P0PtvY/o;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=P0PtvY/o
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp1.osuosl.org (Postfix) with ESMTPS id 6582280D6E;
	Thu,  2 Jan 2025 15:19:56 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id DCE54C08B9;
	Thu,  2 Jan 2025 15:19:55 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp3.osuosl.org (smtp3.osuosl.org [IPv6:2605:bc80:3010::136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 080D8C0889
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:53 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp3.osuosl.org (Postfix) with ESMTP id EA805606EE
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:52 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id 0n9Ux-a1eeYB for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:19:52 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:260c::618;
 helo=eur03-vi1-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp3.osuosl.org 1555B606DC
Authentication-Results: smtp3.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 1555B606DC
Authentication-Results: smtp3.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=P0PtvY/o;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=P0PtvY/o
Received: from EUR03-VI1-obe.outbound.protection.outlook.com
 (mail-vi1eur03on20618.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:260c::618])
 by smtp3.osuosl.org (Postfix) with ESMTPS id 1555B606DC
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:51 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=ll/bYW1PK/WNgOok+5zgsGImfLGA4oML9yJJ+QJDwPGRDD4tv0eQ8yvXW+8/FUWllOlJzqkGTquTN1ISrdvK2QKaPCRavfPuL7grti1UVx8AizmTtzAuzL4qKj19XbyKHiwHBRHz/ACBkvLKHxFZKg/v6AuqO1mM7IyzTrUnXIyNdAl/EMmAude1UPZvCdvfFxnDyC3fENDMsC25j6mAQnyt28VyWEVFlD8bUWiQOoZy55gUzxUXTF5mqt64nzn8zWVdG5pUooM/pELyskioseXz/VQ88VK+Sl1HXPmVuIeEG/iyMuvPbuiyhQ5erS3y/HLJ196WzqB5OAA+ABFvxQ==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=YvpNe9U/IvXSNfgbLgRoFzyTuCccGGuWxpP3g96xD0I=;
 b=qGPse8WSA3dedU4NhyKqyX4Y4il+wnHsAtSBJNfyO+6+J0Trq86bt5OaJzFQMwEsks98eKHJfMcKtw3JSBLxS4OkpwUSSIGGpfZW2Fp6sqE6UHT90zFiImNSuVAc/hskmgVs5C4+ttY6w0adlBuALk4U3GZMNdbLGjSuUWQa608sLrvyh88yCgk07Ab7OHiyrs0dx5N2E+LVWXGz68Q6mb27lglM7cJ/d/CN6Gn+IQK/RN1BPzQTMIQrnWZd9f+jHSDGRNeQnBlriuBVl+pC4dh2i6uMDwXu6+A+i8ijxqsd1do6DEE2ehqwbheQmq95pPC9gUg5EWCkKUsRF0It0Q==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YvpNe9U/IvXSNfgbLgRoFzyTuCccGGuWxpP3g96xD0I=;
 b=P0PtvY/ozpkNr78kQia/4EhNfO2VMPdEAt+zj+ulnr1MWUyuR2ipz9tBdVilTDxDqym0lQzvkHnL9nfLphzqyzTJ4n+01aWu+vkbVbv7pJ2pwp9WygOfDmPf/dUj6gDz/K+O70yvE0MSGcnl4JbR90IgwW334sOtqt2+zxJIkLeDEUpusG1XBcxM/BtlU9lWR1J5jyJvp/20XVk9bzUnEhaPjagGMjibFRi3809I/2ewUcG1xGKBtEtdMREa2VVMXQqihWqQEGo2gjtBt3Q938S8HtZXE9PYvba/b1gU6iKyfYX9nAIamYo2ueERiqJ3+jNQrKOvcBc5I/ooshsFsA==
Received: from DB9PR02CA0023.eurprd02.prod.outlook.com (2603:10a6:10:1d9::28)
 by GV1PR10MB8518.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:150:1cf::8)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8335.5; Thu, 2 Jan
 2025 15:19:42 +0000
Received: from DB5PEPF00014B8F.eurprd02.prod.outlook.com
 (2603:10a6:10:1d9:cafe::2b) by DB9PR02CA0023.outlook.office365.com
 (2603:10a6:10:1d9::28) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8293.20 via Frontend Transport; Thu,
 2 Jan 2025 15:19:42 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DB5PEPF00014B8F.mail.protection.outlook.com (10.167.8.203) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:19:40 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:19:41
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 5311038
X-ExclaimerImprintLatency: 3136417
X-ExclaimerImprintAction: c49ab270be6a4248a079bb966e61056c
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=YV9TirzFGF9ucNAWHprbb5IeoY6UJeT3y5Oex3i9SIvDGI0ovbq9tTYDHzwmcVhWmvPQidUHd2VGIWvWRW3QGySXJlEdrJoIpeqOop5rDZpHthnOHcWNHsTXMTtE6KLBL8UNHdkd9aSvb5BqGBAaxZHBrLjLqA6NiE33L0l8lMdw7pommVocIScWATDhWVJ5As6Ue7UWzzYpxjaX69axUkE5xHPVZa6H3zK69/Tf+xMCjMK+fhW5tLGdvk/TaMfxXTnI+4on5M4rsgRv7JKTIAF7h2vvF1wP9d1z+TfDVYO/3vJpWEqf/yuGjjX/VlQrhpnS54m88+6tkg08415n2g==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=YvpNe9U/IvXSNfgbLgRoFzyTuCccGGuWxpP3g96xD0I=;
 b=UVWiCN8UlCRMQMgNy15LpKu62aQqw4nG6OjEXRaY0S2uyW4bYyfkExVdGfDsQRDRyZKGMpPw2DFNdVDiicR7thxYsGdnUi60xwaOm4vIO8rkfUpm2d3UaN/rht+JmZTal8CEoU9b17GQFqW1SYA0TtKDSZdAuijecSmhzlbrrjWWtYkVOm+9Mwd1iXU7Ruanot2SYuJNVxN1ImCY4cG5CJ8lJ6ZoWYrwuGmU4+JvJkwwVhF58eu53SVwBi4erl/DXIdf0MF1YedPMIS7urUxFjFlyv/0oWI/FQO0n2lPCMaj4wdCZi+aCozNKhctAVhJyAHJyRS6NcIkwG5rXYOXJg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=YvpNe9U/IvXSNfgbLgRoFzyTuCccGGuWxpP3g96xD0I=;
 b=P0PtvY/ozpkNr78kQia/4EhNfO2VMPdEAt+zj+ulnr1MWUyuR2ipz9tBdVilTDxDqym0lQzvkHnL9nfLphzqyzTJ4n+01aWu+vkbVbv7pJ2pwp9WygOfDmPf/dUj6gDz/K+O70yvE0MSGcnl4JbR90IgwW334sOtqt2+zxJIkLeDEUpusG1XBcxM/BtlU9lWR1J5jyJvp/20XVk9bzUnEhaPjagGMjibFRi3809I/2ewUcG1xGKBtEtdMREa2VVMXQqihWqQEGo2gjtBt3Q938S8HtZXE9PYvba/b1gU6iKyfYX9nAIamYo2ueERiqJ3+jNQrKOvcBc5I/ooshsFsA==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:35 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:35 +0000
Date: Thu, 2 Jan 2025 16:19:33 +0100
To: dev@openvswitch.org
Message-ID: 
 <f77c071475b812981f424e2651fe575189f0c772.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0119.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::19) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|DB5PEPF00014B8F:EE_|GV1PR10MB8518:EE_
X-MS-Office365-Filtering-Correlation-Id: 64bd94a5-cf3e-4369-4329-08dd2b40e12b
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 eKtN0sCpMu2Ay8BPlHA2GB6iY52uR+WO6Tmjss6fG8XL18DARqtcuYiwaYr+bQm/1ntltOxbXrF5sRYrYs5EvqHtTmxabf1Eo3aMcPGqc4xbez3tOb4RMPIlkhOPN3IvyORwLKX6TSitrH1WeBOQBnSdHKa+zagV9hlrEy17ymfBvAkrD1uVTAcmEqpnEh/BBdwiU2D6oJtWBnGiTXXPxiT3gIfYadG3z5AEjLnUUCj5ci5zVug1XetcgJD1792UjBqn6yPArgMpCpJaByxmQOCl/R+60ir4bUmMKio1IIsCOosw/5JBJWyWvagH30zn3/hlt0DF8qUZPhJFML0fZ3VjCUjcASUw0HIUtdUW5iCiRsKcfNLavmUethAeD4ZeOHraYmU2ij4UdrJ+6ez68MWCczakJ8ffeO8aUPRHata2s/oiEkT6NkurkZdFIKuZFFQ1NxY9fS0HYB63awoAC8w94YMhQZbO7fb0bKsklEJ4auL7OGnkkHvjX3aweSe1wc6lzvUpbGZFKRYhgqyaCnQptVyHkzuHsY5P4g3aB1a1i2B0f84jW1o9HRnhFC6Q6uBIwZjCiIVyGog9N+F9jRVpWkLjhvccBfap9sAD9mew8b5PoEH9IXRyU0J4j7oYDmweZJrFWqcIGVubkR1fgzoxUtd9KNslLbn7HNBWOWYGq9Wr55kw5Q1XNKOutciPyzES43rXDDKEhbfOXje3G5sa+joeVeaCEkHDcR4fPryt908gj9z4dJXc9eKJumKKhZmPsTLkIFgQh9eD0rq0nrvfYIN52BXiO1mNx5A5w0DxiLMbMdBj8bPCfBQT9RKfjn1vckIctFqkDo0nXIFWB0oFVpTyKWp4MKp4LlMuzrmo9Ho3qh12a9+4ToDh8CZmo71lA0Aec07/z7FZ7ahR4jc1wksiwRcvybGSFWgOtZYRyqJMbQP40Zg/4qJ5dCVlrQZUNlXwvTeNY6qYhza8covqvq61dn1v/NRde3qYtw5F3d3HnuEXWU4jEsgtoQMj4Yo68AzquryLoWPnHVLjfLgIB7IYMiHTHRxbPGBsVP2nVRBmg0qFD+yGDZKlf7/IJQJ4Kmcwx8DLPDQDNkx6oznPx37hS27Z20H2Ne7t7AH9xHO4VXN9Nive0qvKFHNvUpBDkZik8dEvLfUv3ss04rubwG543nkKKd6IPUoox1ltvgIVN5E+xAe/7jdvM14Ge+f8AfyCJjyDkt8VpE59cAEqMnE4FQB0kHduqN1XjfapO58oAFOqzvzOYofEIdhXgY8tXST/AWgIJQwpTHYWt2dZOKglA8AipNrhinOcg4tSaHRBgHUOSoEF1Eiz8Fd0Pv2gq33jAM6Fz07R9+pW0RE6nb3xP+6dPVOeT2FjIrxzpVKdEhfIf1n8l6hko3GO
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DB5PEPF00014B8F.eurprd02.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 2a634933-6d41-4712-8d3d-08dd2b40dd93
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|36860700013|35042699022|82310400026|14060799003|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
 60/LZLB5+v1uAMh44TcHFjFYRMAf2hpLdyiLC+90TkSb7d6SUC0OpFcfJHAgz1QvX92D1CJA7bjmSv6C/tyDt0RYKsfxQ//R6djFCkqvKDLd6+g2NLeTrK6VKnQ/0OP3Gs2S5Ug7XrQ5BkDj7nu7vXnu7mqjw34GxsP+Ed57B8rsCiXHfzfjG6Av1cOqVGJ/mVXTKvgDeL8mKBfzmU9OOvM0TaQ+irZyI8itW7jAFZFoWBz3O6NsJwQFE5sTC5mwYN5qQQHMLx8nnIwK95X2XKqxL9yNJ/wacTIb67/eUcQZaGlTPgIV4tJYeed/YWIdEFGCMCOjLP03nRxW2d0oNie0hS0PoJFjq3A2gQXYA7HTIqZzwoMiONkLAnKE6JZL9T/XQxEGDO4P/1nn7sYBNnt0I552qKMk4D+a3F0BAKCb+dKtjQklNAFbQu0bbFF2Zp3h9qj0uR6KVePXw6fJETPwRcmgv5O/oJJ3NRu1RKjiI17QzdOVhafjjfYGrtwRvGQ2TtfhU2I0TxpR4bp2fywXtbyfMJVcKncOBuAjC6gwOXtYKcOAZH57AlVnKJwIlrOZPRVwzfaTFFQuxS/LS9A/0pqNmV5mX64ZaVoc984oP7Zp//kuo3cfdYqZoFrnKppqmfn1Bch5SwZ4BTrbyC5ZHdetHQqwxojhax0N2gjNzdj9CPdYM2oOifyjxJFqIHgSjufsS3PD8WR9bzGOQuI8AIMFnnP5QBtOa7iH789n4qffVABxSaWkA++6hciiTflaQqhyeJMeCwf1qrdTDjCjCFvR3QuzmLFLmAkjK6HLyTuyyXoKJvLxh8ZiHbqupggj0AkMORyroEXxaVUDPsIfhY4S9tSJD7N3q9TcaAW7z1PKE9qoJt0tAUaYP4gr9GVLPLKO3wlJpGXhB/qZoBKVd+M4MQuN4D2uFedl3oVk/DArSPXs+A3v0+TIBQaL4axT5fa7sR+svIP3u811mTYq9wEtdwEyESeTjHUbXFF17oHcNlUjWxBGoZfsG0WiTR4preoReezCk1+LqEFpl1xbH9ekguDMh9ZoLxx38ysi7Pc/hZ+Nxk7osXCXKVRNLTUR3lzdWPtB8RnGHlgCGiS2PgfRqkbFhLdR5bJVw0IhSVnsKr6drgV8Tx3ZaZbGK3CYG8V8pOTq+7HW/6B+ZAH3mY3hYoHf/u5Qy7IyPBfZ6DeFJdKATpolLY6qfjAik5Ce58o6askCAjqr7D40NwVMHv9tkuUH6qwiPMdpQjs4MrpUPc2SWGP/4rarKicq8zxXw10SHJXL6J2v31uz+NB8rCEVGDczmzSiIkZuMAzAAVPZ3w9HS97ZrnGNqx8vPMnB7f/lJa/dKpxUyHOJwEJKqNPv7/w8hh99zSVaC5jFfFRtdeS8g+gTcW8pmG83cfW1/V7bopZO1Tpugy1tZVyldxi58iNu69Ep5kvUyaUKnmfRd+hkJE/Ir3/RrOukY9NjnLKtHTcrWUFR095hPg==
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(36860700013)(35042699022)(82310400026)(14060799003)(1800799024)(376014);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:19:40.8182 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 64bd94a5-cf3e-4369-4329-08dd2b40e12b
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DB5PEPF00014B8F.eurprd02.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: GV1PR10MB8518
Subject: [ovs-dev] [RFC PATCH ovn v3 1/9] ci: Manage host/system level
 dependencies.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

From: Frode Nordahl <fnordahl@ubuntu.com>

Most dependencies are managed in the `prepare-container` job,
but there are some host/system level dependencies.

This will be used by a subsequent patch that adds system tests
that require the `vrf` kernel module to be loaded.

Signed-off-by: Frode Nordahl <fnordahl@ubuntu.com>
---
 .github/workflows/test.yml | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
index 463d717ef..eba20aaa8 100644
--- a/.github/workflows/test.yml
+++ b/.github/workflows/test.yml
@@ -108,6 +108,11 @@ jobs:
         - { arch: x86, compiler: gcc, opts: --disable-ssl }
 
     steps:
+    - name: system-level-dependencies
+      run: |
+        sudo apt update
+        sudo apt -y install linux-modules-extra-$(uname -r)
+
     - name: checkout
       if: github.event_name == 'push' || github.event_name == 'pull_request'
       uses: actions/checkout@v4

From patchwork Thu Jan  2 15:19:35 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029078
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=uXyrEkED;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=uXyrEkED;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::136; helo=smtp3.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp3.osuosl.org (smtp3.osuosl.org [IPv6:2605:bc80:3010::136])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9PM0XZPz1ybr
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:06 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp3.osuosl.org (Postfix) with ESMTP id 89CA260814;
	Thu,  2 Jan 2025 15:20:04 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id d9B_a9EuC8k1; Thu,  2 Jan 2025 15:20:02 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org A9BD160718
Authentication-Results: smtp3.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=uXyrEkED;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=uXyrEkED
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp3.osuosl.org (Postfix) with ESMTPS id A9BD160718;
	Thu,  2 Jan 2025 15:20:01 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 7DB39C0889;
	Thu,  2 Jan 2025 15:20:01 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp3.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 4D686C02A4
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:59 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp3.osuosl.org (Postfix) with ESMTP id 2BDC7606DC
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:59 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id yGSAlHJf2_9Q for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:19:57 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2613::623;
 helo=eur05-vi1-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp3.osuosl.org A83826073A
Authentication-Results: smtp3.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org A83826073A
Received: from EUR05-VI1-obe.outbound.protection.outlook.com
 (mail-vi1eur05on20623.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2613::623])
 by smtp3.osuosl.org (Postfix) with ESMTPS id A83826073A
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:56 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=pucTF7FK2F8o2g4ZStiDh4YfI2W8TRZODEa+0sD2CZ0M+R+XhMdvMxdVsh8mmi6QOGWLkCwLluCY6qNRN4jsIq3a9LyApBwLHzc16XP7dKIk6B35QfSHbcBo/VFpTS6yDAH4RdQDedSMyKirrcnU2MZwGyMa8qfDVz2sRD/XRBib4W/MpSLZw2+MSD4VMEag9J7RS+CqkNap/VsvXoi8zSJ3IJsGs28iCewHfEyHsyjJUQ/nxwdxWejIJ6oAMxedCxorhfhDIKF242H9pgiZSyNt5qElzdMV7asEiy//X1jBJrUmGiFE1ScRm54zCqMZ50xlionkUtcGqpl9Apr+dQ==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=1uxmki4J/wh01OAYosdOfBd9fd+ZL2ZUlkM5uIMTjCg=;
 b=Ba8jH5v7LENctvZdtkTnsPi0jMmQDJAjamwdcxMYi1YTmhpEOlIsoSWSf3Ujou3ChG8GvXB0Zmvj9A1insgFgjwUZF/JEHQCBTg6ySZIwcE5uLtmr+IftWa+38N36sSWPQkIdVxbBRm8Hu28oJNyrKlrzhIk53I+sy5nG9bLyubnpFrhZPVvKlc7i9fhREI3qB0qHwHZApLIawS77GhPvupXtsaGOdUL+pHHz++2NY7qLScVU632YSh4hsWAVijDEEfGIp3p9mnT3FNR0aVBmdtHoO2NRsn/2X1OLDb8dAn3lF+jV+hV1p++UWOZMBJUgtQV52zcNuTpmRvlFUV2Qg==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=1uxmki4J/wh01OAYosdOfBd9fd+ZL2ZUlkM5uIMTjCg=;
 b=uXyrEkEDl7J+MdIHfljELTbJId+0IElJp+LT0n6Tvx7rW3OgtaFYKVmf5MknWz+V9uhht+a5pCtgraj0BkPgf2OUdeHOD0yoPrXyzelXOy/Zd1bpPPmL6Eorm8LzPEEbwRnB97bVN23TdJKC5Idr4KeELJTzh+F7Mv8CsjJMFucau7mRDuO2/c13/gv90HdOLBtkOwGENplujReOc7y1F4skHqtVkcF+4uj416qvMZmh++mzcjck7eheGyciB/QFsV6VN2UidpdxRVecOdifgBoVybtffleIdy/fqeqibLQrZwi3Z10bmrSUanhW+LDCczlZ6CZLQZUv+A8D8ycMVQ==
Received: from AM0PR01CA0079.eurprd01.prod.exchangelabs.com
 (2603:10a6:208:10e::20) by AM7PR10MB3286.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:20b:dd::10) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8335.5; Thu, 2 Jan
 2025 15:19:45 +0000
Received: from AM4PEPF00027A69.eurprd04.prod.outlook.com
 (2603:10a6:208:10e:cafe::96) by AM0PR01CA0079.outlook.office365.com
 (2603:10a6:208:10e::20) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8293.16 via Frontend Transport; Thu,
 2 Jan 2025 15:19:45 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 AM4PEPF00027A69.mail.protection.outlook.com (10.167.16.87) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:19:43 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:19:43
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 6556207
X-ExclaimerImprintLatency: 4987076
X-ExclaimerImprintAction: 5eecdee03b5d482eb1bf9c4accdc8fdd
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=yIVFqOArMZ0s6ilh9A6koT+f88hA/7Xh32mwGQUtbj2f5Vn9Z43bOCOdl+ugSXdlKfSbY7ESolgNDSiqD2LIoPFncRtPbsaOxK2dwpDh5umeMAPGLtjZBGOJR3a6ooEs2zuh4nZatTj4jS+I8kHTHBEZjkZggtZqie+jfaiBf/pUGkYYKHKCmZTIhPpydjVlk0788ZJ7rc4uQmO+C4eHhoyqSnQu+TS9jbpsC/64hxsFIN6aGlLwD9HMgs/oOI2VJNJ/vMQ+YvLWyxP5M+VJHiKXas1jtUpblcnaH9vQmArvoU5KQM8M7/peOZta46xL7XOPJoUp32mTb0X+VSc67A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=1uxmki4J/wh01OAYosdOfBd9fd+ZL2ZUlkM5uIMTjCg=;
 b=KC6t/orlWdgafZBZ1dowbZELayNOgOyLBYUDGXntuPxmIlm6QA8Kgui3tHSIDwacCqQ/MhA0RuHj3m1ABqz0EaDlsFzciMvuzmzmgtAxsMCwXlaN842rSLsSUf+r18Gt0/6JoaKitda77LnuMlLVxrL9uOeLyjaF+8zg07Rev+ao5IrLmBDTxkahOnkhEzYOz6TsmDj8IXUX953J6EarkGsPfCfjsd9c5HbE5pTPFFKAKtmk+kmwRbEw7KonaOA+Nq9JtKO5XJi2gABfZVWW1ECAhiYUq3yikoOL0HO6lcvnf7Q2yqBGJwCoQjFS92w19Z+oanxoB3CQeBAguz2b5w==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=1uxmki4J/wh01OAYosdOfBd9fd+ZL2ZUlkM5uIMTjCg=;
 b=uXyrEkEDl7J+MdIHfljELTbJId+0IElJp+LT0n6Tvx7rW3OgtaFYKVmf5MknWz+V9uhht+a5pCtgraj0BkPgf2OUdeHOD0yoPrXyzelXOy/Zd1bpPPmL6Eorm8LzPEEbwRnB97bVN23TdJKC5Idr4KeELJTzh+F7Mv8CsjJMFucau7mRDuO2/c13/gv90HdOLBtkOwGENplujReOc7y1F4skHqtVkcF+4uj416qvMZmh++mzcjck7eheGyciB/QFsV6VN2UidpdxRVecOdifgBoVybtffleIdy/fqeqibLQrZwi3Z10bmrSUanhW+LDCczlZ6CZLQZUv+A8D8ycMVQ==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:37 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:37 +0000
Date: Thu, 2 Jan 2025 16:19:35 +0100
To: dev@openvswitch.org
Message-ID: 
 <6dd0661162cec5e1d722a37e7a49ccd2778f33b8.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0110.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::7) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|AM4PEPF00027A69:EE_|AM7PR10MB3286:EE_
X-MS-Office365-Filtering-Correlation-Id: 8d9d8c65-133a-4268-96fc-08dd2b40e2c9
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 tLUlU56fa4d9XiSbos0jM61Y0zu21rBq/8BvaUZRJtpy8HIchPx23KIq8QwA7BmvBLh7MMHpN7A7ufBqnvhKtlO3Pn8JnXHizeLHt7Tdt6S1djt7d9C5zeRJydz+P2IPopolz/wbphK25BopQ1aJR/leo7tRADk4Wx5GeWKYTERA8v+QEhd2RoOjz6nq66KKJzeMftSRpLFrLnAD8BPUYwiMfwPYgE5Pj73MdTt8AYPJ8VkQ2IwCOZTgC2xT46amGlEP27EDPpFKWBqbiA3o1qDlpAt4TXUeJbOAvhebJvdQN9KYCk9Cc3liGs77p21lkbtdcfLhKB9dOfGAPQl2WpOMAV7UfeL1fchefOz2XEptJRSLVE+Q0N45gO/R0LeVuoHBQhtmrow4Izzoq4HrycFoN8IdY08XYFmqOoFqN/HXCDk2pTcFKxtf97qnIgUycb/fCbOC/c9jBH7jAV8dlaknYjtGN7xhQuzEPmnENr2KY2DKqHiio2w11TTohWFrHzbfipaqi+tPgMjfkw8HcUW1DG8wJWEY9ixg4B+pcpDllk6tO+vqkJcK6JbgWlqEiCVAetlHHH0QPWvX5CyUlSn7IGgP0kxo6AKqWurUyES/FcN9PRvHJlYZRj7ckpt727vbdSMgHT566tfoBj2+oZnkazIWtCyt60KXpBRLybWVHdkyjr2tgs0tG1QkxgwMjaUkGgWVGHrYybIVSOR4td7LkyYrF/N2Uqj83IclAUneX6qtS/vY7pGE9/HAzsU+fFok1zq/e0oZrkN9PULUVRToueydRO8tA7JlbHn6RxSbX9pSHakjPw4Q7V8CqxOnTp6Z3/uwrcum5lvbE3tvEZVxkfRSPIRa9ZwT7KjgS9k0oUPddVFEV82nR8Q61xHETgSt4foJy73na3x5U5eexG8eHkaNqYHNmYG2jhhZ3uzGCqBR/nj4bgy8hWVFa7AMq0GzimCNXTYkL1CK7q+/FpPPIZTVzj+2dGbpWFDO0RVL1I6ov6R1CzCvI22PE2X/ain7+75ZdhKUQAUDt91aN6fEUAYaWlfmTYysX3JmRBi15SYpfSWBOl9gNnBnUygL2PHhDOVCfuXpLSLnptv5BUgD6icMr+HyEO4CeEo98aPTZkIMOCFkTeXdv0JMFTwYHQs8m1AREN0uebUfLpt0Vxu5O20zjyOZG4kUkgzm29T5a7Z8zcPPlHXaKaZsbybybDy70bMValF+kuDuCPw9ju89xNTlUIfh2s2bCTBUGTmTcPJaV1xmjhnMQIqe4lJAzFuQCZfm2RYJP0MBhdKqZrnWpRUuhMgEsL4P/3put18ywuWK9EUOYW3Ik5SkrZGkdBDAknpamhpfLXVWV86/aNWsroI3U2Yd+tutX+se0Y6qF9TU5BDv8HfOi/Ir+qET
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 AM4PEPF00027A69.eurprd04.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 a9d40740-0a45-49a3-95f7-08dd2b40de9a
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|35042699022|82310400026|14060799003|1800799024|376014|36860700013;
X-Microsoft-Antispam-Message-Info: 
 64q0NRJHJKuPzt+RDAi1eHK5LmjxoHhHosVKHOjOOq/d5lwnk5UNyHA7oyoQkES2n2lwJoV/HcJGMcyxdkbJ1qjiBCtGWFAMfhOBwTlJbreZErp9d7cBzohFjyaeyuK78nrqdnfW25MEl4Y0G5DUj4RduFc7rvPFi33r6a37Y65khSAjyaEOtaP68JIUz5DNJk8L/tjpSK2pm2IoppKFgVg1Q+JgJsGFmcwPMqCV+XFt1UhBwvNGXNrjAg5FfDfvOfRqoHRpk7K4LCy63yUwj/FmoEMDc3xZKARCjNR8jQOsFJCzaL/Jjcze8Mz+zouI4iWyKCXczJ2HXNcB6nzOCX3Xx4i5NWcWl7kwy1LVoQM5AewwFiGF5FsYsA/w4f4IIw0DcTUcqawr0aj3fVmWIqLqpWvTPHghStpGIXYHNj5kCEa9djqFfiNSOdVFUxme2emDi5kg18rcbGYmCeTNU7Ca2GsPt9AYbpIM8ikNUE3Gnfj6Ak2sx1LItlopmstIA2RxmK8dBWoZUkarRhFuKzn1Re1uI5ellj78k6cdNhMkTTVBHDHOBP5+zzQVnWApMS9dBrnWRhfJLI6AuW3Au0CXIyyhYMMKb3Iaeb665Vcs60nkIqWdke1FVff8rrh6eLvpcckEYo/fnTsuUYT3ECFEfXTHUEt+nYCP+2BJSk2Uz5zbLzmhiyEoqpemEnVjPG/TCl/y3JzCNXTFyxHGOlifsuQPG0yMJ/sxpHZVYO39HON5LhQ/Irj7uYW35p/8ZTtq5C+zGF7Of777YH+0btPyV9LADFARUaNQokaWQqzvzs4o09pIP23IOhxjR6M1nejshBPK6RbLvU+iXNrXx1WTDKQZ6Vt5tQdnKHxj8gcP1jGSO46Cql3lmbX+4iQchrekxRd84CNaP623Wj++lf13VsNCndGULks+N0BdIWQeLglcgKO6dr0v/VTN828GBZkfmoxqscD6wYJASsA/oZMQeijlzZlpKwr21fgK6eyGMuHx8kv8VIJPLzN+fORXOmZDiYlB7Gi4lmCVoJ6H2yIv1rgekT7ALI+rQUUQZ5qDHJiRfzbnuUmtCUb9TMwicrxcBImyB3e2nw4IaVIfvJnsuVf+asGiN4OudjoXzW+PN9e9enKrjRmSoq+3hw3O2hjUFlxMmTyrBk1LtkQoqcwrDtOy3dxBk29s8F2H6hLZu/n/T+b1OMeiErgdkFPKI46vVsLy3/lBNqyBGZ0hxPDvqRsZ1PF8O7gJ47JS9Sp4o8g5/jO0ZyyrnRDfWadD0ur6ds69vy5bb0JhXD8HSOPvFSBaLpsoWV8RvZUCJGq0ydNPyPqT7EhY3WFz7l2bx44vEKIbTSbBkXWXz+cK9j0mNcTGoqNKrn+lSB+RAKdd4LCo8DTofLjavaIHvghsmV1xkFc9djkAhjGNsQnn1g4MbmTkpi+4oNS/zzd9qpucH9HxCx4XW44VuvyqqrkODRiOgOZuttyZgNVQHXPmQrYTlj1SwmA5V3FiueKv0lo=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(35042699022)(82310400026)(14060799003)(1800799024)(376014)(36860700013);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:19:43.4085 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 8d9d8c65-133a-4268-96fc-08dd2b40e2c9
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 AM4PEPF00027A69.eurprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM7PR10MB3286
Subject: [ovs-dev] [RFC PATCH ovn v3 2/9] controller: Introduce route node.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

this engine node determines the routes that the ovn-controller should
export.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 controller/automake.mk      |   4 +-
 controller/ovn-controller.c | 191 +++++++++++++++++++++++++++++++++-
 controller/route.c          | 197 ++++++++++++++++++++++++++++++++++++
 controller/route.h          |  73 +++++++++++++
 tests/automake.mk           |   1 +
 5 files changed, 464 insertions(+), 2 deletions(-)
 create mode 100644 controller/route.c
 create mode 100644 controller/route.h

diff --git a/controller/automake.mk b/controller/automake.mk
index bb0bf2d33..a6a2c517a 100644
--- a/controller/automake.mk
+++ b/controller/automake.mk
@@ -51,7 +51,9 @@ controller_ovn_controller_SOURCES = \
 	controller/ct-zone.h \
 	controller/ct-zone.c \
 	controller/ovn-dns.c \
-	controller/ovn-dns.h
+	controller/ovn-dns.h \
+	controller/route.h \
+	controller/route.c
 
 controller_ovn_controller_LDADD = lib/libovn.la $(OVS_LIBDIR)/libopenvswitch.la
 man_MANS += controller/ovn-controller.8
diff --git a/controller/ovn-controller.c b/controller/ovn-controller.c
index 157def2a3..df96d77e3 100644
--- a/controller/ovn-controller.c
+++ b/controller/ovn-controller.c
@@ -88,6 +88,7 @@
 #include "lib/dns-resolve.h"
 #include "ct-zone.h"
 #include "ovn-dns.h"
+#include "route.h"
 
 VLOG_DEFINE_THIS_MODULE(main);
 
@@ -864,7 +865,8 @@ ctrl_register_ovs_idl(struct ovsdb_idl *ovs_idl)
     SB_NODE(fdb, "fdb") \
     SB_NODE(meter, "meter") \
     SB_NODE(static_mac_binding, "static_mac_binding") \
-    SB_NODE(chassis_template_var, "chassis_template_var")
+    SB_NODE(chassis_template_var, "chassis_template_var") \
+    SB_NODE(advertised_route, "advertised_route")
 
 enum sb_engine_node {
 #define SB_NODE(NAME, NAME_STR) SB_##NAME,
@@ -4804,6 +4806,175 @@ pflow_lflow_output_sb_chassis_handler(struct engine_node *node,
     return true;
 }
 
+struct ed_type_route {
+    /* Contains struct tracked_datapath entries for local datapaths subject to
+     * route exchange. */
+    struct hmap tracked_route_datapaths;
+    /* Contains struct advertise_datapath_entry */
+    struct hmap announce_routes;
+};
+
+static void
+en_route_run(struct engine_node *node, void *data)
+{
+    struct ed_type_route *re_data = data;
+    route_cleanup(&re_data->announce_routes);
+
+    const struct ovsrec_open_vswitch_table *ovs_table =
+        EN_OVSDB_GET(engine_get_input("OVS_open_vswitch", node));
+    const char *chassis_id = get_ovs_chassis_id(ovs_table);
+    ovs_assert(chassis_id);
+
+    struct ovsdb_idl_index *sbrec_chassis_by_name =
+        engine_ovsdb_node_get_index(
+                engine_get_input("SB_chassis", node),
+                "name");
+    const struct sbrec_chassis *chassis
+        = chassis_lookup_by_name(sbrec_chassis_by_name, chassis_id);
+    ovs_assert(chassis);
+
+    struct ovsdb_idl_index *sbrec_port_binding_by_name =
+        engine_ovsdb_node_get_index(
+                engine_get_input("SB_port_binding", node),
+                "name");
+    struct ed_type_runtime_data *rt_data =
+        engine_get_input_data("runtime_data", node);
+
+    struct ovsdb_idl_index *sbrec_advertised_route_by_datapath =
+        engine_ovsdb_node_get_index(
+            engine_get_input("SB_advertised_route", node),
+            "datapath");
+
+    struct route_ctx_in r_ctx_in = {
+        .ovnsb_idl_txn = engine_get_context()->ovnsb_idl_txn,
+        .sbrec_port_binding_by_name = sbrec_port_binding_by_name,
+        .chassis = chassis,
+        .active_tunnels = &rt_data->active_tunnels,
+        .local_datapaths = &rt_data->local_datapaths,
+        .local_lports = &rt_data->local_lports,
+        .sbrec_advertised_route_by_datapath =
+            sbrec_advertised_route_by_datapath,
+    };
+
+    struct route_ctx_out r_ctx_out = {
+        .tracked_re_datapaths = &re_data->tracked_route_datapaths,
+        .announce_routes = &re_data->announce_routes,
+    };
+
+    route_run(&r_ctx_in, &r_ctx_out);
+
+    engine_set_node_state(node, EN_UPDATED);
+}
+
+
+static void *
+en_route_init(struct engine_node *node OVS_UNUSED,
+                       struct engine_arg *arg OVS_UNUSED)
+{
+    struct ed_type_route *data = xzalloc(sizeof *data);
+
+    hmap_init(&data->tracked_route_datapaths);
+    hmap_init(&data->announce_routes);
+
+    return data;
+}
+
+static void
+en_route_cleanup(void *data)
+{
+    struct ed_type_route *re_data = data;
+
+    tracked_datapaths_destroy(&re_data->tracked_route_datapaths);
+    route_cleanup(&re_data->announce_routes);
+    hmap_destroy(&re_data->announce_routes);
+}
+
+static bool
+route_runtime_data_handler(struct engine_node *node, void *data)
+{
+    struct ed_type_route *re_data = data;
+    struct ed_type_runtime_data *rt_data =
+        engine_get_input_data("runtime_data", node);
+
+    if (!rt_data->tracked) {
+        return false;
+    }
+
+    struct tracked_datapath *t_dp;
+    HMAP_FOR_EACH (t_dp, node, &rt_data->tracked_dp_bindings) {
+        struct tracked_datapath *re_t_dp =
+            tracked_datapath_find(&re_data->tracked_route_datapaths, t_dp->dp);
+
+        if (re_t_dp) {
+            /* Until we get I-P support for route exchange we need to request
+             * recompute. */
+            return false;
+        }
+
+        struct shash_node *shash_node;
+        SHASH_FOR_EACH (shash_node, &t_dp->lports) {
+            struct tracked_lport *lport = shash_node->data;
+            if (route_exchange_relevant_port(lport->pb)) {
+                /* Until we get I-P support for route exchange we need to
+                 * request recompute. */
+                return false;
+            }
+        }
+    }
+
+    return true;
+}
+
+static bool
+route_sb_port_binding_data_handler(struct engine_node *node, void *data)
+{
+    struct ed_type_route *re_data = data;
+    const struct sbrec_port_binding_table *pb_table =
+        EN_OVSDB_GET(engine_get_input("SB_port_binding", node));
+
+    const struct sbrec_port_binding *sbrec_pb;
+    SBREC_PORT_BINDING_TABLE_FOR_EACH_TRACKED (sbrec_pb, pb_table) {
+        struct tracked_datapath *re_t_dp =
+            tracked_datapath_find(&re_data->tracked_route_datapaths,
+                                  sbrec_pb->datapath);
+        if (re_t_dp) {
+            /* Until we get I-P support for route exchange we need to request
+             * recompute. */
+            return false;
+        }
+
+        if (route_exchange_relevant_port(sbrec_pb)) {
+            /* Until we get I-P support for route exchange we need to
+             * request recompute. */
+            return false;
+        }
+
+    }
+    return true;
+}
+
+static bool
+route_sb_advertised_route_data_handler(struct engine_node *node, void *data)
+{
+    struct ed_type_route *re_data = data;
+    const struct sbrec_advertised_route_table *advertised_route_table =
+        EN_OVSDB_GET(engine_get_input("SB_advertised_route", node));
+
+    const struct sbrec_advertised_route *sbrec_route;
+    SBREC_ADVERTISED_ROUTE_TABLE_FOR_EACH_TRACKED (sbrec_route,
+                                                   advertised_route_table) {
+        struct tracked_datapath *re_t_dp =
+            tracked_datapath_find(&re_data->tracked_route_datapaths,
+                                  sbrec_route->datapath);
+        if (re_t_dp) {
+            /* Until we get I-P support for route exchange we need to request
+             * recompute. */
+            return false;
+        }
+    }
+    return true;
+}
+
 /* Returns false if the northd internal version stored in SB_Global
  * and ovn-controller internal version don't match.
  */
@@ -5012,6 +5183,9 @@ main(int argc, char *argv[])
     struct ovsdb_idl_index *sbrec_chassis_template_var_index_by_chassis
         = ovsdb_idl_index_create1(ovnsb_idl_loop.idl,
                                   &sbrec_chassis_template_var_col_chassis);
+    struct ovsdb_idl_index *sbrec_advertised_route_index_by_datapath
+        = ovsdb_idl_index_create1(ovnsb_idl_loop.idl,
+                                  &sbrec_advertised_route_col_datapath);
 
     ovsdb_idl_track_add_all(ovnsb_idl_loop.idl);
     ovsdb_idl_omit_alert(ovnsb_idl_loop.idl,
@@ -5095,6 +5269,7 @@ main(int argc, char *argv[])
     ENGINE_NODE(mac_cache, "mac_cache");
     ENGINE_NODE(bfd_chassis, "bfd_chassis");
     ENGINE_NODE(dns_cache, "dns_cache");
+    ENGINE_NODE(route, "route");
 
 #define SB_NODE(NAME, NAME_STR) ENGINE_NODE_SB(NAME, NAME_STR);
     SB_NODES
@@ -5117,6 +5292,15 @@ main(int argc, char *argv[])
     engine_add_input(&en_lb_data, &en_runtime_data,
                      lb_data_runtime_data_handler);
 
+    engine_add_input(&en_route, &en_ovs_open_vswitch, NULL);
+    engine_add_input(&en_route, &en_sb_chassis, NULL);
+    engine_add_input(&en_route, &en_sb_port_binding,
+                     route_sb_port_binding_data_handler);
+    engine_add_input(&en_route, &en_runtime_data,
+                     route_runtime_data_handler);
+    engine_add_input(&en_route, &en_sb_advertised_route,
+                     route_sb_advertised_route_data_handler);
+
     engine_add_input(&en_addr_sets, &en_sb_address_set,
                      addr_sets_sb_address_set_handler);
     engine_add_input(&en_port_groups, &en_sb_port_group,
@@ -5302,6 +5486,9 @@ main(int argc, char *argv[])
                      controller_output_mac_cache_handler);
     engine_add_input(&en_controller_output, &en_bfd_chassis,
                      controller_output_bfd_chassis_handler);
+    /* This is just temporary until the route output is actually used. */
+    engine_add_input(&en_controller_output, &en_route,
+                     controller_output_bfd_chassis_handler);
 
     struct engine_arg engine_arg = {
         .sb_idl = ovnsb_idl_loop.idl,
@@ -5332,6 +5519,8 @@ main(int argc, char *argv[])
                                 sbrec_static_mac_binding_by_datapath);
     engine_ovsdb_node_add_index(&en_sb_chassis_template_var, "chassis",
                                 sbrec_chassis_template_var_index_by_chassis);
+    engine_ovsdb_node_add_index(&en_sb_advertised_route, "datapath",
+                                sbrec_advertised_route_index_by_datapath);
     engine_ovsdb_node_add_index(&en_ovs_flow_sample_collector_set, "id",
                                 ovsrec_flow_sample_collector_set_by_id);
     engine_ovsdb_node_add_index(&en_ovs_port, "qos", ovsrec_port_by_qos);
diff --git a/controller/route.c b/controller/route.c
new file mode 100644
index 000000000..b3ff77b83
--- /dev/null
+++ b/controller/route.c
@@ -0,0 +1,197 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include <net/if.h>
+
+#include "openvswitch/vlog.h"
+
+#include "lib/ovn-sb-idl.h"
+
+#include "binding.h"
+#include "ha-chassis.h"
+#include "local_data.h"
+#include "route.h"
+
+
+VLOG_DEFINE_THIS_MODULE(exchange);
+static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);
+
+/* While the linux kernel can handle 2^32 routing tables, only so many can fit
+ * in the corresponding VRF interface name. */
+#define MAX_TABLE_ID 1000000000
+
+bool
+route_exchange_relevant_port(const struct sbrec_port_binding *pb)
+{
+    return (pb && smap_get_bool(&pb->options, "dynamic-routing", false));
+}
+
+uint32_t
+advertise_route_hash(const struct in6_addr *dst, unsigned int plen)
+{
+    uint32_t hash = hash_bytes(dst->s6_addr, 16, 0);
+    return hash_int(plen, hash);
+}
+
+static const struct sbrec_port_binding*
+find_route_exchange_pb(struct ovsdb_idl_index *sbrec_port_binding_by_name,
+                       const struct sbrec_chassis *chassis,
+                       const struct sset *active_tunnels,
+                       const struct sbrec_port_binding *pb)
+{
+    if (!pb) {
+        return NULL;
+    }
+    if (route_exchange_relevant_port(pb)) {
+      return pb;
+    }
+    const char *crp = smap_get(&pb->options, "chassis-redirect-port");
+    if (!crp) {
+        return NULL;
+    }
+    if (!lport_is_chassis_resident(sbrec_port_binding_by_name, chassis,
+                                   active_tunnels, crp)) {
+        return NULL;
+    }
+    const struct sbrec_port_binding *crpbp = lport_lookup_by_name(
+        sbrec_port_binding_by_name, crp);
+    if (route_exchange_relevant_port(crpbp)) {
+        return crpbp;
+    }
+    return NULL;
+}
+
+static void
+advertise_datapath_cleanup(struct advertise_datapath_entry *ad)
+{
+    struct advertise_route_entry *ar;
+    HMAP_FOR_EACH_SAFE (ar, node, &ad->routes) {
+        hmap_remove(&ad->routes, &ar->node);
+        free(ar);
+    }
+    hmap_destroy(&ad->routes);
+    sset_destroy(&ad->bound_ports);
+    free(ad);
+}
+
+void
+route_run(struct route_ctx_in *r_ctx_in,
+          struct route_ctx_out *r_ctx_out)
+{
+    const struct local_datapath *ld;
+    HMAP_FOR_EACH (ld, hmap_node, r_ctx_in->local_datapaths) {
+        if (!ld->n_peer_ports || ld->is_switch) {
+            continue;
+        }
+
+        bool relevant_datapath = false;
+        struct advertise_datapath_entry *ad = xzalloc(sizeof(*ad));
+        ad->key = ld->datapath->tunnel_key;
+        ad->db = ld->datapath;
+        hmap_init(&ad->routes);
+        sset_init(&ad->bound_ports);
+
+        /* This is a LR datapath, find LRPs with route exchange options
+         * that are bound locally. */
+        for (size_t i = 0; i < ld->n_peer_ports; i++) {
+            const struct sbrec_port_binding *local_peer
+                = ld->peer_ports[i].local;
+            const struct sbrec_port_binding *repb = find_route_exchange_pb(
+                r_ctx_in->sbrec_port_binding_by_name,
+                r_ctx_in->chassis,
+                r_ctx_in->active_tunnels,
+                local_peer);
+            if (!repb) {
+                continue;
+            }
+
+            ad->maintain_vrf |= smap_get_bool(&repb->options,
+                                          "maintain-vrf", false);
+            ad->use_netns |= smap_get_bool(&repb->options,
+                                       "use-netns", false);
+            relevant_datapath = true;
+            sset_add(&ad->bound_ports, local_peer->logical_port);
+        }
+
+        if (!relevant_datapath) {
+            advertise_datapath_cleanup(ad);
+            continue;
+        }
+        tracked_datapath_add(ld->datapath, TRACKED_RESOURCE_NEW,
+                             r_ctx_out->tracked_re_datapaths);
+
+        /* While tunnel_key would most likely never be negative, the compiler
+         * has opinions if we don't check before using it in snprintf below. */
+        if (ld->datapath->tunnel_key < 0 ||
+            ld->datapath->tunnel_key > MAX_TABLE_ID) {
+            VLOG_WARN_RL(&rl,
+                         "skip route sync for datapath "UUID_FMT", "
+                         "tunnel_key %"PRIi64" would make VRF interface name "
+                         "overflow.",
+                         UUID_ARGS(&ld->datapath->header_.uuid),
+                         ld->datapath->tunnel_key);
+            goto cleanup;
+        }
+
+        if (ad->maintain_vrf && ad->use_netns) {
+            VLOG_WARN_RL(&rl,
+                         "For Datapath %"PRIu64" both maintain-vrf and "
+                         "use-netns are set, this will never work",
+                         ld->datapath->tunnel_key);
+            goto cleanup;
+        }
+
+        struct sbrec_advertised_route *route_filter =
+            sbrec_advertised_route_index_init_row(
+                r_ctx_in->sbrec_advertised_route_by_datapath);
+        sbrec_advertised_route_index_set_datapath(route_filter, ld->datapath);
+        struct sbrec_advertised_route *route;
+        SBREC_ADVERTISED_ROUTE_FOR_EACH_EQUAL (route, route_filter,
+                r_ctx_in->sbrec_advertised_route_by_datapath) {
+            struct in6_addr prefix;
+            unsigned int plen;
+            if (!ip46_parse_cidr(route->ip_prefix, &prefix, &plen)) {
+                VLOG_WARN_RL(&rl, "bad 'ip_prefix' %s in route "
+                             UUID_FMT, route->ip_prefix,
+                             UUID_ARGS(&route->header_.uuid));
+                continue;
+            }
+
+            struct advertise_route_entry *ar = xzalloc(sizeof(*ar));
+            hmap_insert(&ad->routes, &ar->node,
+                        advertise_route_hash(&prefix, plen));
+            ar->addr = prefix;
+            ar->plen = plen;
+        }
+        sbrec_advertised_route_index_destroy_row(route_filter);
+
+        hmap_insert(r_ctx_out->announce_routes, &ad->node, ad->key);
+        continue;
+
+cleanup:
+        advertise_datapath_cleanup(ad);
+    }
+}
+
+void
+route_cleanup(struct hmap *announce_routes)
+{
+    struct advertise_datapath_entry *ad;
+    HMAP_FOR_EACH_SAFE (ad, node, announce_routes) {
+        hmap_remove(announce_routes, &ad->node);
+        advertise_datapath_cleanup(ad);
+    }
+}
diff --git a/controller/route.h b/controller/route.h
new file mode 100644
index 000000000..2a54cf3e3
--- /dev/null
+++ b/controller/route.h
@@ -0,0 +1,73 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ROUTE_H
+#define ROUTE_H 1
+
+#include <stdbool.h>
+#include <netinet/in.h>
+#include "openvswitch/hmap.h"
+#include "sset.h"
+
+struct hmap;
+struct ovsdb_idl_index;
+struct sbrec_chassis;
+struct sbrec_port_binding;
+struct sset;
+
+struct route_ctx_in {
+    struct ovsdb_idl_txn *ovnsb_idl_txn;
+    struct ovsdb_idl_index *sbrec_port_binding_by_name;
+    const struct sbrec_chassis *chassis;
+    const struct sset *active_tunnels;
+    struct hmap *local_datapaths;
+    const struct sset *local_lports;
+    struct ovsdb_idl_index *sbrec_advertised_route_by_datapath;
+};
+
+struct route_ctx_out {
+    struct hmap *tracked_re_datapaths;
+    /* Contains struct advertise_datapath_entry */
+    struct hmap *announce_routes;
+};
+
+struct advertise_datapath_entry {
+    struct hmap_node node;
+    /* tunnel_key of the datapath */
+    int64_t key;
+    const struct sbrec_datapath_binding *db;
+    bool maintain_vrf;
+    bool use_netns;
+    struct hmap routes;
+    /* the name of the port bindings locally bound for this datapath and
+     * running route exchange logic. */
+    struct sset bound_ports;
+};
+
+struct advertise_route_entry {
+    struct hmap_node node;
+    struct in6_addr addr;
+    unsigned int plen;
+    /* used by the route-exchange module to determine if the route is
+     * already installed */
+    bool installed;
+};
+
+bool route_exchange_relevant_port(const struct sbrec_port_binding *pb);
+uint32_t advertise_route_hash(const struct in6_addr *dst, unsigned int plen);
+void route_run(struct route_ctx_in *,
+               struct route_ctx_out *);
+void route_cleanup(struct hmap *announce_routes);
+
+#endif /* ROUTE_H */
diff --git a/tests/automake.mk b/tests/automake.mk
index 3899c9e80..9244532fa 100644
--- a/tests/automake.mk
+++ b/tests/automake.mk
@@ -305,6 +305,7 @@ tests_ovstest_LDADD = $(OVS_LIBDIR)/daemon.lo \
 	controller/ovsport.$(OBJEXT) \
 	controller/patch.$(OBJEXT) \
 	controller/vif-plug.$(OBJEXT) \
+	controller/route.$(OBJEXT) \
 	northd/ipam.$(OBJEXT)
 
 # Python tests.

From patchwork Thu Jan  2 15:19:37 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029079
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QQ41jP5K;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=QQ41jP5K;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::137; helo=smtp4.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp4.osuosl.org (smtp4.osuosl.org [IPv6:2605:bc80:3010::137])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9PP2nDfz1yTy
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:09 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp4.osuosl.org (Postfix) with ESMTP id 4210E40585;
	Thu,  2 Jan 2025 15:20:08 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp4.osuosl.org ([127.0.0.1])
 by localhost (smtp4.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id csqlm0Slj9nc; Thu,  2 Jan 2025 15:20:06 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp4.osuosl.org A0C9140566
Authentication-Results: smtp4.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QQ41jP5K;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=QQ41jP5K
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp4.osuosl.org (Postfix) with ESMTPS id A0C9140566;
	Thu,  2 Jan 2025 15:20:05 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id BDF6CC0889;
	Thu,  2 Jan 2025 15:20:04 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp4.osuosl.org (smtp4.osuosl.org [IPv6:2605:bc80:3010::137])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 895B3C02A4
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:00 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp4.osuosl.org (Postfix) with ESMTP id 6BA6340531
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:00 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp4.osuosl.org ([127.0.0.1])
 by localhost (smtp4.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id eMwgyAASD4nP for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:19:59 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:c201::3;
 helo=as8pr04cu009.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp4.osuosl.org 9D5C2404FE
Authentication-Results: smtp4.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp4.osuosl.org 9D5C2404FE
Received: from AS8PR04CU009.outbound.protection.outlook.com
 (mail-westeuropeazlp170110003.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:c201::3])
 by smtp4.osuosl.org (Postfix) with ESMTPS id 9D5C2404FE
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:19:58 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=cJdsXRyqzzwaw/n+MfuNsp4S0VF2RcuDKSaI/KxfumZiAnnz1NYzse/cczbf6HZHyPFPxaTmViy9YVvjufQ8YnO0eQx6X0EkTq2D2DPZpcd1JhizoxzummJcCakgZ23OflgBJ7rglEh73EHbJHOjNSAyzWUzOzFWXmsOuR1vPdAy1Cu6E8beQB3JzdWsx+niXGC8SNR2A7tReSuCvdiYUT17fjU46f0/ZysfFEHzKHklr3vhD5QEe41+mJhNgLptvBmqVTSYe8j/zZsO0N0ZAGitUF8Rp2PEwkScJ0Qpd9UeCM3GKgaRixz1uIX8D3p1c40XVOiUhVXi4Glfkpmk+w==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=nr2QYm1LbtD4jgI++Z+VgSyzsLv36iuVK/MY5LzbdgE=;
 b=wK9vR3yGUdUio5TcV2cksBsZ8t2KmwXQw3GKa3ta/6AA4xk1Gn6dwdxkXZ+ZugBVd1Q77r/bpSx0Hpofsybr3iQ3+qMNwKy8EOQwlJMjJi3FjsV2mEgokCT+/7jK8zBdnju3VE5k3sOnFvpe477JAaQU0++HsyBTZ7IC0ABubb6fAzNruNPepttyk6jFzPVj4Ot1Hfj7zCqfOPn/WGAkT60NMtqy+9RuxEsu0LDWymKbihOdFUwWn6wMxcyWWb1rsNXSMXtXdf60VO4WokMmQGMS+XeRPRTUGDngo+dc5ZWXP6hTlkvJ4PcFjBQjx6M8J9wnF9GZ+UZyWf0Uy5yMwA==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=nr2QYm1LbtD4jgI++Z+VgSyzsLv36iuVK/MY5LzbdgE=;
 b=QQ41jP5KpW0+gCe5G2VK8O/+B9t26lNKEUrMyZlJTSsLO53XM/Lwjx6OwA6z+I5CmHgFzGHGugAY4R0AVhMN0k21bugTN2hxOYn9n+zym5Rxa4AoHsoA+B14nszPwUYKGMfCxfemB9qzXvyYoj8b3HFf2U5cNCTV0weR8UwlMNLNC5SpPJT311bGz2q+ijGDcBz9LX5o7ruRVwkE0kd3+mV5UbwGAQTy1+5YEtIeArnIEU9BSES0wtu/s7qZQ81lnBiy7Wv0ZlQWNME4OteT8dyojKrxfC3IBeSJNh0R7UrHlmgH9qCMIKm0X9CXe3mBYdoi3Naw56x+vTg1MlBHmg==
Received: from DU6P191CA0055.EURP191.PROD.OUTLOOK.COM (2603:10a6:10:53e::26)
 by GVXPR10MB5863.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:150:7::9) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8335.6; Thu, 2 Jan
 2025 15:19:48 +0000
Received: from DU2PEPF00028D00.eurprd03.prod.outlook.com
 (2603:10a6:10:53e:cafe::d6) by DU6P191CA0055.outlook.office365.com
 (2603:10a6:10:53e::26) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8314.13 via Frontend Transport; Thu,
 2 Jan 2025 15:19:48 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D00.mail.protection.outlook.com (10.167.242.184) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:19:45 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:19:46
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 10965548
X-ExclaimerImprintLatency: 8663817
X-ExclaimerImprintAction: 3cd34020dab04ef5b7d2be95793800c1
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Ny9y2zn7R374ep8N5kKJRRqi6UjDQ6kkIkNS9pqv6oO8eRK4BQfYO63eAG8VodnL4NoYO6uMHXWDfu/Tg4Qozr6JbtBDNePj8NrzDZJrcYt2q6QPqaHFBW0D2+wvY4UWqakFuWkNnCb6zIAzpheYWWXXcoFktBGnXTi98ay4atIPdTX4zaylzd3zQn/oor4C1TJjrPibzmbYDqoFaWY7rSExDqEpqBOkykWygFpJIzfBuceok7C9/6HD102w0VF+V2LBj9vEneNaak2SMXS2HcuiybnUgCC8JV7DUGAKQc7ohbOv7h5F7Rbr/DKnXrq/9AXEJ0Edh8kNComXpEtdcg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=nr2QYm1LbtD4jgI++Z+VgSyzsLv36iuVK/MY5LzbdgE=;
 b=qwKqRQxJ1d6Vg0bQPTz0EOYyoZGvGAxsIq0oh1ueFiu1H/KFaPBijaz0+Kp6sMz0cPjAh/GyL1AgFtB2QIwnA1NI5Rbv7Hkk3n1RakS7r/UHdv4q72UtU+MEszgNq335L3Rs6Hd8/5PDJT60XELMFsm7qHcDPv61bXu4x6/HPh+3OZzwnOfrLc9GonmaDyPHEVINNEy3Eewxjc68Rfx83zFFEYa47GJ1Kx6DON0Slp5Nq9qpUp2CrYk2U77kVjdTzjguaX2eta1uMJIslsSj9bFBPpUwVUVFzSiW2Sui6caYIC6aWqGtdb+Ja8+3s9U7gKvGd6o62Zt1N/bnti/Uwg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=nr2QYm1LbtD4jgI++Z+VgSyzsLv36iuVK/MY5LzbdgE=;
 b=QQ41jP5KpW0+gCe5G2VK8O/+B9t26lNKEUrMyZlJTSsLO53XM/Lwjx6OwA6z+I5CmHgFzGHGugAY4R0AVhMN0k21bugTN2hxOYn9n+zym5Rxa4AoHsoA+B14nszPwUYKGMfCxfemB9qzXvyYoj8b3HFf2U5cNCTV0weR8UwlMNLNC5SpPJT311bGz2q+ijGDcBz9LX5o7ruRVwkE0kd3+mV5UbwGAQTy1+5YEtIeArnIEU9BSES0wtu/s7qZQ81lnBiy7Wv0ZlQWNME4OteT8dyojKrxfC3IBeSJNh0R7UrHlmgH9qCMIKm0X9CXe3mBYdoi3Naw56x+vTg1MlBHmg==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:38 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:38 +0000
Date: Thu, 2 Jan 2025 16:19:37 +0100
To: dev@openvswitch.org
Message-ID: 
 <63d33875c79429279054c7be6619fef3927c1486.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0115.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::10) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|DU2PEPF00028D00:EE_|GVXPR10MB5863:EE_
X-MS-Office365-Filtering-Correlation-Id: e0c7d960-2660-4c17-2dec-08dd2b40e46c
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 HNEXpjtYtzM5Fou7BpbQBKN7NoMc9w9LYGHDM+X18Fv/MvOYGpewpB1NkF6wPifmbEXrR7SIEniPtgUSoFYRBad2y/Xz0D/ncdsawmTUeqA/NRYvhYFPcKnNzOnyACG617H7Z+EgONdGlXVEDLbWeSGEdaksvSFOeZOHYspbAIkNZxxdxrTzdrQRMsIRGb746Yu/IkVAzULkmrxwDaft0SjJrsFHCqbg1MP7cGGJKUZLRTRokeQ5U+h4/qeNhT2BQhjSfgyHfsoSgN9NS5IoRp5i+qK2+KX5sI9VwNBjh05as1+rluigp+yCIXBINLNSfhfYXKL+WXMSJeQkMgbNXTivw0TzD9vrwMVCCjPDvr5u6763OkLS2JbPZxiK3/JDtQac2mWW6QEUdNaIU5s8PYD5Y0UWv17RCP0Iwq9rHAFZqfQk+1TyUmRzJ+9h49K/h3J9+1CdffX3LSk91lf3Po0liZFMrUcBMzSkzZiXLYJm7SXYIbntU+R0r6sQmw5lr9Puaxn0+NayoyR0WVY4YdtrCiqLY5ZgGHZYGzZZHABE9A1TNTu1X/BPhBD2z8JWdZ9qbdEL/bjEeE/GOzX9vte0UyAH4/zO9a2ckYuq9M5hVmSZmvi+Wj/KK0ygkNFFeMMA22astHs0dxfKKR1lchyWPCQS4mHPnNpif4x2O26vfdZ8FkmRR9kdkjqUZXiFqrDHhnz4zMBnE+Yycs5JeVgs4iDUH/0a2Nd9U8euR12K7Hf9TmGfGMH+T0WuraL2/u+J5LwmeROA5bsvGzOCdMGPi4Nsx4sg3MKHWjCXfgRAwMrl060yiXyziFoBwUKZwXb5cOpp/jZNfQGpwRgzMBOzd4LcO2wavAGiBgp4CK8Tk+QsBfDm+85rJ6ND+jM4+8beupkWn1E83aPUUVo0Lum5pd7zB7AAb2hdbZsceV5tfRBbBDO6E22Z1NLlXRo8A64wEl5g+aP/DnbU4nS9uTde0LqHIviPCE+t9Bsu2CkUSH9E9KgzCcpPBMAdtwsPfl3zeE7Ng6RjYhMz/C2ytFcGpp++8dIjXoTC1o6/lT/BrW7TcytoxgrrOuE6u0Vle8AVQjNnK6xqYDn+mV9E8A8dW5k81+ZUl4BJYZC3r/QaaEN/R3unJFMPhE42DY/uLc58e4ZulqDDHG1Gi55yLJ/zqjfC1UaVsOkhvmKlhN9T5UzJgI0HvdW1iHsjy78bTGB6Xz2KujjP1hIpO0P0DpDr75UdfIzpxxPWNsxgR6D8TdML89TtnwbHAIJlJNMnuOaL8llzkCHEl7itAm4k751AEY2YifnqNauN6905aszsWZDjBZ4yU0wYDEb9VR0Saz1gbhV7ktYVEPKIDCTFhlkkdJyNcdeSbfRNTw/XakR2t/X2mJ94K3Zq/m92Vqzl
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D00.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 3694b7c1-1c4d-4c23-156d-08dd2b40df9b
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|36860700013|35042699022|82310400026|14060799003|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
 BytoU3/ssjSQ09g7y24ntMKPx8uM6a5Z34opXf1v5OKTP5V1Q1hrAzLNe4YZCUNoYuS8tlvtA+1lQs3BZgQXNK5hY1yv00nspXEPxx6EdiVq97uh9C4d/OgI3SVFx2U9l10Sq6MsJEG6+KJwrhouEzj0vzD+/1ZMhGeyc4ECbZrdpROsn8KzOM63KneJsjUQimpHx72xcL+TqVDTUKSkAy+lnJoWBKiMXcEQS1oOfmccPTvN8V6no+7M30nYuUelVi27Z51gfuylpZwvABy2u1O8Um+IXhb4DjMrp3UpdpyaN+L5AsKA7Au70/CZPvL84XExwgOrhrN6c8M+CqeuMq7+2l9RdW7U4N8lGA/sYuBXpmUdnIOUixSlyvdeveDserCdUXw3wAioFd+HxF99qE5r+8PZed4yGw9Mh+2NQx+vsumN8DFpH6na0HfJIwZUEAhme7hkBp87GjfXFz2irFY5G2pW1k28uy19Zh4UIJZ+UXOPdZC+KXke/dd8gtj/kZk957vCIrFbQNj85ju36k0dmIdOQlO5un8xMEoS30X6dvjHp9w12z14WMRchrfzkNwzD823cERDlcI0aM05CmpycvFb7e7HM/Zt6MdFq0HYWuDuq3VlpsOYmaHB6A7CpFdZUChyY2/7DUaETcbzTiQM+xlaxoesr99eKx0zDjyUmMuOQslEOUG02/0/0guY+rgieOuEXRmWnb47+qzkRTyQG1cu9v7/d72Bz0AI+DPTL4HbJGrBfQuhWle8AOCUMQPxKdtwXj/+fuMkEdJMbOXjVCkXkF4Isrp0pHQYekf1lL/CajV6aCsYTbFxK0xe4Tnn6OnQke14+6k88+uLGCw+Qu41kO6h2qiUOsy7Esqt1qNZR47j3noJkdYRb0xhQhEvfEzH2Jv4MnARV0GMd5Qr6vBiM+bNdW/mWKeSllcQDet7+1/alNyfFnX87zq4Dx6CLP5kRBnQ7PE0L2YWpBIa/RgXOBZgUTtUIpUZC5y9ht10wz48ACShmSGSCfLi17pFjK/rK0eTNxl/a3dz4CbUj/RSUtI9Qqur/L0RvkyrV6oLZft+kSObaApJOSUzFT6CKLSI8+15rZHafrF+fdGT+pyGcVGePZb1YzBO7n1VJzT4pCJyCLsXosTHFEYO4kanz0GTN+OsnSnmCJV5wUYxgIjdCB3Y3vLrwour9BG8KIDtfIoO6go5XygeuRv+/iUTi/u+3ue4scfNo7tGLLntc74CGDrjeR4K9H9hgK2mCbfQgwr0O7tJ8enSy4prpg+eGKi2slS0yWvZduhZBztPNC8di/oXxHRvdyWz/aK3Wx7Py3dF+4RPZzrXDVVw4lRLW9BXzjEdSt15yjWoMdDmtENJuIytohejQmlrWSwWHVprChXnKal+JT+g6dn1EtDChvQK9VrJUGASYjVV/M6oj3oCbjc1RiNLiW1HhFTXD6D0vzxn1RA4prVI2qEehLWbgC85Gd8tEyITsswEli2uHSYEP9sSZeCB4A8EMzY=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(36860700013)(35042699022)(82310400026)(14060799003)(1800799024)(376014);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:19:45.7299 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 e0c7d960-2660-4c17-2dec-08dd2b40e46c
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D00.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: GVXPR10MB5863
Subject: [ovs-dev] [RFC PATCH ovn v3 3/9] controller: Introduce
 route-exchange-netlink.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

Introduce route-exchange-netlink module which implements interface
for maintaining VRFs [0] and routes through Netlink.

There is a desire to do this without having to (re-)implement
routing protocol state machines in OVN, and to accomplish this we
make use of Netlink.

Netlink was chosen because:
* Its ubiquitous nature with availability on any Linux system as
  as well other platforms.
* Presence of a very good Netlink library implementation in our
  sibling project and library, Open vSwitch.
* Popular routing protocol software conveniently already have
  support for redistributing routes to/from Netlink.
* Support for interacting with Virtual Routing and Forwarding
  domains [0], allowing full isolation between virtual network
  resources defined within OVN and the hosting system while
  retaining access to all system network interfaces.

It is important to note that the purpose of this integration is
generic exchange of control plane information, while allowing to
keep the datapath in OVS/OVN, enabling users to leverage its full
range of user-, kernel- and mixed- space datapath implementations.

0: https://docs.kernel.org/networking/vrf.html

This was orignally built by Frode Nordahl <fnordahl@ubuntu.com>

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 configure.ac                        |   2 +
 controller/automake.mk              |   6 +
 controller/route-exchange-netlink.c | 249 ++++++++++++++++++++++++++++
 controller/route-exchange-netlink.h |  40 +++++
 m4/ovn.m4                           |  25 +++
 tests/automake.mk                   |   5 +
 tests/system-common-macros.at       |  12 ++
 7 files changed, 339 insertions(+)
 create mode 100644 controller/route-exchange-netlink.c
 create mode 100644 controller/route-exchange-netlink.h

diff --git a/configure.ac b/configure.ac
index 4a63b84d4..cf9b4a6fd 100644
--- a/configure.ac
+++ b/configure.ac
@@ -87,6 +87,8 @@ OVS_CHECK_WIN32
 OVS_CHECK_VISUAL_STUDIO_DDK
 OVN_CHECK_COVERAGE
 OVS_CHECK_NDEBUG
+OVS_CHECK_NETLINK
+OVS_CHECK_LINUX_NETLINK
 OVS_CHECK_OPENSSL
 OVN_CHECK_LOGDIR
 OVN_CHECK_PYTHON3
diff --git a/controller/automake.mk b/controller/automake.mk
index a6a2c517a..39deeb029 100644
--- a/controller/automake.mk
+++ b/controller/automake.mk
@@ -55,6 +55,12 @@ controller_ovn_controller_SOURCES = \
 	controller/route.h \
 	controller/route.c
 
+if HAVE_NETLINK
+controller_ovn_controller_SOURCES += \
+	controller/route-exchange-netlink.h \
+	controller/route-exchange-netlink.c
+endif
+
 controller_ovn_controller_LDADD = lib/libovn.la $(OVS_LIBDIR)/libopenvswitch.la
 man_MANS += controller/ovn-controller.8
 EXTRA_DIST += controller/ovn-controller.8.xml
diff --git a/controller/route-exchange-netlink.c b/controller/route-exchange-netlink.c
new file mode 100644
index 000000000..e065c49c1
--- /dev/null
+++ b/controller/route-exchange-netlink.c
@@ -0,0 +1,249 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include <errno.h>
+#include <inttypes.h>
+#include <linux/rtnetlink.h>
+#include <net/if.h>
+#include <netinet/in.h>
+
+#include "netlink-socket.h"
+#include "netlink.h"
+#include "openvswitch/hmap.h"
+#include "openvswitch/ofpbuf.h"
+#include "openvswitch/vlog.h"
+#include "packets.h"
+#include "route-table.h"
+#include "route.h"
+
+#include "route-exchange-netlink.h"
+
+VLOG_DEFINE_THIS_MODULE(route_exchange_netlink);
+static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);
+
+#define TABLE_ID_VALID(table_id) (table_id != RT_TABLE_UNSPEC &&              \
+                                  table_id != RT_TABLE_COMPAT &&              \
+                                  table_id != RT_TABLE_DEFAULT &&             \
+                                  table_id != RT_TABLE_MAIN &&                \
+                                  table_id != RT_TABLE_LOCAL &&               \
+                                  table_id != RT_TABLE_MAX)
+
+static int
+modify_vrf(uint32_t type, uint32_t flags_arg,
+           const char *ifname, uint32_t table_id)
+{
+    uint32_t flags = NLM_F_REQUEST | NLM_F_ACK;
+    size_t linkinfo_off, infodata_off;
+    struct ifinfomsg *ifinfo;
+    struct ofpbuf request;
+    int err;
+
+    flags |= flags_arg;
+
+    ofpbuf_init(&request, 0);
+    nl_msg_put_nlmsghdr(&request, 0, type, flags);
+    ifinfo = ofpbuf_put_zeros(&request, sizeof *ifinfo);
+    nl_msg_put_string(&request, IFLA_IFNAME, ifname);
+    if (type == RTM_DELLINK) {
+        goto out;
+    }
+
+    ifinfo->ifi_change = ifinfo->ifi_flags = IFF_UP;
+    linkinfo_off = nl_msg_start_nested(&request, IFLA_LINKINFO);
+    nl_msg_put_string(&request, IFLA_INFO_KIND, "vrf");
+    infodata_off = nl_msg_start_nested(&request, IFLA_INFO_DATA);
+    nl_msg_put_u32(&request, IFLA_VRF_TABLE, table_id);
+    nl_msg_end_nested(&request, infodata_off);
+    nl_msg_end_nested(&request, linkinfo_off);
+
+out:
+    err = nl_transact(NETLINK_ROUTE, &request, NULL);
+
+    ofpbuf_uninit(&request);
+
+    return err;
+}
+
+int
+re_nl_create_vrf(const char *ifname, uint32_t table_id)
+{
+    uint32_t flags = NLM_F_CREATE | NLM_F_EXCL;
+    uint32_t type = RTM_NEWLINK;
+
+    if (!TABLE_ID_VALID(table_id)) {
+        VLOG_WARN_RL(&rl,
+                     "attempt to create VRF using invalid table id %"PRIu32,
+                     table_id);
+        return EINVAL;
+    }
+
+    return modify_vrf(type, flags, ifname, table_id);
+}
+
+int
+re_nl_delete_vrf(const char *ifname)
+{
+    return modify_vrf(RTM_DELLINK, 0, ifname, 0);
+}
+
+static int
+modify_route(uint32_t type, uint32_t flags_arg, uint32_t table_id,
+             const struct in6_addr *dst, unsigned int plen)
+{
+    uint32_t flags = NLM_F_REQUEST | NLM_F_ACK;
+    bool is_ipv4 = IN6_IS_ADDR_V4MAPPED(dst);
+    struct ofpbuf request;
+    struct rtmsg *rt;
+    int err;
+
+    flags |= flags_arg;
+
+    ofpbuf_init(&request, 0);
+    nl_msg_put_nlmsghdr(&request, 0, type, flags);
+    rt = ofpbuf_put_zeros(&request, sizeof *rt);
+    rt->rtm_family = is_ipv4 ? AF_INET : AF_INET6;
+    rt->rtm_table = RT_TABLE_UNSPEC; /* RTA_TABLE attribute allows id > 256 */
+    /* Manage only OVN routes */
+    rt->rtm_protocol = RTPROT_OVN;
+    rt->rtm_type = RTN_BLACKHOLE;
+    if (type == RTM_DELROUTE) {
+        rt->rtm_scope = RT_SCOPE_NOWHERE;
+    } else {
+        rt->rtm_scope = RT_SCOPE_UNIVERSE;
+    }
+    rt->rtm_dst_len = plen;
+
+    nl_msg_put_u32(&request, RTA_TABLE, table_id);
+
+    if (is_ipv4) {
+        nl_msg_put_be32(&request, RTA_DST, in6_addr_get_mapped_ipv4(dst));
+    } else {
+        nl_msg_put_in6_addr(&request, RTA_DST, dst);
+    }
+
+    err = nl_transact(NETLINK_ROUTE, &request, NULL);
+    ofpbuf_uninit(&request);
+
+    return err;
+}
+
+int
+re_nl_add_route(uint32_t table_id, const struct in6_addr *dst,
+                unsigned int plen)
+{
+    uint32_t flags = NLM_F_CREATE | NLM_F_EXCL;
+    uint32_t type = RTM_NEWROUTE;
+
+    if (!TABLE_ID_VALID(table_id)) {
+        VLOG_WARN_RL(&rl,
+                     "attempt to add route using invalid table id %"PRIu32,
+                     table_id);
+        return EINVAL;
+    }
+
+    return modify_route(type, flags, table_id, dst, plen);
+}
+
+int
+re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
+                   unsigned int plen)
+{
+    if (!TABLE_ID_VALID(table_id)) {
+        VLOG_WARN_RL(&rl,
+                     "attempt to delete route using invalid table id %"PRIu32,
+                     table_id);
+        return EINVAL;
+    }
+
+    return modify_route(RTM_DELROUTE, 0, table_id, dst, plen);
+}
+
+struct route_msg_handle_data {
+    const struct hmap *routes;
+};
+
+static void
+handle_route_msg_delete_routes(const struct route_table_msg *msg, void *data)
+{
+    const struct route_data *rd = &msg->rd;
+    struct route_msg_handle_data *handle_data = data;
+    const struct hmap *routes = handle_data->routes;
+    struct advertise_route_entry *ar;
+    int err;
+
+    /* This route is not from us, we should not touch it. */
+    if (rd->rtm_protocol != RTPROT_OVN) {
+        return;
+    }
+
+    uint32_t arhash = advertise_route_hash(&rd->rta_dst, rd->rtm_dst_len);
+    HMAP_FOR_EACH_WITH_HASH (ar, node, arhash, routes) {
+        if (ipv6_addr_equals(&ar->addr, &rd->rta_dst)
+                && ar->plen == rd->rtm_dst_len) {
+            ar->installed = true;
+            return;
+        }
+    }
+    err = re_nl_delete_route(rd->rta_table_id, &rd->rta_dst,
+                             rd->rtm_dst_len);
+    if (err) {
+        char addr_s[INET6_ADDRSTRLEN + 1];
+        VLOG_WARN_RL(&rl, "Delete route table_id=%"PRIu32" dst=%s plen=%d: %s",
+                     rd->rta_table_id,
+                     ipv6_string_mapped(
+                         addr_s, &rd->rta_dst) ? addr_s : "(invalid)",
+                     rd->rtm_dst_len,
+                     ovs_strerror(err));
+    }
+}
+
+void
+re_nl_sync_routes(uint32_t table_id,
+                  const struct hmap *routes)
+{
+    struct advertise_route_entry *ar;
+    HMAP_FOR_EACH (ar, node, routes) {
+        ar->installed = false;
+    }
+
+    /* Remove routes from the system that are not in the host_routes hmap and
+     * remove entries from host_routes hmap that match routes already installed
+     * in the system. */
+    struct route_msg_handle_data data = {
+        .routes = routes,
+    };
+    route_table_dump_one_table(table_id, handle_route_msg_delete_routes,
+                               &data);
+
+    /* Add any remaining routes in the host_routes hmap to the system routing
+     * table. */
+    HMAP_FOR_EACH (ar, node, routes) {
+        if (ar->installed) {
+            continue;
+        }
+        int err = re_nl_add_route(table_id, &ar->addr, ar->plen);
+        if (err) {
+            char addr_s[INET6_ADDRSTRLEN + 1];
+            VLOG_WARN_RL(&rl, "Add route table_id=%"PRIu32" dst=%s "
+                         "plen=%d: %s",
+                         table_id,
+                         ipv6_string_mapped(
+                             addr_s, &ar->addr) ? addr_s : "(invalid)",
+                         ar->plen,
+                         ovs_strerror(err));
+        }
+    }
+}
diff --git a/controller/route-exchange-netlink.h b/controller/route-exchange-netlink.h
new file mode 100644
index 000000000..f87ebd75d
--- /dev/null
+++ b/controller/route-exchange-netlink.h
@@ -0,0 +1,40 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ROUTE_EXCHANGE_NETLINK_H
+#define ROUTE_EXCHANGE_NETLINK_H 1
+
+#include <stdint.h>
+
+/* This value is arbitrary but currently unused.
+ * See https://github.com/iproute2/iproute2/blob/main/etc/iproute2/rt_protos */
+#define RTPROT_OVN 84
+
+struct in6_addr;
+struct hmap;
+
+int re_nl_create_vrf(const char *ifname, uint32_t table_id);
+int re_nl_delete_vrf(const char *ifname);
+
+int re_nl_add_route(uint32_t table_id, const struct in6_addr *dst,
+                    unsigned int plen);
+int re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
+                       unsigned int plen);
+
+void re_nl_dump(uint32_t table_id);
+
+void re_nl_sync_routes(uint32_t table_id,
+                       const struct hmap *host_routes);
+
+#endif /* route-exchange-netlink.h */
diff --git a/m4/ovn.m4 b/m4/ovn.m4
index ebe4c9612..e8f30e0ac 100644
--- a/m4/ovn.m4
+++ b/m4/ovn.m4
@@ -576,3 +576,28 @@ AC_DEFUN([OVN_CHECK_UNBOUND],
    fi
    AM_CONDITIONAL([HAVE_UNBOUND], [test "$HAVE_UNBOUND" = yes])
    AC_SUBST([HAVE_UNBOUND])])
+
+dnl Checks for Netlink support.
+AC_DEFUN([OVS_CHECK_NETLINK],
+  [AC_CHECK_HEADER([linux/netlink.h],
+                   [HAVE_NETLINK=yes],
+                   [HAVE_NETLINK=no],
+                   [#include <sys/socket.h>
+   ])
+   AM_CONDITIONAL([HAVE_NETLINK], [test "$HAVE_NETLINK" = yes])
+   if test "$HAVE_NETLINK" = yes; then
+      AC_DEFINE([HAVE_NETLINK], [1],
+                [Define to 1 if Netlink protocol is available.])
+   fi])
+
+dnl OVS_CHECK_LINUX_NETLINK
+dnl
+dnl Configure Linux netlink compat.
+AC_DEFUN([OVS_CHECK_LINUX_NETLINK], [
+  AC_COMPILE_IFELSE([
+    AC_LANG_PROGRAM([#include <linux/netlink.h>], [
+        struct nla_bitfield32 x =  { 0 };
+    ])],
+    [AC_DEFINE([HAVE_NLA_BITFIELD32], [1],
+    [Define to 1 if struct nla_bitfield32 is available.])])
+])
diff --git a/tests/automake.mk b/tests/automake.mk
index 9244532fa..11696f159 100644
--- a/tests/automake.mk
+++ b/tests/automake.mk
@@ -308,6 +308,11 @@ tests_ovstest_LDADD = $(OVS_LIBDIR)/daemon.lo \
 	controller/route.$(OBJEXT) \
 	northd/ipam.$(OBJEXT)
 
+if HAVE_NETLINK
+tests_ovstest_LDADD += \
+	controller/route-exchange-netlink.$(OBJEXT)
+endif
+
 # Python tests.
 CHECK_PYFILES = \
 	tests/test-l7.py \
diff --git a/tests/system-common-macros.at b/tests/system-common-macros.at
index c59556173..0ed5bc567 100644
--- a/tests/system-common-macros.at
+++ b/tests/system-common-macros.at
@@ -530,3 +530,15 @@ OVS_TRAFFIC_VSWITCHD_STOP(["/.*error receiving.*/d
 /failed to query port patch-.*/d
 /.*terminating with signal 15.*/d"])
 ]))
+
+# CHECK_VRF()
+#
+# Perform a requirements check for running VRF tests.
+#
+m4_define([CHECK_VRF],
+[
+    rc=0
+    modprobe vrf || rc=$?
+    AT_SKIP_IF([test $rc -ne 0])
+    on_exit 'modprobe -r vrf'
+])

From patchwork Thu Jan  2 15:19:38 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029080
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=q1IAZcLR;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=q1IAZcLR;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=140.211.166.137; helo=smtp4.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp4.osuosl.org (smtp4.osuosl.org [140.211.166.137])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9Ph686Lz1yTy
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:24 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp4.osuosl.org (Postfix) with ESMTP id A0CE140688;
	Thu,  2 Jan 2025 15:20:23 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp4.osuosl.org ([127.0.0.1])
 by localhost (smtp4.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id c9fAlXEH7-ed; Thu,  2 Jan 2025 15:20:18 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp4.osuosl.org 8A92D403AD
Authentication-Results: smtp4.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=q1IAZcLR;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=q1IAZcLR
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp4.osuosl.org (Postfix) with ESMTPS id 8A92D403AD;
	Thu,  2 Jan 2025 15:20:18 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 55598C02A4;
	Thu,  2 Jan 2025 15:20:18 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp2.osuosl.org (smtp2.osuosl.org [IPv6:2605:bc80:3010::133])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 38285C08B4
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:17 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp2.osuosl.org (Postfix) with ESMTP id 5017E40585
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:08 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
 by localhost (smtp2.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id woYgKQG0uILU for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:20:03 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:c201::;
 helo=am0pr83cu005.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp2.osuosl.org AA5AE4052C
Authentication-Results: smtp2.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp2.osuosl.org AA5AE4052C
Authentication-Results: smtp2.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=q1IAZcLR;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=q1IAZcLR
Received: from AM0PR83CU005.outbound.protection.outlook.com
 (mail-westeuropeazlp170100000.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:c201::])
 by smtp2.osuosl.org (Postfix) with ESMTPS id AA5AE4052C
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:02 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=WBMdN1QQzF0BLWdnzNAh9S8w0/m8UiWjNfMSSEaprgYm0z7le2rd3gvoLsianrKpukwMo/YgPTDdgxbN0PwQYvXrOq5tdaBgaPymJuAC6gt5FaFExN0+xTwcVA6Iu6C72zYNJWbx59dPFZg5wOeSCiV2RxJs8GtQPMomGHOlcoUdpUc2jUwoo/s8AX1KxujnY2sMBZw90DjVSze9lxVCwSDAxEv49grG01ynClMj/KMxtqXYotHeFKtUlgVtL5Ivq8sTHGzH6o7dCHcKdhcliMd46B+wDeFdVhUlb0ED2zIQETVL/DbONa1MXW5cc7Dfb7VvR+P/4HxGHqs1tTHHlw==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=gqSMeX2Dy9+bkTc6R4mLCzs6bxna6/QUd3LxbWYKROQ=;
 b=pF8VoJPhpcKOW5W/o9JWom550fzMQGYJiXIt0Ws8qUBBwtKrXO3c2Rr6V24aPX9/+HakFqYq+cUjFB3V1iELAPpl223mddlgBbq19B+t4sury9tSICxCb5Xo68t2T9QwZgkITbi32MSWBK3jEfo4n+J6va/6fBGp8vraxbOryYhTqE9H4OSTYu0t9xK+WtZv9PGqOvc0keOeD5vM1pWixWBDoBOf34S+IwSR/aaQ8LFawm1PMlu0hHmYMyjRmjjSzoKUUn8BcU6lsp5UjDBw57QBbBebR3/MTkwih0z0hK0sOlGBxCRuqiH7ZTeBlSNeuTVqHU1shzFjTpIXnKYx9A==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gqSMeX2Dy9+bkTc6R4mLCzs6bxna6/QUd3LxbWYKROQ=;
 b=q1IAZcLRa4cDRYjcEhZafrb3co6BE9Njx3XFBdVsuAXs2PLo6oS+SfONG/wPvAQRMS7CUx9dr8MN86mjIeGtudsgGd1U1M3MUFbDM1TBlUwuBgyDmPtcwzHGg+gfp/K811MFr27GY+yUL6RNT2SmgRF3o2fL49GnNjWC4g1NXr3gxJuyUpMbpRh7pm7uLLI/I1M2V9R48qsKPJXLtNn27ZnlBV8wLZFzwizt/LC9lsea3wcVrklThMxP1RXJ2U21tisPglvjBWONVOgunSDg+/E79kNyxNkzwEV4UYmPVxdWxv72tqvEuhC1J1pefSHYJgOiRwqBZOz+f2+NgnGC0A==
Received: from DB8PR04CA0022.eurprd04.prod.outlook.com (2603:10a6:10:110::32)
 by DB3PR10MB6906.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:43f::5) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8335.5; Thu, 2 Jan
 2025 15:19:51 +0000
Received: from DU2PEPF00028D02.eurprd03.prod.outlook.com
 (2603:10a6:10:110:cafe::e7) by DB8PR04CA0022.outlook.office365.com
 (2603:10a6:10:110::32) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8314.13 via Frontend Transport; Thu,
 2 Jan 2025 15:19:51 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D02.mail.protection.outlook.com (10.167.242.186) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:19:48 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:19:49
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 9572187
X-ExclaimerImprintLatency: 6618865
X-ExclaimerImprintAction: 722677b0631a435392a20c5fad0252fb
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=IQvhd0O6q8/KvmECOidHFkzWkZA9IIR64UVCdG8R75to705CCL2rjJ1JZOTs7C9uakNpllzWDfh/wMBgcZtDc+I15DDqjhdwcD7h9JqIoZvTa5M0D04kUJUHZVCbmEnfwirI1Wvk3JGxpsOvurjSNS8tX/LA4oMbz7AOLuet2JZjp1Th5/phyhwpNA9dVa+NPz+VmDaDvO2EHvAdnOQE0RpvVMWFzEqc5m0xIlpMy2nvcs5kUjorECX7+m4teqy+7Nh7YV39C2doxNT/3Q2MwxaNHLuvs9pAItPTaETeXfM+flO5V9ErRL2c7q0W7NzJDqOgaofoQZXV6OeDTEBq8A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=gqSMeX2Dy9+bkTc6R4mLCzs6bxna6/QUd3LxbWYKROQ=;
 b=zE8++gBhy0Wxm8pHc7B1guxuFxT7jfs1XaPBo0nvkbFW/4Zk0MwrXVwcKiwucTcSwDLgtfRnygoY5Y0uuoIu2pw8LYC1r7dTnvaM/1s/2t2x6xcTFNikBMiZS3zDN+/FIkoKQDprwMsuFc2MmekB9OrVmX9o+ywLJOxdQFtgcsYmtZZhzSWUKwzKfBlQ2cY2GjGuH7BWk4+aoARhbg1WaMlMDRY8rOGBRWDz2Kx3E3LTKYEKvBtEZNv8xjVgG/yuxAVKg9w6k8cUe+0RTq5PEBj86kUeJaLmzlErLBbtAqGaAt6uYX/m2mo1/6VYt/3moeBWCxsSJ+TzaDnfd14iQA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=gqSMeX2Dy9+bkTc6R4mLCzs6bxna6/QUd3LxbWYKROQ=;
 b=q1IAZcLRa4cDRYjcEhZafrb3co6BE9Njx3XFBdVsuAXs2PLo6oS+SfONG/wPvAQRMS7CUx9dr8MN86mjIeGtudsgGd1U1M3MUFbDM1TBlUwuBgyDmPtcwzHGg+gfp/K811MFr27GY+yUL6RNT2SmgRF3o2fL49GnNjWC4g1NXr3gxJuyUpMbpRh7pm7uLLI/I1M2V9R48qsKPJXLtNn27ZnlBV8wLZFzwizt/LC9lsea3wcVrklThMxP1RXJ2U21tisPglvjBWONVOgunSDg+/E79kNyxNkzwEV4UYmPVxdWxv72tqvEuhC1J1pefSHYJgOiRwqBZOz+f2+NgnGC0A==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:40 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:40 +0000
Date: Thu, 2 Jan 2025 16:19:38 +0100
To: dev@openvswitch.org
Message-ID: 
 <4da76c261254a42b863a0486339000b2467750fb.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0117.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::8) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|DU2PEPF00028D02:EE_|DB3PR10MB6906:EE_
X-MS-Office365-Filtering-Correlation-Id: a35c5a19-596e-4415-1fa6-08dd2b40e639
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 rb+qTLzQOrcd/PU+hiTNv/NbpHZ/LvvyOc54TI6/NKX7XskEfE/FL9xcGt0PEfu0d2Ru8hZUK55BWL/kzQm31PjawDkk2BVbCuuIL7lFcJGkbWd2tC5/iSDzgFe8MMCU0HPG8dWhOm1bVMK1ktAhMhm4KrlVGK/1gx2p/OmReOUobGgwuGNzuRfh2o2IznDEMlzHOk+AiqaDJHA94EazMubWmfEtq9NwJrcdIH4nQPDNSmzoE2KUn/ZB6fhx+IOc5F0msmOQJL4L1boMO23SB0vkPuZCaL5UXALMe2bf0j3S71VRrKUVc0C9jf6Ttd2ww1kTRKG3ZxQQZKbi36fdFJgvpom+m2brg8qhlK2G25ZQex/drZwZhHhLY97+pk/HHZAYyWNn/OSIqBvkMHgeiMi9sgrbluZzY/uoJJTj1LhfdXsM0FjcnvH9EUfYN3YB1q3zB+OW2U60YPu/zUGkanfOuNXBrMDtngFwSTNgLJXIiofKTdS55wR4RAT+YwVtv4dDMv05huBe0jjMNI0cgpJMrZOckfrNjWWDBnNMVpqSelkaYM1229VZrfTvcrD0h0MaeLdIkN054pUeErysqMeHwPM53Seac3yHsuJ2ldYb6SUz3uWTeLOiwkqscUZWfO7W7ZH/JX7hcDAt4q+beJe53zNRidwKFhPDcJnyiFpxjSNuwXhF3gZxAoqCY2oilL0yfQNXg2tJruKjpgLabfQKVxbfcpsRjTryOUkIPJUZiZpyuQhEj0M3xnQQxTZrS/LnTi3139/Av0mqLnzGPcVj1YN5IOehGgagJmrbvat14BQWrV/hlXHGdlnldKPPOOrUZPCw2R/+TCNRzHtsyibAaMd7LaXd26rEx1Clr+XK+MNHf4ZvBxXuRDcx3IIvISMP3MLE1FiwAdutnNzcaRrWs3Zn6goS6H7GXMmRDeqliclRm4DeR7pO9DzMoUOgn0qNuBd6fPkOykPrC0onZJBTPIgS0Qt7erWu3glYrvn5FZZR3y8TCy2G87LGshE4xWw1wdtvvI7wkWwhDOCy++/gsJWOJMdcEAo4fM/n+D6XRMQJhXOS6OkPuRj6luJmW8rsy6Y6xbWFN2mrelnuj6OfrhkWd56sfRvQpHPUddKeFAp92zaSfIKb6bTYaokzNmLxSgxvlxpD4v9mBGSobyPOQkH+hbaJUV29LVkYphtwH95cWob3D+keLR8EJUCjjUCbmjUgIChazMiyTJJjury6uo1jwHONsZ+UA73kKHnE55Jp23VLWvIhGHGDC0riLtNiCTtpK3XPo3iUgRD2lvOviNoxwINQ/AW6mf2BYNBBjnaoRPs8XLiYbSZPovrETBoZy2tBbDbCMKNcKBUgKbSoBWkOwwkDrPauyKPxwhPMjG8UwYDF8/fCoVotb/qw
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D02.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 b259ef09-1f74-41d8-41e6-08dd2b40e0ab
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|376014|1800799024|14060799003|36860700013|82310400026|35042699022;
X-Microsoft-Antispam-Message-Info: 
 h56WBvgopLvebY0dZDMBJqM2EgQfzhy/DH6o8skL3ywwDW0U4XGa+6SG0XS4On0TT/0jiz7g4/qhxls2B0/5IaLBrB6j0Y5jlhalSjS70Oa/jef7Eck+qeSIcORbHmYOzvQg3TFTwkicWDLgUyeqApN3b88ufdQXsp9Q0Fz9SqKEd7+Ep4z/QsOWuHyjxianfliC+WsUR6W0SuvCqOAS2Mt7MJFgHW3TocZ3ivefXNlz79bNmoYpvu/I4ydWBrFtgQRUyq+4DvmUkI9yhUAlz4iiy/UwpcB4GBdj5AiYwcSS1JRYqRUbhDcsj3HEt4K6E55dl8lU11j6HyfvAv5fLHFNDe0qw1UFoz6VMq5JkVXfvTcKgvVtvb2nXTWSLxu0+ZrMckvzbIW1fO7ACwXkyzCI3H6UTXE4IRCOqu1xgUqvFsU067DGM8ph6l2MUlXpDHAODcyRdAuH4Q769r9KqJYv4HhtTua4YcyvEzuwABu0Hk9PgjbX+cfnFl6JDwgNYSNfgrSZDhiHS/4qZkduUK/Awm0Iq5bPtnFF6twjnBZNdseK0P+ttBBTo/v6pdyZYQLmxWIJo623MrsTSQlIrJ/0lGve/K5Wa1SYLiF+73ffDdOQlliQGrGUTZxYLQZyFJqFmadFozpfJutrnuKE8uXKLECqgwK87th7FEtPho3fr6JwRozAs1vznQuI2PWn/X3h4P3wEXg0Jc8KHRtahFeGk7iy2pc4rswKHGMFTJTXjneTZRNp31kljy9MKAD2j4EQ4qNnmiDvyoQHOCzBY6MByUV2jXEimXaXcYP0mirUm16clcdMxUu/xmvQpwhRWU0B29c0j7zotzMMAZ7HuVnCd4E4a9CwydhbIvjk2XJf1lrTMnrRnzv/lYXRoDUI63n/GFJogPPdDBFfOipHgupJfb55Y7mfIKCNGv/Au/6zhEuCJJoX0fpQNIl2tZzFAgbKxit6omS9M98Pk/cDxXC/zsvleJPshXW/+l0tdz8zTCgbwDErlS3wc1hdluX8YZzqXq1MJnm5Eu2pU1mHxGBl9PdzNOgL+1dEt0YFKz4cSBR8lyDFAV8RebPGSFKCa1TDVed47Tj5BKjSeFchWHxIsGW9SMDnySkE/tMCsicoeWdWTPtnvWuyQOLN1JY0CwSlVidcGDr3HbNF1gECYm+sanYVq/YTXyHsn8YEYChBIjk4LJJKs/ADt1xW4w1fBXau1bagXN8Fwj81CPfS6uyAC8AFvBd5oVOOyD1panKutIGDKd/uWPkcxc0YkRMHYk3SdSmkmM2Mhe9aNvEQEV35AyBjklA8hCKXc8rENwgWZHPPRAEMU+FS893cI2037v+g/eNxmQJ3tPKk570gVguWdN+n7W3NWB49ZsK8BwqgEQJ+OUsU1zMSx6Dc08DspXQHk5UjYG6mYjx+AoJ1b7mfUGHV1ZH4MwMGwmKrrSvSaLKcftmMWwpevyXsW/uzOO5csGREgIc01TO8ZwLRSJs/MXLbtqO1SDAOd16DMnM=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(376014)(1800799024)(14060799003)(36860700013)(82310400026)(35042699022);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:19:48.9695 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 a35c5a19-596e-4415-1fa6-08dd2b40e639
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D02.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DB3PR10MB6906
Subject: [ovs-dev] [RFC PATCH ovn v3 4/9] controller: Announce routes via
 route-exchange.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

This engine node takes the routes from the "route" engine node and ensures
they are written to the linux side.

It is separate from the "route" engine node as it will also be used to
learn routes in the future.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
v2->v3:
 * Set monitor conditions on sb Advertised_Route table.

 controller/automake.mk           |   7 +-
 controller/ovn-controller.c      |  58 ++++-
 controller/route-exchange-stub.c |  42 ++++
 controller/route-exchange.c      | 102 ++++++++
 controller/route-exchange.h      |  33 +++
 tests/ovs-macros.at              |  11 +
 tests/system-common-macros.at    |  15 ++
 tests/system-ovn.at              | 404 +++++++++++++++++++++++++++++++
 8 files changed, 668 insertions(+), 4 deletions(-)
 create mode 100644 controller/route-exchange-stub.c
 create mode 100644 controller/route-exchange.c
 create mode 100644 controller/route-exchange.h

diff --git a/controller/automake.mk b/controller/automake.mk
index 39deeb029..66aff8643 100644
--- a/controller/automake.mk
+++ b/controller/automake.mk
@@ -52,13 +52,18 @@ controller_ovn_controller_SOURCES = \
 	controller/ct-zone.c \
 	controller/ovn-dns.c \
 	controller/ovn-dns.h \
+	controller/route-exchange.h \
 	controller/route.h \
 	controller/route.c
 
 if HAVE_NETLINK
 controller_ovn_controller_SOURCES += \
 	controller/route-exchange-netlink.h \
-	controller/route-exchange-netlink.c
+	controller/route-exchange-netlink.c \
+	controller/route-exchange.c
+else
+controller_ovn_controller_SOURCES += \
+	controller/route-exchange-stub.c
 endif
 
 controller_ovn_controller_LDADD = lib/libovn.la $(OVS_LIBDIR)/libopenvswitch.la
diff --git a/controller/ovn-controller.c b/controller/ovn-controller.c
index df96d77e3..623a70614 100644
--- a/controller/ovn-controller.c
+++ b/controller/ovn-controller.c
@@ -89,6 +89,7 @@
 #include "ct-zone.h"
 #include "ovn-dns.h"
 #include "route.h"
+#include "route-exchange.h"
 
 VLOG_DEFINE_THIS_MODULE(main);
 
@@ -232,6 +233,8 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
      *
      * Monitor Template_Var for local chassis.
      *
+     * Monitor Advertised_Route for local datapaths.
+     *
      * We always monitor patch ports because they allow us to see the linkages
      * between related logical datapaths.  That way, when we know that we have
      * a VIF on a particular logical switch, we immediately know to monitor all
@@ -248,6 +251,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
     struct ovsdb_idl_condition igmp = OVSDB_IDL_CONDITION_INIT(&igmp);
     struct ovsdb_idl_condition chprv = OVSDB_IDL_CONDITION_INIT(&chprv);
     struct ovsdb_idl_condition tv = OVSDB_IDL_CONDITION_INIT(&tv);
+    struct ovsdb_idl_condition ar = OVSDB_IDL_CONDITION_INIT(&ar);
 
     /* Always monitor all logical datapath groups. Otherwise, DPG updates may
      * be received *after* the lflows using it are seen by ovn-controller.
@@ -267,6 +271,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
         ovsdb_idl_condition_add_clause_true(&igmp);
         ovsdb_idl_condition_add_clause_true(&chprv);
         ovsdb_idl_condition_add_clause_true(&tv);
+        ovsdb_idl_condition_add_clause_true(&ar);
         goto out;
     }
 
@@ -355,6 +360,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
             sbrec_dns_add_clause_datapaths(&dns, OVSDB_F_INCLUDES, &uuid, 1);
             sbrec_ip_multicast_add_clause_datapath(&ip_mcast, OVSDB_F_EQ,
                                                    uuid);
+            sbrec_advertised_route_add_clause_datapath(&ar, OVSDB_F_EQ, uuid);
         }
 
         /* Datapath groups are immutable, which means a new group record is
@@ -382,6 +388,7 @@ out:;
         sb_table_set_req_mon_condition(ovnsb_idl, igmp_group, &igmp),
         sb_table_set_req_mon_condition(ovnsb_idl, chassis_private, &chprv),
         sb_table_set_opt_mon_condition(ovnsb_idl, chassis_template_var, &tv),
+        sb_table_set_opt_mon_condition(ovnsb_idl, advertised_route, &ar),
     };
 
     unsigned int expected_cond_seqno = 0;
@@ -401,6 +408,7 @@ out:;
     ovsdb_idl_condition_destroy(&igmp);
     ovsdb_idl_condition_destroy(&chprv);
     ovsdb_idl_condition_destroy(&tv);
+    ovsdb_idl_condition_destroy(&ar);
     return expected_cond_seqno;
 }
 
@@ -4783,6 +4791,14 @@ controller_output_bfd_chassis_handler(struct engine_node *node,
     return true;
 }
 
+static bool
+controller_output_route_exchange_handler(struct engine_node *node,
+                                         void *data OVS_UNUSED)
+{
+    engine_set_node_state(node, EN_UPDATED);
+    return true;
+}
+
 /* Handles sbrec_chassis changes.
  * If a new chassis is added or removed return false, so that
  * flows are recomputed.  For any updates, there is no need for
@@ -4975,6 +4991,36 @@ route_sb_advertised_route_data_handler(struct engine_node *node, void *data)
     return true;
 }
 
+static void
+en_route_exchange_run(struct engine_node *node, void *data OVS_UNUSED)
+{
+    struct ed_type_route *route_data =
+        engine_get_input_data("route", node);
+
+    struct route_exchange_ctx_in r_ctx_in = {
+        .announce_routes = &route_data->announce_routes,
+    };
+
+    struct route_exchange_ctx_out r_ctx_out = {
+    };
+
+    route_exchange_run(&r_ctx_in, &r_ctx_out);
+
+    engine_set_node_state(node, EN_UPDATED);
+}
+
+
+static void *
+en_route_exchange_init(struct engine_node *node OVS_UNUSED,
+                       struct engine_arg *arg OVS_UNUSED)
+{
+    return NULL;
+}
+
+static void
+en_route_exchange_cleanup(void *data OVS_UNUSED)
+{}
+
 /* Returns false if the northd internal version stored in SB_Global
  * and ovn-controller internal version don't match.
  */
@@ -5210,6 +5256,8 @@ main(int argc, char *argv[])
     ovsdb_idl_omit(ovnsb_idl_loop.idl, &sbrec_ha_chassis_col_external_ids);
     ovsdb_idl_omit(ovnsb_idl_loop.idl,
                    &sbrec_ha_chassis_group_col_external_ids);
+    ovsdb_idl_omit(ovnsb_idl_loop.idl,
+                   &sbrec_advertised_route_col_external_ids);
 
     /* We don't want to monitor Connection table at all. So omit all the
      * columns. */
@@ -5270,6 +5318,7 @@ main(int argc, char *argv[])
     ENGINE_NODE(bfd_chassis, "bfd_chassis");
     ENGINE_NODE(dns_cache, "dns_cache");
     ENGINE_NODE(route, "route");
+    ENGINE_NODE(route_exchange, "route_exchange");
 
 #define SB_NODE(NAME, NAME_STR) ENGINE_NODE_SB(NAME, NAME_STR);
     SB_NODES
@@ -5301,6 +5350,8 @@ main(int argc, char *argv[])
     engine_add_input(&en_route, &en_sb_advertised_route,
                      route_sb_advertised_route_data_handler);
 
+    engine_add_input(&en_route_exchange, &en_route, NULL);
+
     engine_add_input(&en_addr_sets, &en_sb_address_set,
                      addr_sets_sb_address_set_handler);
     engine_add_input(&en_port_groups, &en_sb_port_group,
@@ -5486,9 +5537,8 @@ main(int argc, char *argv[])
                      controller_output_mac_cache_handler);
     engine_add_input(&en_controller_output, &en_bfd_chassis,
                      controller_output_bfd_chassis_handler);
-    /* This is just temporary until the route output is actually used. */
-    engine_add_input(&en_controller_output, &en_route,
-                     controller_output_bfd_chassis_handler);
+    engine_add_input(&en_controller_output, &en_route_exchange,
+                     controller_output_route_exchange_handler);
 
     struct engine_arg engine_arg = {
         .sb_idl = ovnsb_idl_loop.idl,
@@ -6213,6 +6263,7 @@ loop_done:
 
             poll_block();
         }
+        route_exchange_cleanup();
     }
 
     free(ovn_version);
@@ -6242,6 +6293,7 @@ loop_done:
     service_stop();
     ovsrcu_exit();
     dns_resolve_destroy();
+    route_exchange_destroy();
 
     exit(retval);
 }
diff --git a/controller/route-exchange-stub.c b/controller/route-exchange-stub.c
new file mode 100644
index 000000000..2ca644b06
--- /dev/null
+++ b/controller/route-exchange-stub.c
@@ -0,0 +1,42 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include <stdbool.h>
+
+#include "openvswitch/compiler.h"
+#include "route-exchange.h"
+
+bool
+route_exchange_relevant_port(const struct sbrec_port_binding *pb OVS_UNUSED)
+{
+    return false;
+}
+
+void
+route_exchange_run(struct route_exchange_ctx_in *r_ctx_in OVS_UNUSED,
+                   struct route_exchange_ctx_out *r_ctx_out OVS_UNUSED)
+{
+}
+
+void
+route_exchange_cleanup(void)
+{
+}
+
+void
+route_exchange_destroy(void)
+{
+}
diff --git a/controller/route-exchange.c b/controller/route-exchange.c
new file mode 100644
index 000000000..90144f75f
--- /dev/null
+++ b/controller/route-exchange.c
@@ -0,0 +1,102 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include <errno.h>
+#include <net/if.h>
+
+#include "openvswitch/vlog.h"
+
+#include "lib/ovn-sb-idl.h"
+
+#include "binding.h"
+#include "ha-chassis.h"
+#include "local_data.h"
+#include "route.h"
+#include "route-exchange.h"
+#include "route-exchange-netlink.h"
+
+
+VLOG_DEFINE_THIS_MODULE(route_exchange);
+static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);
+
+static struct sset _maintained_vrfs = SSET_INITIALIZER(&_maintained_vrfs);
+
+void
+route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
+                   struct route_exchange_ctx_out *r_ctx_out OVS_UNUSED)
+{
+    struct sset old_maintained_vrfs = SSET_INITIALIZER(&old_maintained_vrfs);
+    sset_swap(&_maintained_vrfs, &old_maintained_vrfs);
+
+    const struct advertise_datapath_entry *ad;
+    HMAP_FOR_EACH (ad, node, r_ctx_in->announce_routes) {
+        struct hmap received_routes
+                = HMAP_INITIALIZER(&received_routes);
+        char vrf_name[IFNAMSIZ + 1];
+        snprintf(vrf_name, sizeof vrf_name, "ovnvrf%"PRIi64,
+                 ad->key);
+
+        if (ad->maintain_vrf) {
+            int error = re_nl_create_vrf(vrf_name, ad->key);
+            if (error && error != EEXIST) {
+                VLOG_WARN_RL(&rl,
+                             "Unable to create VRF %s for datapath "
+                             "%"PRId64": %s.",
+                             vrf_name, ad->key,
+                             ovs_strerror(error));
+                continue;
+            }
+            sset_add(&_maintained_vrfs, vrf_name);
+        } else {
+            /* a previous maintain-vrf flag was removed. We should therfor
+             * also not delete it even if we created it previously. */
+            sset_find_and_delete(&_maintained_vrfs, vrf_name);
+            sset_find_and_delete(&old_maintained_vrfs, vrf_name);
+        }
+
+        re_nl_sync_routes(ad->key, &ad->routes);
+    }
+
+    /* Remove VRFs previously maintained by us not found in the above loop. */
+    const char *vrf_name;
+    SSET_FOR_EACH_SAFE (vrf_name, &old_maintained_vrfs) {
+        if (!sset_find(&_maintained_vrfs, vrf_name)) {
+            re_nl_delete_vrf(vrf_name);
+        }
+        sset_delete(&old_maintained_vrfs, SSET_NODE_FROM_NAME(vrf_name));
+    }
+    sset_destroy(&old_maintained_vrfs);
+}
+
+void
+route_exchange_cleanup(void)
+{
+    const char *vrf_name;
+    SSET_FOR_EACH_SAFE (vrf_name, &_maintained_vrfs) {
+        re_nl_delete_vrf(vrf_name);
+    }
+}
+
+void
+route_exchange_destroy(void)
+{
+    const char *vrf_name;
+    SSET_FOR_EACH_SAFE (vrf_name, &_maintained_vrfs) {
+        sset_delete(&_maintained_vrfs, SSET_NODE_FROM_NAME(vrf_name));
+    }
+
+    sset_destroy(&_maintained_vrfs);
+}
diff --git a/controller/route-exchange.h b/controller/route-exchange.h
new file mode 100644
index 000000000..2c2a9ab84
--- /dev/null
+++ b/controller/route-exchange.h
@@ -0,0 +1,33 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ROUTE_EXCHANGE_H
+#define ROUTE_EXCHANGE_H 1
+
+#include <stdbool.h>
+
+struct route_exchange_ctx_in {
+    /* Contains struct advertise_datapath_entry */
+    struct hmap *announce_routes;
+};
+
+struct route_exchange_ctx_out {
+};
+
+void route_exchange_run(struct route_exchange_ctx_in *,
+                        struct route_exchange_ctx_out *);
+void route_exchange_cleanup(void);
+void route_exchange_destroy(void);
+
+#endif /* ROUTE_EXCHANGE_H */
diff --git a/tests/ovs-macros.at b/tests/ovs-macros.at
index 0e3b1bcd6..60e1433f0 100644
--- a/tests/ovs-macros.at
+++ b/tests/ovs-macros.at
@@ -285,6 +285,17 @@ m4_define([OVS_WAIT_UNTIL],
   [check_ovs_wait_until_args "$#" "$2"
    OVS_WAIT([$1], [$2], [AT_LINE], [until $1])])
 
+dnl OVS_WAIT_UNTIL_EQUAL(COMMAND, OUTPUT)
+dnl
+dnl Executes shell COMMAND in a loop until it returns zero and the output
+dnl equals OUTPUT.  If COMMAND does not return zero or a desired output within
+dnl a reasonable time limit, fails the test.
+m4_define([OVS_WAIT_UNTIL_EQUAL],
+  [AT_FAIL_IF([test "$#" -ge 3])
+   echo "$2" > wait_until_expected
+   OVS_WAIT_UNTIL([$1 | diff -u wait_until_expected - ])])
+
+
 dnl OVS_WAIT_FOR_OUTPUT(COMMAND, EXIT-STATUS, STDOUT, STDERR)
 dnl OVS_WAIT_FOR_OUTPUT_UNQUOTED(COMMAND, EXIT-STATUS, STDOUT, STDERR)
 dnl
diff --git a/tests/system-common-macros.at b/tests/system-common-macros.at
index 0ed5bc567..3b320859f 100644
--- a/tests/system-common-macros.at
+++ b/tests/system-common-macros.at
@@ -542,3 +542,18 @@ m4_define([CHECK_VRF],
     AT_SKIP_IF([test $rc -ne 0])
     on_exit 'modprobe -r vrf'
 ])
+
+# VRF_RESERVE([id])
+#
+# Helper to ensure we actually support vrfs and the vrf in question has no
+# route entries in it and is not existing.
+# We need to add it before deleting as routes can actually survive in a
+# deleted vrf.
+m4_define([VRF_RESERVE],
+    [
+     CHECK_VRF()
+     ip link add "ovnvrf$1" type vrf table "$1"
+     ip route flush vrf "ovnvrf$1"
+     ip link del "ovnvrf$1"
+    ]
+)
diff --git a/tests/system-ovn.at b/tests/system-ovn.at
index 19ec1eb8d..faf29f53d 100644
--- a/tests/system-ovn.at
+++ b/tests/system-ovn.at
@@ -14721,3 +14721,407 @@ OVS_TRAFFIC_VSWITCHD_STOP(["/failed to query port patch-.*/d
 /connection dropped.*/d"])
 AT_CLEANUP
 ])
+
+OVN_FOR_EACH_NORTHD([
+AT_SETUP([dynamic-routing - DGP])
+
+VRF_RESERVE([1337])
+
+# This test uses dynamic routing on a simulated multi-tenant internet
+# connection.
+# Tenant 1 (pr1, p1, vif1) is connected to the internet via NAT on pr1.
+# Tenant 2 (pr2, p2, vif2) is connected to the internet via routing.
+# The connections of pr1 and pr2 to public are using DGPs.
+# The connection from internet to phys is also using a DGP.
+# The LR internet is running dynamic-routing.
+# The LS phys is assumed to be used for peering with a router outside OVN
+#
+#
+# +----+       +----+
+# |vif1|       |vif2|
+# +--+-+       +--+-+
+#    |            |
+# +--+--+      +--+--+
+# |LS p1|      |LS p2|
+# +--+--+      +--+--+
+#    |            |
+# +--+---+     +--+---+
+# |LR pr1|     |LR pr2|
+# +-----++     ++-----+
+#       |       |
+#      ++-------++
+#      |LS public|
+#      +-----+---+
+#            |
+#      +-----+-----+
+#      |LR internet|
+#      +-----+-----+
+#            |
+#        +---+---+
+#        |LS phys|
+#        +-------+
+
+ovn_start
+OVS_TRAFFIC_VSWITCHD_START()
+
+ADD_BR([br-int])
+ADD_BR([br-ext])
+
+check ovs-ofctl add-flow br-ext action=normal
+# Set external-ids in br-int needed for ovn-controller
+check ovs-vsctl \
+        -- set Open_vSwitch . external-ids:system-id=hv1 \
+        -- set Open_vSwitch . external-ids:ovn-remote=unix:$ovs_base/ovn-sb/ovn-sb.sock \
+        -- set Open_vSwitch . external-ids:ovn-encap-type=geneve \
+        -- set Open_vSwitch . external-ids:ovn-encap-ip=169.0.0.1 \
+        -- set bridge br-int fail-mode=secure other-config:disable-in-band=true
+
+# Start ovn-controller
+start_daemon ovn-controller
+
+# LS setup
+
+check ovn-nbctl ls-add public
+check ovn-nbctl ls-add phys
+check ovn-nbctl ls-add p1
+check ovn-nbctl ls-add p2
+
+# LR internet setup
+
+check ovn-nbctl lr-add internet \
+    -- set Logical_Router internet options:dynamic-routing=true \
+                                   options:requested-tnl-key=1337
+
+check ovn-nbctl lrp-add internet internet-public \
+        00:00:02:01:02:03 192.0.2.1/24 \
+    -- set Logical_Router_Port internet-public \
+                             options:dynamic-routing-connected=true \
+                             options:dynamic-routing-static=true
+check ovn-nbctl lsp-add public public-internet \
+    -- set Logical_Switch_Port public-internet type=router \
+                                         options:router-port=internet-public \
+    -- lsp-set-addresses public-internet router
+
+check ovn-nbctl lrp-add internet internet-phys \
+        00:00:ff:00:00:01 192.168.10.1/24 \
+    -- set Logical_Router_Port internet-phys \
+                             options:maintain-vrf=true
+check ovn-nbctl lrp-set-gateway-chassis internet-phys hv1
+check ovn-nbctl lsp-add phys phys-internet \
+    -- set Logical_Switch_Port phys-internet type=router \
+                                         options:router-port=internet-phys \
+    -- lsp-set-addresses phys-internet router
+
+# LR pr1 setup
+
+check ovn-nbctl lr-add pr1 \
+    -- set Logical_Router pr1 options:requested-tnl-key=1338
+
+check ovn-nbctl lrp-add pr1 pr1-public \
+        00:00:02:01:02:04 192.0.2.2/24
+check ovn-nbctl lrp-set-gateway-chassis pr1-public hv1
+check ovn-nbctl lsp-add public public-pr1 \
+    -- set Logical_Switch_Port public-pr1 type=router \
+                                         options:router-port=pr1-public \
+    -- lsp-set-addresses public-pr1 router
+
+check ovn-nbctl lrp-add pr1 pr1-p1 \
+        00:00:03:00:00:01 10.0.0.1/24
+check ovn-nbctl lsp-add p1 p1-pr1 \
+    -- set Logical_Switch_Port p1-pr1 type=router \
+                                         options:router-port=pr1-p1 \
+    -- lsp-set-addresses p1-pr1 router
+
+check ovn-nbctl lr-route-add pr1 0.0.0.0/0 192.0.2.1
+
+# LR pr2 setup
+
+check ovn-nbctl lr-add pr2 \
+    -- set Logical_Router pr2 options:requested-tnl-key=1339
+
+check ovn-nbctl lrp-add pr2 pr2-public \
+        00:00:02:01:02:05 192.0.2.3/24
+check ovn-nbctl lrp-set-gateway-chassis pr2-public hv1
+check ovn-nbctl lsp-add public public-pr2 \
+    -- set Logical_Switch_Port public-pr2 type=router \
+                                         options:router-port=pr2-public \
+    -- lsp-set-addresses public-pr2 router
+
+check ovn-nbctl lrp-add pr2 pr2-p2 \
+        00:00:04:00:00:01 198.51.100.1/24
+check ovn-nbctl lsp-add p2 p2-pr2 \
+    -- set Logical_Switch_Port p2-pr2 type=router \
+                                         options:router-port=pr2-p2 \
+    -- lsp-set-addresses p2-pr2 router
+
+check ovn-nbctl lr-route-add pr2 0.0.0.0/0 192.0.2.1
+
+# Setup lsp "vif1" with NAT
+check ovn-nbctl lsp-add p1 vif1 \
+    -- lsp-set-addresses vif1 "00:00:ff:ff:ff:01 10.0.0.2"
+check ovn-nbctl lr-nat-add pr1 dnat_and_snat 192.0.2.10 10.0.0.2
+
+# Setup lsp "vif2" with a static route on LR internet
+check ovn-nbctl lsp-add p2 vif2 \
+    -- lsp-set-addresses vif2 "00:00:ff:ff:ff:02 198.51.100.10"
+check ovn-nbctl lr-route-add internet 198.51.100.0/24 192.0.2.3
+
+# Configure external connectivity
+check ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=phynet:br-ext
+check ovn-nbctl lsp-add phys phys1 \
+        -- lsp-set-addresses phys1 unknown \
+        -- lsp-set-type phys1 localnet \
+        -- lsp-set-options phys1 network_name=phynet
+
+check ovn-nbctl --wait=hv sync
+
+# now the ovn-controller should have setup a vrf named "ovnvrf1337"
+# it should contain routes for:
+# * 192.0.2.0/24
+# * 198.51.100.0/24
+
+AT_CHECK([ip vrf show ovnvrf1337], [0], [dnl
+ovnvrf1337 1337
+])
+
+# ip route list output has a trailing space on each line
+# the awk magic removes all trailing spaces.
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.0/24 proto 84
+blackhole 198.51.100.0/24 proto 84])
+
+# we now switch to announcing host routes and expect 192.0.2.0/24 to be gone
+# and the following to be added:
+# * 192.0.2.1/32
+# * 192.0.2.2/32
+# * 192.0.2.3/32
+# * 192.0.2.10/32
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-public \
+                         options:dynamic-routing-connected-as-host-routes=true
+
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84
+blackhole 192.0.2.2 proto 84
+blackhole 192.0.2.3 proto 84
+blackhole 192.0.2.10 proto 84
+blackhole 198.51.100.0/24 proto 84])
+
+OVS_APP_EXIT_AND_WAIT([ovn-controller])
+
+as ovn-sb
+OVS_APP_EXIT_AND_WAIT([ovsdb-server])
+
+as ovn-nb
+OVS_APP_EXIT_AND_WAIT([ovsdb-server])
+
+as northd
+OVS_APP_EXIT_AND_WAIT([ovn-northd])
+
+as
+OVS_TRAFFIC_VSWITCHD_STOP(["/.*error receiving.*/d
+/.*terminating with signal 15.*/d"])
+AT_CLEANUP
+])
+
+OVN_FOR_EACH_NORTHD([
+AT_SETUP([dynamic-routing - Gateway Router])
+
+VRF_RESERVE([1337])
+
+# This test uses dynamic routing on a simulated multi-tenant internet
+# connection.
+# Tenant 1 (pr1, p1, vif1) is connected to the internet via NAT on pr1.
+# Tenant 2 (pr2, p2, vif2) is connected to the internet via routing.
+# The connections of pr1 and pr2 to public are using DGPs.
+# The LR internet is a gateway router.
+# The LR internet is running dynamic-routing.
+# The LS phys is assumed to be used for peering with a router outside OVN
+#
+#
+# +----+       +----+
+# |vif1|       |vif2|
+# +--+-+       +--+-+
+#    |            |
+# +--+--+      +--+--+
+# |LS p1|      |LS p2|
+# +--+--+      +--+--+
+#    |            |
+# +--+---+     +--+---+
+# |LR pr1|     |LR pr2|
+# +-----++     ++-----+
+#       |       |
+#      ++-------++
+#      |LS public|
+#      +-----+---+
+#            |
+#      +-----+-----+
+#      |LR internet|
+#      +-----+-----+
+#            |
+#        +---+---+
+#        |LS phys|
+#        +-------+
+
+ovn_start
+OVS_TRAFFIC_VSWITCHD_START()
+
+ADD_BR([br-int])
+ADD_BR([br-ext])
+
+check ovs-ofctl add-flow br-ext action=normal
+# Set external-ids in br-int needed for ovn-controller
+check ovs-vsctl \
+        -- set Open_vSwitch . external-ids:system-id=hv1 \
+        -- set Open_vSwitch . external-ids:ovn-remote=unix:$ovs_base/ovn-sb/ovn-sb.sock \
+        -- set Open_vSwitch . external-ids:ovn-encap-type=geneve \
+        -- set Open_vSwitch . external-ids:ovn-encap-ip=169.0.0.1 \
+        -- set bridge br-int fail-mode=secure other-config:disable-in-band=true
+
+# Start ovn-controller
+start_daemon ovn-controller
+
+# LS setup
+
+check ovn-nbctl ls-add public
+check ovn-nbctl ls-add phys
+check ovn-nbctl ls-add p1
+check ovn-nbctl ls-add p2
+
+# LR internet setup
+
+check ovn-nbctl lr-add internet \
+    -- set Logical_Router internet options:dynamic-routing=true \
+                                   options:requested-tnl-key=1337 \
+                                   options:chassis=hv1
+
+check ovn-nbctl lrp-add internet internet-public \
+        00:00:02:01:02:03 192.0.2.1/24 \
+    -- set Logical_Router_Port internet-public \
+                             options:dynamic-routing-connected=true \
+                             options:dynamic-routing-static=true \
+                             options:dynamic-routing-ifname=wedontlearnstuffhere
+check ovn-nbctl lsp-add public public-internet \
+    -- set Logical_Switch_Port public-internet type=router \
+                                         options:router-port=internet-public \
+    -- lsp-set-addresses public-internet router
+
+check ovn-nbctl lrp-add internet internet-phys \
+        00:00:ff:00:00:01 192.168.10.1/24 \
+    -- set Logical_Router_Port internet-phys \
+                             options:maintain-vrf=true
+check ovn-nbctl lsp-add phys phys-internet \
+    -- set Logical_Switch_Port phys-internet type=router \
+                                         options:router-port=internet-phys \
+    -- lsp-set-addresses phys-internet router
+
+# LR pr1 setup
+
+check ovn-nbctl lr-add pr1 \
+    -- set Logical_Router pr1 options:requested-tnl-key=1338
+
+check ovn-nbctl lrp-add pr1 pr1-public \
+        00:00:02:01:02:04 192.0.2.2/24
+check ovn-nbctl lrp-set-gateway-chassis pr1-public hv1
+check ovn-nbctl lsp-add public public-pr1 \
+    -- set Logical_Switch_Port public-pr1 type=router \
+                                         options:router-port=pr1-public \
+    -- lsp-set-addresses public-pr1 router
+
+check ovn-nbctl lrp-add pr1 pr1-p1 \
+        00:00:03:00:00:01 10.0.0.1/24
+check ovn-nbctl lsp-add p1 p1-pr1 \
+    -- set Logical_Switch_Port p1-pr1 type=router \
+                                         options:router-port=pr1-p1 \
+    -- lsp-set-addresses p1-pr1 router
+
+check ovn-nbctl lr-route-add pr1 0.0.0.0/0 192.0.2.1
+
+# LR pr2 setup
+
+check ovn-nbctl lr-add pr2 \
+    -- set Logical_Router pr2 options:requested-tnl-key=1339
+
+check ovn-nbctl lrp-add pr2 pr2-public \
+        00:00:02:01:02:05 192.0.2.3/24
+check ovn-nbctl lrp-set-gateway-chassis pr2-public hv1
+check ovn-nbctl lsp-add public public-pr2 \
+    -- set Logical_Switch_Port public-pr2 type=router \
+                                         options:router-port=pr2-public \
+    -- lsp-set-addresses public-pr2 router
+
+check ovn-nbctl lrp-add pr2 pr2-p2 \
+        00:00:04:00:00:01 198.51.100.1/24
+check ovn-nbctl lsp-add p2 p2-pr2 \
+    -- set Logical_Switch_Port p2-pr2 type=router \
+                                         options:router-port=pr2-p2 \
+    -- lsp-set-addresses p2-pr2 router
+
+check ovn-nbctl lr-route-add pr2 0.0.0.0/0 192.0.2.1
+
+# Setup lsp "vif1" with NAT
+check ovn-nbctl lsp-add p1 vif1 \
+    -- lsp-set-addresses vif1 "00:00:ff:ff:ff:01 10.0.0.2"
+check ovn-nbctl lr-nat-add pr1 dnat_and_snat 192.0.2.10 10.0.0.2
+
+# Setup lsp "vif2" with a static route on LR internet
+check ovn-nbctl lsp-add p2 vif2 \
+    -- lsp-set-addresses vif2 "00:00:ff:ff:ff:02 198.51.100.10"
+check ovn-nbctl lr-route-add internet 198.51.100.0/24 192.0.2.3
+
+# Configure external connectivity
+check ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=phynet:br-ext
+check ovn-nbctl lsp-add phys phys1 \
+        -- lsp-set-addresses phys1 unknown \
+        -- lsp-set-type phys1 localnet \
+        -- lsp-set-options phys1 network_name=phynet
+
+check ovn-nbctl --wait=hv sync
+
+# now the ovn-controller should have setup a vrf named "ovnvrf1337"
+# it should contain routes for:
+# * 192.0.2.0/24
+# * 198.51.100.0/24
+
+AT_CHECK([ip vrf show ovnvrf1337], [0], [dnl
+ovnvrf1337 1337
+])
+
+# ip route list output has a trailing space on each line
+# the awk magic removes all trailing spaces.
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.0/24 proto 84
+blackhole 198.51.100.0/24 proto 84])
+
+# we now switch to announcing host routes and expect 192.0.2.0/24 to be gone
+# and the following to be added:
+# * 192.0.2.1/32
+# * 192.0.2.2/32
+# * 192.0.2.3/32
+# * 192.0.2.10/32
+# the last 3 of them are local to the current chassis so we expect a better
+# prio.
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-public \
+                         options:dynamic-routing-connected-as-host-routes=true
+
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84
+blackhole 192.0.2.2 proto 84
+blackhole 192.0.2.3 proto 84
+blackhole 192.0.2.10 proto 84
+blackhole 198.51.100.0/24 proto 84])
+
+as ovn-sb
+OVS_APP_EXIT_AND_WAIT([ovsdb-server])
+
+as ovn-nb
+OVS_APP_EXIT_AND_WAIT([ovsdb-server])
+
+as northd
+OVS_APP_EXIT_AND_WAIT([ovn-northd])
+
+as
+OVS_TRAFFIC_VSWITCHD_STOP(["/.*error receiving.*/d
+/.*terminating with signal 15.*/d"])
+AT_CLEANUP
+])
+

From patchwork Thu Jan  2 15:19:40 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029081
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=CceZUku0;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=CceZUku0;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::136; helo=smtp3.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp3.osuosl.org (smtp3.osuosl.org [IPv6:2605:bc80:3010::136])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9Pn1xm8z1yTy
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:29 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp3.osuosl.org (Postfix) with ESMTP id 3238B60812;
	Thu,  2 Jan 2025 15:20:28 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id nb9dChG4gTdn; Thu,  2 Jan 2025 15:20:21 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 8502C60865
Authentication-Results: smtp3.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=CceZUku0;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=CceZUku0
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp3.osuosl.org (Postfix) with ESMTPS id 8502C60865;
	Thu,  2 Jan 2025 15:20:20 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id F1048C08BF;
	Thu,  2 Jan 2025 15:20:19 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp4.osuosl.org (smtp4.osuosl.org [140.211.166.137])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 2BC56C08BA
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:19 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp4.osuosl.org (Postfix) with ESMTP id C3F90405F0
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:08 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp4.osuosl.org ([127.0.0.1])
 by localhost (smtp4.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id UoCXomlumEwB for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:20:05 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:260c::609;
 helo=eur03-vi1-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp4.osuosl.org 020FD4058A
Authentication-Results: smtp4.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp4.osuosl.org 020FD4058A
Authentication-Results: smtp4.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=CceZUku0;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=CceZUku0
Received: from EUR03-VI1-obe.outbound.protection.outlook.com
 (mail-vi1eur03on20609.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:260c::609])
 by smtp4.osuosl.org (Postfix) with ESMTPS id 020FD4058A
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:04 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=fZDmzH3lB0J0R8arAlFuag+fDGxonihBoU9A7B429inivmEIJnW20O5PR52tLjvxtHFOAEPtH0bIvHdS9l9oKWjjEieHTQRo4CjspWOoDOeMGFOxGQ+6Bvu7Ho2EBSnqPbLU1TdY35DtvVFmleyUvMFbv351fybEv5iYHjGnO+M6YROWyb/63dzbHxzXPxg7R3wSNveRDC39wVVzbdBsBzxU0N1VuYxqQd7n4E1aRitqjiRr0Sq3PcPFVawfaoTE4SOk4MH9jqPQbtjkoDzv45LDsQMUedNImJHbW7sA6A3/w7fQYGq2kQ89fgrtfGvRo7dAPgxHMaf9q+LJYeH0hA==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=RpzwVNMWtiyoxnG5s+KOJgEMMJhp9IU8hAvtQk5SKSk=;
 b=IZjXVrboE/WDFXIJ/vL2xEwimY5HEnB7McJDse+Cb8bjMDVElLB9wFOqzpcIhhTm6vK045/TxRLscvSISKlXROD4nHrdlHQ6t2Y9xYQ8hX1hgsUid5Xm7SpEpFeN7UNZmvEOqR5p3NxfJ1cfiZqCBYa/pzf88qYgKeVmBjDx1oht94CnD10TWplzc6QZMEVXt3NX1Y8919in8kwA8gs6YV1mGFodNK8Sa/OCQuq7WyTRV9oEkitewduoSfYgfi2NdXDot41qLwUWcjV1beMpPBRcg3qCjzGA8fJTy2ew773yZzd2nMtZ8wQYZc+VKr6S8umuGcQfljgxNhtMjI61zQ==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=RpzwVNMWtiyoxnG5s+KOJgEMMJhp9IU8hAvtQk5SKSk=;
 b=CceZUku0b+LxuN/wIaZccXp0BC5yrrISc7NgbKaLv5jwiJ2/S5ayVxt7/gjk3LcEZlRyA82wUU+FY4jPM/kjDIeVs81/0zIFy5rz8kRrGr76HxuVsaNYu6Wgj9wYno0+F7pTL0eghzN+QDDa3iEqTH5n0d7zr7Z7sjWM1H0gQskQ/uPEoU+iSHuvb+njMivqLh5GHY5REMUu4RnQoHUJ+EAbm1QBpFGtoe0MF+j0d/84fYMMXWgVYUVEshEQHKoOBVIEtNVLG9CQ2Ja3G4FZyhWxhDeJyiBDNsEHUixxLwJuXIyyJiWDXlzG/e7QKpCarQNtibk6EzyKNW7eaJPE+Q==
Received: from AM0PR07CA0034.eurprd07.prod.outlook.com (2603:10a6:208:ac::47)
 by GV2PR10MB7077.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:150:de::21)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:54 +0000
Received: from AM1PEPF000252DA.eurprd07.prod.outlook.com
 (2603:10a6:208:ac:cafe::81) by AM0PR07CA0034.outlook.office365.com
 (2603:10a6:208:ac::47) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8335.5 via Frontend Transport; Thu, 2
 Jan 2025 15:19:54 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 AM1PEPF000252DA.mail.protection.outlook.com (10.167.16.52) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:19:51 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:19:52
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 12394539
X-ExclaimerImprintLatency: 8128447
X-ExclaimerImprintAction: 557e9b00088642e8b7cfa3554c06dc68
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=DJkKUxvLlJp/t+gQZJMl1xziip1M4kJKuxzTW/Pxj1v+7z9DdURsS4xKtUg4fIraHHadpgB31VBYJJyxnbgSvjBXfk/j+svtGXVJiJh3OuI/Km713RRicBwP+dNfBrIS4Q+lsKGJdek/n31gv4yXohhFNevDjQbUa6ujuBvdxw269P8x1WC64b6c6wMcn+b3wlpiuBhrit4CcJO47wWtcYnec/tCwsKqKlsnzfeqSyalnXaWaI+jxyeafEh2csIWj/kWav5uyEiiUXHXuR5IOeJRvYRzPTsOWSFswM128MpyWEhzrfGZH9krPHWPNMzjXN8RjK173RawNTFJSq3uog==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=RpzwVNMWtiyoxnG5s+KOJgEMMJhp9IU8hAvtQk5SKSk=;
 b=wfxMi9J3zTMI0SjyBpXj0p4+Kr7XKwF6yscDQNNOyy7VT7V8kVxyFRUATFfUnYcS0b4ts6DvAAzPwKBGPZOhzbxInqW2h9KYJpt+/SRe98cUEhBE5wB7lVin+VChp8yCfbCVn6hf1CVHM5O1UWSQ7nyY+jMaCSgQiln+/N4bIB6BjCuTSxckKb3KcICyBjNqO2vzM4rI0lKQxylEENXGTDlJzJE5PMOqTyVHskL3NiideLV3XmR2Dk+aE8KXW1UAXgpD/J+oTqZZBJPeQXjyc578EQ0na/Wd5+xxdz3c48GEzks/XpcNcCejy5etDq3ItPz85f+/OzpZGmRAKvM5Xw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=RpzwVNMWtiyoxnG5s+KOJgEMMJhp9IU8hAvtQk5SKSk=;
 b=CceZUku0b+LxuN/wIaZccXp0BC5yrrISc7NgbKaLv5jwiJ2/S5ayVxt7/gjk3LcEZlRyA82wUU+FY4jPM/kjDIeVs81/0zIFy5rz8kRrGr76HxuVsaNYu6Wgj9wYno0+F7pTL0eghzN+QDDa3iEqTH5n0d7zr7Z7sjWM1H0gQskQ/uPEoU+iSHuvb+njMivqLh5GHY5REMUu4RnQoHUJ+EAbm1QBpFGtoe0MF+j0d/84fYMMXWgVYUVEshEQHKoOBVIEtNVLG9CQ2Ja3G4FZyhWxhDeJyiBDNsEHUixxLwJuXIyyJiWDXlzG/e7QKpCarQNtibk6EzyKNW7eaJPE+Q==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:42 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:42 +0000
Date: Thu, 2 Jan 2025 16:19:40 +0100
To: dev@openvswitch.org
Message-ID: 
 <137c308207e753bd7067ac2d032a428656b9f42c.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0112.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::15) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|AM1PEPF000252DA:EE_|GV2PR10MB7077:EE_
X-MS-Office365-Filtering-Correlation-Id: 0da06f93-903b-4452-e03f-08dd2b40e80a
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 TALjp0eQLOrle5wZP8O/dJ9fLPYEMJiL8b6eu/ol1EYOnAexVGkmUFcL7Dg31+b0b9+rDpTWFwZ8Sk23P+v2yAirU7QzdIy6PJp6PAji27uR5Gb1esR+azQbcSUyVxPLsF8aMdHzdvLP/FHeu732FiuvNxI4rjWlpiuOrrp1ErxlRhOEb7TzidD1+mr69lNpgaOgrALxqImFBGV/YZ0Xr1shNjnG+qk8ol5V4jKW0vKgv/F70ELwC5Pclq9mE+v3VtzbB3iRs8FGa0+mM5IXILiLtWz0b1UaqO9WEBAghwFbbCDfOKjTAyOqMIVrJ/7hRAqIFFjdH6DR3Sswit8WIPflGS5YHnEfhM7GCUHdJ4cfne7T14XyoKsQ/vkbisUvxHFJbV4uZ/SdAW8JqmPOWjYROfKkA8U3NZp95DlOYRh1ZB/yCfbmGszgeenIrIbrSne70EF9SNMXY3bxTIDBCf3NkcOePcyZCJOAAuhvbSIxnM0kJS7SeXPGkQssznkKrpLYNVCJjLo1qM03dO7SMpdPyrAr9Dj2fqNhkl3tdLwMHR56TOHuqPQWZSMX+wT7kBvneO8Ok4R/LT5uZDAhCIPTbIZZgX3fgtYq8OsvCvHBBR7KQlowikqjjP9PK/txobQ3l26hojgQiBIAoLLOl3K+AyEvXUn/HuMX6dppUAvAev75rNwutHPee0QcHJP69G+aqA2gwnLKQ7vL15MEWccl/bij/cXSUVZ3yms7YxqOxuYRIDk0VCiaLntJlnGSLX2Pqx6LXXyWu/iffLedY13YTovuZzSqhdMO9EsH8cxOe7GJKwF4dkJvgmL2+izlaOqeabC/KzWgPUuUC7tGt42AX6y1FoF85zL2DG1BX+oem+twXAKknhI4ttoKKKOYTSjz3BClXXXgP8Drl8NXWl5sisfrtN3fRFqXfY4JkwDynEWZUsaxkhcBKH4ujRtKpjGhCncdhvoFJ6sYQG2ycfOIt63s/mzsGdMwZizWhk2iJ+laEZ05e6EkBlFcZo9pfdoD+hMBEphOEE8boLYin5OmcKFRwm4uEWPXxyMYzKp4+FNWrXvabr0rC6n61S3BUMv2mEpivMcodKUk56Ytx7pDo4XGooENUd/0pHcAFxIC1zvZiFnIJxof4AbzF5juJcAF5RuLJmjfl9CaVYisMSIWyWlB1V+8Zt8L6FGUPbmYLVR7IM4Cefjzc1gqvSh4JFzhAT7VE8DuVj4T4D7BjKGa6VKlPjTjKDCsUWTazlYnhu1WLDCJL+r1f5c3Wlatpfv01khHiuQVI669uD1qyTMt+wgnkZIckewY4tmRse9jbozFeZcmXrub90Cm/OrgGook1Z5gjcmI8e9pIIyNEbQlq4AoOQ4VKLfPDrsRA4eLT3bdjYJq4TSUOqy11226
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 AM1PEPF000252DA.eurprd07.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 99269a59-deb6-486d-bcf3-08dd2b40e1a5
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|82310400026|35042699022|14060799003|376014|1800799024|36860700013;
X-Microsoft-Antispam-Message-Info: 
 cQ42YvTSv3zvKfBpEtK5MfveLslxMeefnGaKcSlS4+lpckFEE7yMCp3Fwo//IExcfF5Nsy5gFTto9jvv1snCHJhKw0jLkPhRiy9UGtQgOLYAOnqHrIED1CgR6inZWin/obXXnJKxpgt5j5gGCFt5Wn3QCsGtGfPajKFtxoo2mCmaLnJxdUHHeWPRrA7Zb+7lclwSvSZIjCgbFB3s03OQUUsbtIgdootF1K7P1dkZeuW1Be/ak5ADkv/PpgJ88gJaVhmsczMopngX17DgK/n1t/Nq5NosQlnBp1IPo2D2yJggO+b5FrXFqG6bCxhr9a7ljQ5WyWFkDVUxFkN2URriTCA0Pq1MowkK4k5iYk7H4WzlMIX4x6GHIwS2jLVceWBWKTszf4XLz0zHjbrWSmcurzKIGsTXep+gI6a5Hz3yVq26t1ffI8d5DDOcsbsR0gM/sPycA6JPktkOwlJTV3ESuCjS5VBte9w+ZEtYUcVdFgwEy21c5g8KgoLtLrGW3bHubTE+Kmw82qVSqpRC2kdL4wP/tgdabcSdM3c3ip56Xaswg5Ok7ERPDKpqjUZW5OJZxIUwYg2llf8pYmaDvz/RTvbWNsvQBZMnIQTyMCwhMJkGkPuJq2UGRWUgR3by8uFyLMLNkIZm4cgcqDgSvXhHcYvTGjRs7Cgme5T3nreU9G83HsgegKuR0n2YxBvionc0hfFftLZ00rb4M30bslKXmQus0JItoYfWqeUayWfwWd3e7d5jmTxdhN3OVUDFewlSx5rKvDvcy2pNODajALaPK74MvYPX9ndjwTut2T2MBbieTwcZgmt8MpRLCVX48ck5N3Wa5d4V3FDxqpwYJ2Jrz74IGfo+rSVEEul+zjZJuA8sDOLHiOjlfyqLQ39wceUsv49mR4PBSf2+I9rGETRMaZvTMHRgTFew88Z6aQasjz/fIE1I6GL2vpJTOnyLEcXDPM9kplPO56ZBkZZ5yzGaK34AU8oeB+uVuA30QpXpYAumw3Ap/Jn0lC0jJ6G9nyfV8SIFoKHXEnVmoRNTNdYOvPxpCLffDaDbJkjF9tJqx6s6k/nRoB8tqaL4V2KkCMdJdD1Gslin1Lgz6Q9tacz9x8sliQAPovs2bv4UKe2qjHqOICu5DLINKKA5BozaXLhbBybT6GUwFrURSZDYATyWvFTA7Qqpq1o7rmgx/pB9/xLzpV9SwuKzJsxtPAdISP0+pY7B7q8pDH38/Rh+bvRqDTX4anQt3CNKpVvLOV1rtFnGJMcdky3npEuhZOq9xDlX7X2WbuHXLiybBkcVYvSyIxU2F4XZ/i5Hzk0DhytBchC4wxzXrdFc8MBrZxMMtsR3+JGuH0ds//GoZIacXzj3uYw8DaG/CAYme7fYCXoUPz4S7A6HG7ZShf+8Pwv1L+7oyWa8wEsBr3OedSrwNUnbyXPNZrjyKqf5321YnzCIFYmXCsa/aByC5ifSHD2OD1N7XSnRKmc/vA6ISDJkbun/L42qWIEE/eJc+e9ZjSVGpw8=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(82310400026)(35042699022)(14060799003)(376014)(1800799024)(36860700013);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:19:51.6781 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 0da06f93-903b-4452-e03f-08dd2b40e80a
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 AM1PEPF000252DA.eurprd07.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: GV2PR10MB7077
Subject: [ovs-dev] [RFC PATCH ovn v3 5/9] controller: Support learning
 routes.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

we now learn all routes inside the vrfs we also advertise routes on.
The routes are then placed in the southbound database for processing by
northd.

Routes are only selected if matching the following rules:
1. must not be a route advertised by us
2. must not be a local connected route (as we want to not learn transfer
   networks)
3. the prefix must not be a link local address

However we can not reliably determine over which link we learned the
route in case we have two LRPs of the same LR on the same chassis.
For now we just assume the routes on both links are identical.
Future commits will refine this.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
v2->v3:
 * Set monitor conditions on sb Learned_Route table.
 * Do not learn routes if Learned_Route table does not exist (upgrades).

 controller/ovn-controller.c         |  50 ++++++++-
 controller/route-exchange-netlink.c |  42 +++++++-
 controller/route-exchange-netlink.h |  13 ++-
 controller/route-exchange.c         | 157 +++++++++++++++++++++++++++-
 controller/route-exchange.h         |   5 +
 lib/ovn-util.c                      |  10 ++
 lib/ovn-util.h                      |   1 +
 tests/system-ovn.at                 |  28 +++++
 8 files changed, 296 insertions(+), 10 deletions(-)

diff --git a/controller/ovn-controller.c b/controller/ovn-controller.c
index 623a70614..77c85086d 100644
--- a/controller/ovn-controller.c
+++ b/controller/ovn-controller.c
@@ -233,7 +233,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
      *
      * Monitor Template_Var for local chassis.
      *
-     * Monitor Advertised_Route for local datapaths.
+     * Monitor Advertised/Learned_Route for local datapaths.
      *
      * We always monitor patch ports because they allow us to see the linkages
      * between related logical datapaths.  That way, when we know that we have
@@ -252,6 +252,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
     struct ovsdb_idl_condition chprv = OVSDB_IDL_CONDITION_INIT(&chprv);
     struct ovsdb_idl_condition tv = OVSDB_IDL_CONDITION_INIT(&tv);
     struct ovsdb_idl_condition ar = OVSDB_IDL_CONDITION_INIT(&ar);
+    struct ovsdb_idl_condition lr = OVSDB_IDL_CONDITION_INIT(&lr);
 
     /* Always monitor all logical datapath groups. Otherwise, DPG updates may
      * be received *after* the lflows using it are seen by ovn-controller.
@@ -272,6 +273,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
         ovsdb_idl_condition_add_clause_true(&chprv);
         ovsdb_idl_condition_add_clause_true(&tv);
         ovsdb_idl_condition_add_clause_true(&ar);
+        ovsdb_idl_condition_add_clause_true(&lr);
         goto out;
     }
 
@@ -361,6 +363,7 @@ update_sb_monitors(struct ovsdb_idl *ovnsb_idl,
             sbrec_ip_multicast_add_clause_datapath(&ip_mcast, OVSDB_F_EQ,
                                                    uuid);
             sbrec_advertised_route_add_clause_datapath(&ar, OVSDB_F_EQ, uuid);
+            sbrec_learned_route_add_clause_datapath(&lr, OVSDB_F_EQ, uuid);
         }
 
         /* Datapath groups are immutable, which means a new group record is
@@ -389,6 +392,7 @@ out:;
         sb_table_set_req_mon_condition(ovnsb_idl, chassis_private, &chprv),
         sb_table_set_opt_mon_condition(ovnsb_idl, chassis_template_var, &tv),
         sb_table_set_opt_mon_condition(ovnsb_idl, advertised_route, &ar),
+        sb_table_set_opt_mon_condition(ovnsb_idl, learned_route, &lr),
     };
 
     unsigned int expected_cond_seqno = 0;
@@ -409,6 +413,7 @@ out:;
     ovsdb_idl_condition_destroy(&chprv);
     ovsdb_idl_condition_destroy(&tv);
     ovsdb_idl_condition_destroy(&ar);
+    ovsdb_idl_condition_destroy(&lr);
     return expected_cond_seqno;
 }
 
@@ -874,7 +879,8 @@ ctrl_register_ovs_idl(struct ovsdb_idl *ovs_idl)
     SB_NODE(meter, "meter") \
     SB_NODE(static_mac_binding, "static_mac_binding") \
     SB_NODE(chassis_template_var, "chassis_template_var") \
-    SB_NODE(advertised_route, "advertised_route")
+    SB_NODE(advertised_route, "advertised_route") \
+    SB_NODE(learned_route, "learned_route")
 
 enum sb_engine_node {
 #define SB_NODE(NAME, NAME_STR) SB_##NAME,
@@ -4991,13 +4997,34 @@ route_sb_advertised_route_data_handler(struct engine_node *node, void *data)
     return true;
 }
 
+struct ed_type_route_exchange {
+    /* We need the idl to check if a table exists. */
+    struct ovsdb_idl *sb_idl;
+};
+
 static void
-en_route_exchange_run(struct engine_node *node, void *data OVS_UNUSED)
+en_route_exchange_run(struct engine_node *node, void *data)
 {
+    struct ed_type_route_exchange *re = data;
+
+    struct ovsdb_idl_index *sbrec_learned_route_by_datapath =
+        engine_ovsdb_node_get_index(
+            engine_get_input("SB_learned_route", node),
+            "datapath");
+
+    struct ovsdb_idl_index *sbrec_port_binding_by_name =
+        engine_ovsdb_node_get_index(
+                engine_get_input("SB_port_binding", node),
+                "name");
+
     struct ed_type_route *route_data =
         engine_get_input_data("route", node);
 
     struct route_exchange_ctx_in r_ctx_in = {
+        .ovnsb_idl_txn = engine_get_context()->ovnsb_idl_txn,
+        .ovnsb_idl = re->sb_idl,
+        .sbrec_learned_route_by_datapath = sbrec_learned_route_by_datapath,
+        .sbrec_port_binding_by_name = sbrec_port_binding_by_name,
         .announce_routes = &route_data->announce_routes,
     };
 
@@ -5012,9 +5039,11 @@ en_route_exchange_run(struct engine_node *node, void *data OVS_UNUSED)
 
 static void *
 en_route_exchange_init(struct engine_node *node OVS_UNUSED,
-                       struct engine_arg *arg OVS_UNUSED)
+                       struct engine_arg *arg)
 {
-    return NULL;
+    struct ed_type_route_exchange *re = xzalloc(sizeof(*re));
+    re->sb_idl = arg->sb_idl;
+    return re;
 }
 
 static void
@@ -5232,6 +5261,9 @@ main(int argc, char *argv[])
     struct ovsdb_idl_index *sbrec_advertised_route_index_by_datapath
         = ovsdb_idl_index_create1(ovnsb_idl_loop.idl,
                                   &sbrec_advertised_route_col_datapath);
+    struct ovsdb_idl_index *sbrec_learned_route_index_by_datapath
+        = ovsdb_idl_index_create1(ovnsb_idl_loop.idl,
+                                  &sbrec_learned_route_col_datapath);
 
     ovsdb_idl_track_add_all(ovnsb_idl_loop.idl);
     ovsdb_idl_omit_alert(ovnsb_idl_loop.idl,
@@ -5258,6 +5290,8 @@ main(int argc, char *argv[])
                    &sbrec_ha_chassis_group_col_external_ids);
     ovsdb_idl_omit(ovnsb_idl_loop.idl,
                    &sbrec_advertised_route_col_external_ids);
+    ovsdb_idl_omit(ovnsb_idl_loop.idl,
+                   &sbrec_learned_route_col_external_ids);
 
     /* We don't want to monitor Connection table at all. So omit all the
      * columns. */
@@ -5351,6 +5385,10 @@ main(int argc, char *argv[])
                      route_sb_advertised_route_data_handler);
 
     engine_add_input(&en_route_exchange, &en_route, NULL);
+    engine_add_input(&en_route_exchange, &en_sb_learned_route,
+                     engine_noop_handler);
+    engine_add_input(&en_route_exchange, &en_sb_port_binding,
+                     engine_noop_handler);
 
     engine_add_input(&en_addr_sets, &en_sb_address_set,
                      addr_sets_sb_address_set_handler);
@@ -5571,6 +5609,8 @@ main(int argc, char *argv[])
                                 sbrec_chassis_template_var_index_by_chassis);
     engine_ovsdb_node_add_index(&en_sb_advertised_route, "datapath",
                                 sbrec_advertised_route_index_by_datapath);
+    engine_ovsdb_node_add_index(&en_sb_learned_route, "datapath",
+                                sbrec_learned_route_index_by_datapath);
     engine_ovsdb_node_add_index(&en_ovs_flow_sample_collector_set, "id",
                                 ovsrec_flow_sample_collector_set_by_id);
     engine_ovsdb_node_add_index(&en_ovs_port, "qos", ovsrec_port_by_qos);
diff --git a/controller/route-exchange-netlink.c b/controller/route-exchange-netlink.c
index e065c49c1..c2a7551f3 100644
--- a/controller/route-exchange-netlink.c
+++ b/controller/route-exchange-netlink.c
@@ -26,6 +26,7 @@
 #include "openvswitch/ofpbuf.h"
 #include "openvswitch/vlog.h"
 #include "packets.h"
+#include "ovn-util.h"
 #include "route-table.h"
 #include "route.h"
 
@@ -171,8 +172,27 @@ re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
     return modify_route(RTM_DELROUTE, 0, table_id, dst, plen);
 }
 
+static uint32_t
+route_hash(const struct in6_addr *dst, unsigned int plen)
+{
+    uint32_t hash = hash_bytes(dst->s6_addr, 16, 0);
+    return hash_int(plen, hash);
+}
+
+void
+re_nl_received_routes_destroy(struct hmap *host_routes)
+{
+    struct re_nl_received_route_node *rr;
+    HMAP_FOR_EACH_SAFE (rr, hmap_node, host_routes) {
+        hmap_remove(host_routes, &rr->hmap_node);
+        free(rr);
+    }
+    hmap_destroy(host_routes);
+}
+
 struct route_msg_handle_data {
     const struct hmap *routes;
+    struct hmap *learned_routes;
 };
 
 static void
@@ -184,8 +204,25 @@ handle_route_msg_delete_routes(const struct route_table_msg *msg, void *data)
     struct advertise_route_entry *ar;
     int err;
 
-    /* This route is not from us, we should not touch it. */
+    /* This route is not from us, so we learn it. */
     if (rd->rtm_protocol != RTPROT_OVN) {
+        if (prefix_is_link_local(&rd->rta_dst, rd->rtm_dst_len)) {
+            return;
+        }
+        struct route_data_nexthop *nexthop;
+        LIST_FOR_EACH (nexthop, nexthop_node, &rd->nexthops) {
+            if (ipv6_is_zero(&nexthop->addr)) {
+                /* This is most likely an address on the local link.
+                 * As we just want to learn remote routes we do not need it.*/
+                continue;
+            }
+            struct re_nl_received_route_node *rr = xzalloc(sizeof *rr);
+            hmap_insert(handle_data->learned_routes, &rr->hmap_node,
+                        route_hash(&rd->rta_dst, rd->rtm_dst_len));
+            rr->addr = rd->rta_dst;
+            rr->plen = rd->rtm_dst_len;
+            rr->nexthop = nexthop->addr;
+        }
         return;
     }
 
@@ -212,7 +249,7 @@ handle_route_msg_delete_routes(const struct route_table_msg *msg, void *data)
 
 void
 re_nl_sync_routes(uint32_t table_id,
-                  const struct hmap *routes)
+                  const struct hmap *routes, struct hmap *learned_routes)
 {
     struct advertise_route_entry *ar;
     HMAP_FOR_EACH (ar, node, routes) {
@@ -224,6 +261,7 @@ re_nl_sync_routes(uint32_t table_id,
      * in the system. */
     struct route_msg_handle_data data = {
         .routes = routes,
+        .learned_routes = learned_routes,
     };
     route_table_dump_one_table(table_id, handle_route_msg_delete_routes,
                                &data);
diff --git a/controller/route-exchange-netlink.h b/controller/route-exchange-netlink.h
index f87ebd75d..566b38fde 100644
--- a/controller/route-exchange-netlink.h
+++ b/controller/route-exchange-netlink.h
@@ -16,6 +16,8 @@
 #define ROUTE_EXCHANGE_NETLINK_H 1
 
 #include <stdint.h>
+#include "openvswitch/hmap.h"
+#include <netinet/in.h>
 
 /* This value is arbitrary but currently unused.
  * See https://github.com/iproute2/iproute2/blob/main/etc/iproute2/rt_protos */
@@ -24,6 +26,13 @@
 struct in6_addr;
 struct hmap;
 
+struct re_nl_received_route_node {
+    struct hmap_node hmap_node;
+    struct in6_addr addr;
+    unsigned int plen;
+    struct in6_addr nexthop;
+};
+
 int re_nl_create_vrf(const char *ifname, uint32_t table_id);
 int re_nl_delete_vrf(const char *ifname);
 
@@ -34,7 +43,9 @@ int re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
 
 void re_nl_dump(uint32_t table_id);
 
+void re_nl_received_routes_destroy(struct hmap *);
 void re_nl_sync_routes(uint32_t table_id,
-                       const struct hmap *host_routes);
+                       const struct hmap *host_routes,
+                       struct hmap *learned_routes);
 
 #endif /* route-exchange-netlink.h */
diff --git a/controller/route-exchange.c b/controller/route-exchange.c
index 90144f75f..febe13a8e 100644
--- a/controller/route-exchange.c
+++ b/controller/route-exchange.c
@@ -34,6 +34,148 @@ static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);
 
 static struct sset _maintained_vrfs = SSET_INITIALIZER(&_maintained_vrfs);
 
+struct route_entry {
+    struct hmap_node hmap_node;
+
+    const struct sbrec_learned_route *sb_route;
+
+    const struct sbrec_datapath_binding *sb_db;
+    const struct sbrec_port_binding *logical_port;
+    char *ip_prefix;
+    char *nexthop;
+    bool stale;
+};
+
+static struct route_entry *
+route_alloc_entry(struct hmap *routes,
+                  const struct sbrec_datapath_binding *sb_db,
+                  const struct sbrec_port_binding *logical_port,
+                  const char *ip_prefix, const char *nexthop)
+{
+    struct route_entry *route_e = xzalloc(sizeof *route_e);
+
+    route_e->sb_db = sb_db;
+    route_e->logical_port = logical_port;
+    route_e->ip_prefix = xstrdup(ip_prefix);
+    route_e->nexthop = xstrdup(nexthop);
+    route_e->stale = false;
+    uint32_t hash = uuid_hash(&sb_db->header_.uuid);
+    hash = hash_string(logical_port->logical_port, hash);
+    hash = hash_string(ip_prefix, hash);
+    hmap_insert(routes, &route_e->hmap_node, hash);
+
+    return route_e;
+}
+
+static struct route_entry *
+route_lookup_or_add(struct hmap *route_map,
+                    const struct sbrec_datapath_binding *sb_db,
+                    const struct sbrec_port_binding *logical_port,
+                    const char *ip_prefix, const char *nexthop)
+{
+    struct route_entry *route_e;
+    uint32_t hash;
+
+    hash = uuid_hash(&sb_db->header_.uuid);
+    hash = hash_string(logical_port->logical_port, hash);
+    hash = hash_string(ip_prefix, hash);
+    HMAP_FOR_EACH_WITH_HASH (route_e, hmap_node, hash, route_map) {
+        if (!strcmp(route_e->nexthop, nexthop)) {
+            return route_e;
+        }
+    }
+
+    route_e = route_alloc_entry(route_map, sb_db,
+                                logical_port, ip_prefix, nexthop);
+    return route_e;
+}
+
+static void
+route_erase_entry(struct route_entry *route_e)
+{
+    free(route_e->ip_prefix);
+    free(route_e->nexthop);
+    free(route_e);
+}
+
+static void
+sb_sync_learned_routes(const struct sbrec_datapath_binding *datapath,
+                       const struct hmap *learned_routes,
+                       const struct sset *bound_ports,
+                       struct ovsdb_idl *ovnsb_idl,
+                       struct ovsdb_idl_txn *ovnsb_idl_txn,
+                       struct ovsdb_idl_index *sbrec_learned_route_by_datapath,
+                       struct ovsdb_idl_index *sbrec_port_binding_by_name)
+{
+    if (!sbrec_server_has_learned_route_table(ovnsb_idl)) {
+        return;
+    }
+
+    struct hmap sync_routes = HMAP_INITIALIZER(&sync_routes);
+    struct route_entry *route_e;
+    const struct sbrec_learned_route *sb_route;
+
+    struct sbrec_learned_route *filter =
+        sbrec_learned_route_index_init_row(sbrec_learned_route_by_datapath);
+    sbrec_learned_route_index_set_datapath(filter, datapath);
+    SBREC_LEARNED_ROUTE_FOR_EACH_EQUAL (sb_route, filter,
+                                        sbrec_learned_route_by_datapath) {
+        /* If the port is not local we don't care about it.
+         * Some other ovn-controller will handle it. */
+        if (!sset_contains(bound_ports,
+                           sb_route->logical_port->logical_port)) {
+            continue;
+        }
+        route_e = route_alloc_entry(&sync_routes,
+                                    sb_route->datapath,
+                                    sb_route->logical_port,
+                                    sb_route->ip_prefix,
+                                    sb_route->nexthop);
+        route_e->stale = true;
+        route_e->sb_route = sb_route;
+    }
+    sbrec_learned_route_index_destroy_row(filter);
+
+    struct re_nl_received_route_node *learned_route;
+    HMAP_FOR_EACH (learned_route, hmap_node, learned_routes) {
+        char *ip_prefix = normalize_v46_prefix(&learned_route->addr,
+                                               learned_route->plen);
+        char *nexthop = normalize_v46(&learned_route->nexthop);
+
+        const char *logical_port_name;
+        SSET_FOR_EACH (logical_port_name, bound_ports) {
+            const struct sbrec_port_binding *logical_port =
+                lport_lookup_by_name(sbrec_port_binding_by_name,
+                                     logical_port_name);
+            if (!logical_port) {
+                continue;
+            }
+            route_e = route_lookup_or_add(&sync_routes,
+                datapath,
+                logical_port, ip_prefix, nexthop);
+            route_e->stale = false;
+            if (!route_e->sb_route) {
+                sb_route = sbrec_learned_route_insert(ovnsb_idl_txn);
+                sbrec_learned_route_set_datapath(sb_route, datapath);
+                sbrec_learned_route_set_logical_port(sb_route, logical_port);
+                sbrec_learned_route_set_ip_prefix(sb_route, ip_prefix);
+                sbrec_learned_route_set_nexthop(sb_route, nexthop);
+                route_e->sb_route = sb_route;
+            }
+        }
+        free(ip_prefix);
+        free(nexthop);
+    }
+
+    HMAP_FOR_EACH_POP (route_e, hmap_node, &sync_routes) {
+        if (route_e->stale) {
+            sbrec_learned_route_delete(route_e->sb_route);
+        }
+        route_erase_entry(route_e);
+    }
+    hmap_destroy(&sync_routes);
+}
+
 void
 route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
                    struct route_exchange_ctx_out *r_ctx_out OVS_UNUSED)
@@ -57,7 +199,7 @@ route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
                              "%"PRId64": %s.",
                              vrf_name, ad->key,
                              ovs_strerror(error));
-                continue;
+                goto out;
             }
             sset_add(&_maintained_vrfs, vrf_name);
         } else {
@@ -67,7 +209,18 @@ route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
             sset_find_and_delete(&old_maintained_vrfs, vrf_name);
         }
 
-        re_nl_sync_routes(ad->key, &ad->routes);
+        re_nl_sync_routes(ad->key, &ad->routes,
+                          &received_routes);
+
+        sb_sync_learned_routes(ad->db, &received_routes,
+                               &ad->bound_ports,
+                               r_ctx_in->ovnsb_idl,
+                               r_ctx_in->ovnsb_idl_txn,
+                               r_ctx_in->sbrec_learned_route_by_datapath,
+                               r_ctx_in->sbrec_port_binding_by_name);
+
+out:
+        re_nl_received_routes_destroy(&received_routes);
     }
 
     /* Remove VRFs previously maintained by us not found in the above loop. */
diff --git a/controller/route-exchange.h b/controller/route-exchange.h
index 2c2a9ab84..d51fba598 100644
--- a/controller/route-exchange.h
+++ b/controller/route-exchange.h
@@ -18,6 +18,11 @@
 #include <stdbool.h>
 
 struct route_exchange_ctx_in {
+    /* We need the idl to check if a table exists. */
+    struct ovsdb_idl *ovnsb_idl;
+    struct ovsdb_idl_txn *ovnsb_idl_txn;
+    struct ovsdb_idl_index *sbrec_learned_route_by_datapath;
+    struct ovsdb_idl_index *sbrec_port_binding_by_name;
     /* Contains struct advertise_datapath_entry */
     struct hmap *announce_routes;
 };
diff --git a/lib/ovn-util.c b/lib/ovn-util.c
index ed847517a..507847280 100644
--- a/lib/ovn-util.c
+++ b/lib/ovn-util.c
@@ -822,6 +822,16 @@ normalize_v46_prefix(const struct in6_addr *prefix, unsigned int plen)
     }
 }
 
+char *
+normalize_v46(const struct in6_addr *prefix)
+{
+    if (IN6_IS_ADDR_V4MAPPED(prefix)) {
+        return normalize_ipv4_prefix(in6_addr_get_mapped_ipv4(prefix), 32);
+    } else {
+        return normalize_ipv6_prefix(prefix, 128);
+    }
+}
+
 char *
 str_tolower(const char *orig)
 {
diff --git a/lib/ovn-util.h b/lib/ovn-util.h
index 31c2c68df..8d8fd989b 100644
--- a/lib/ovn-util.h
+++ b/lib/ovn-util.h
@@ -207,6 +207,7 @@ bool ip46_parse(const char *ip_str, struct in6_addr *ip);
 char *normalize_ipv4_prefix(ovs_be32 ipv4, unsigned int plen);
 char *normalize_ipv6_prefix(const struct in6_addr *ipv6, unsigned int plen);
 char *normalize_v46_prefix(const struct in6_addr *prefix, unsigned int plen);
+char *normalize_v46(const struct in6_addr *prefix);
 
 /* Returns a lowercase copy of orig.
  * Caller must free the returned string.
diff --git a/tests/system-ovn.at b/tests/system-ovn.at
index faf29f53d..02d5ce7e1 100644
--- a/tests/system-ovn.at
+++ b/tests/system-ovn.at
@@ -14906,6 +14906,20 @@ blackhole 192.0.2.3 proto 84
 blackhole 192.0.2.10 proto 84
 blackhole 198.51.100.0/24 proto 84])
 
+# now we test route learning
+check_row_count Learned_Route 0
+check ip route add 233.252.0.0/24 via 192.168.10.10 dev lo onlink vrf ovnvrf1337
+# for now we trigger a recompute as route watching is not yet implemented
+check ovn-appctl -t ovn-controller inc-engine/recompute
+check ovn-nbctl --wait=hv sync
+check_row_count Learned_Route 1
+lp=$(ovn-sbctl --bare --columns _uuid list port_binding internet-phys)
+AT_CHECK_UNQUOTED([ovn-sbctl --columns ip_prefix,nexthop,logical_port --bare find Learned_Route], [0], [dnl
+233.252.0.0/24
+192.168.10.10
+$lp
+])
+
 OVS_APP_EXIT_AND_WAIT([ovn-controller])
 
 as ovn-sb
@@ -15110,6 +15124,20 @@ blackhole 192.0.2.3 proto 84
 blackhole 192.0.2.10 proto 84
 blackhole 198.51.100.0/24 proto 84])
 
+# now we test route learning
+check_row_count Learned_Route 0
+check ip route add 233.252.0.0/24 via 192.168.10.10 dev lo onlink vrf ovnvrf1337
+# for now we trigger a recompute as route watching is not yet implemented
+check ovn-appctl -t ovn-controller inc-engine/recompute
+check ovn-nbctl --wait=hv sync
+check_row_count Learned_Route 2
+lp=$(ovn-sbctl --bare --columns _uuid list port_binding internet-phys)
+AT_CHECK_UNQUOTED([ovn-sbctl --columns ip_prefix,nexthop,logical_port --bare find Learned_Route logical_port=$lp], [0], [dnl
+233.252.0.0/24
+192.168.10.10
+$lp
+])
+
 as ovn-sb
 OVS_APP_EXIT_AND_WAIT([ovsdb-server])
 

From patchwork Thu Jan  2 15:19:42 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029082
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=HHfS5TBH;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=HHfS5TBH;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=140.211.166.133; helo=smtp2.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp2.osuosl.org (smtp2.osuosl.org [140.211.166.133])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9Px6c3Hz1yTy
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:37 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp2.osuosl.org (Postfix) with ESMTP id 6B1AB404D4;
	Thu,  2 Jan 2025 15:20:36 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
 by localhost (smtp2.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id K5Q2RrZUYCKn; Thu,  2 Jan 2025 15:20:31 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp2.osuosl.org E350740A92
Authentication-Results: smtp2.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=HHfS5TBH;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=HHfS5TBH
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp2.osuosl.org (Postfix) with ESMTPS id E350740A92;
	Thu,  2 Jan 2025 15:20:30 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 983BEC0889;
	Thu,  2 Jan 2025 15:20:30 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp1.osuosl.org (smtp1.osuosl.org [IPv6:2605:bc80:3010::138])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 1935EC0889
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:29 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp1.osuosl.org (Postfix) with ESMTP id D2E9780E26
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:16 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id d0XcQLKCFaSh for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:20:14 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2614::61b;
 helo=eur05-db8-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp1.osuosl.org 1F3E580E03
Authentication-Results: smtp1.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp1.osuosl.org 1F3E580E03
Authentication-Results: smtp1.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=HHfS5TBH;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=HHfS5TBH
Received: from EUR05-DB8-obe.outbound.protection.outlook.com
 (mail-db8eur05on2061b.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2614::61b])
 by smtp1.osuosl.org (Postfix) with ESMTPS id 1F3E580E03
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:11 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=Id6nMo1nWUccjwNwQHiMR/tEb9S2Ic4iM3fWSyPhv6pfvQ/B8k0qKmfQ322PKX51ps3iM9xC6hGV3TbxnkuDFUX7pvSrUigzlK/hwmhv4tTlpKs+OLlHepRTMVdyi9K4sKX5ljBx63fOKIGhjEK6/mMimVdiRtNjvuOEJ+cgruS4SL2yYoN5HONMKvUdkV9oIjY1HwaDxLCrEmrG47uxvKqCRP7eU1AXawsGQWviD1bQfS9mXkZx69EWiZiHWp9+jbZyIL6ihiSqRJIVesQbCLSouTjEISGO6Mq2jsEwJncGUIv0M69DzN9OC/4Q1MLzYn8em98haCg3ZAOdUU1bCw==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=2PlZgVS5DsY41h4WtfNze9oEPkG3geTXLD/en28Z1xA=;
 b=FPYBn7W6miAK2SLjU40YFHdTOCf2v9HnEdmTe/yEkZehLF3bRbefXn+Fv8nmtCvyFe+urCMlLgjQwmOEdE/WVeKb1XWBsXn4Dhs1UBDgpAMLMBvQgZEfVV4X/jSwDh3CmlFqV6teHl19PkGTffP3LjC/Rs01ErtiIms2wiHWHLqKsv1mso2IkDz8NAn6bB5xKJDk5+droHf/c03uaw3ebfF6oeq1WBCiMV/L+HiQb0HCPe4qMFLDmp7ltDt7XNjeIs5PcmnH9NtN00Jcyr6EP9puQeqNJk1zmxT4bsgvpqF2gUOq/ebR3BTBFmXGL/9OYcz7SVNqwqbXAvvmU/yN9w==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=2PlZgVS5DsY41h4WtfNze9oEPkG3geTXLD/en28Z1xA=;
 b=HHfS5TBHtpRIG0NHhbR5OjeiTPAll5Yt2ntljNVkJ4ccnsUnYcSy6n57y0h8oXvqnSYMoE2uB8KBWhMzWnS73NHl0iYZJ2g2Qu4QBIETD0IFVKiobKWOGAje9vFFvr4aHHUr1vWLXp1CXlnsszoSwMVux0T8BLRPqtEHRkVAvr282m4bTD0lLjcABj3HE2wSaAqZtfFRWFYPMVBDFORNM4Wt1+SkAGszUJnjss71rKJegEpVh1oRdKQIuPo5KivRHZC+bCSbiXtrVYIgyW4129EoYpNq9dgLhPQiyzd0N4HUdlTLC0nIbMBYeEVBdtgBsiasf+aWndEuzphsWww/dQ==
Received: from AS4P251CA0008.EURP251.PROD.OUTLOOK.COM (2603:10a6:20b:5d2::16)
 by VE1PR10MB3887.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:800:161::20)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.12; Thu, 2 Jan
 2025 15:20:01 +0000
Received: from AM2PEPF0001C70E.eurprd05.prod.outlook.com
 (2603:10a6:20b:5d2:cafe::60) by AS4P251CA0008.outlook.office365.com
 (2603:10a6:20b:5d2::16) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8314.13 via Frontend Transport; Thu,
 2 Jan 2025 15:20:01 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 AM2PEPF0001C70E.mail.protection.outlook.com (10.167.16.202) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:19:54 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:19:59
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 51152607
X-ExclaimerImprintLatency: 49651138
X-ExclaimerImprintAction: caee2c4065f044f49f7391be35535e23
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=GQHw45MiFrd1+s+jDQEToznr+3sT2ZDtoUn5XE+Xh44ou+FAOHHi6DhZuEzxjf/JuNLdoyLaT+HYPGRHGr2lGzsHToF7Fz/IO51Ja29SoCzAYnEszw/I+5tM/IgQjdklBvfhz2PnBYqOwDfDD/6Z9PUfewGe66oVytKm8oqxi2NMz3qKaN8Kl+SSErOuWyr7CqKqlI62m7CVhzqdWrtWDUwK0PP5yYjNS4S6ZgTD4saGbWc4TE5lz3E6mdkeTPaskm0NqmVqrW95TKEF+j7Sclx57En4so8EfGx/aXFsAdXiIjX6k/PR4l00GlZ5pqeq4OEhsEJaRQwXO6W+Rpp3DA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=2PlZgVS5DsY41h4WtfNze9oEPkG3geTXLD/en28Z1xA=;
 b=tJLsVEhh9SNZ4jLjTUODLnw/bPcSXiKOAsQvTaF5OXWAv9cGzSlh34ua6ADjSxWDstkz/oV+sbMUBQ7O92vKcunIvCyCJQQgwgcMG6Nr4eRKHo3C0awpUH/DtrovYZi1jtqBbvBhjE7ERgMvi8JaVE/5ISN/XL12RA8QnP5FGd+wZKI+HADiV4S/dDjVJsfCfne8CONh2DKszaIOUjdGnuHJBtbCqYAF2uhl2fn92LL9orxncaMd45uYwz7fg0IpIf6BfHWy+f1fBW68hrxisHQQ/V28E2yNsdq7Z1pRciiszRCpr7BwVnEinNNmpFo6C+zxQbLfOi0gkPUJ4+7jpA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=2PlZgVS5DsY41h4WtfNze9oEPkG3geTXLD/en28Z1xA=;
 b=HHfS5TBHtpRIG0NHhbR5OjeiTPAll5Yt2ntljNVkJ4ccnsUnYcSy6n57y0h8oXvqnSYMoE2uB8KBWhMzWnS73NHl0iYZJ2g2Qu4QBIETD0IFVKiobKWOGAje9vFFvr4aHHUr1vWLXp1CXlnsszoSwMVux0T8BLRPqtEHRkVAvr282m4bTD0lLjcABj3HE2wSaAqZtfFRWFYPMVBDFORNM4Wt1+SkAGszUJnjss71rKJegEpVh1oRdKQIuPo5KivRHZC+bCSbiXtrVYIgyW4129EoYpNq9dgLhPQiyzd0N4HUdlTLC0nIbMBYeEVBdtgBsiasf+aWndEuzphsWww/dQ==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:43 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:43 +0000
Date: Thu, 2 Jan 2025 16:19:42 +0100
To: dev@openvswitch.org
Message-ID: 
 <67d97ceb0943d2b343ec0a5c3029f58547451987.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0116.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::20) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|AM2PEPF0001C70E:EE_|VE1PR10MB3887:EE_
X-MS-Office365-Filtering-Correlation-Id: 62c8dfd0-b594-47a9-d882-08dd2b40ec1f
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 vNEkQyD5/GbNCguaWu/KAKdW2VfVKL2AkWmNVSqLXOiUlDBe1jylme6R+qNACNaLZ9ifo2E4x3hE3RqbEXkgWGbIqbTzOd72XjidRL25ukIiTc9c5rxS4bcapidi3H0ZyyXn94s8KFGqs97g+Iu8AUsjg9ngeQYtQ24hAZ+7KHlpyOqL0hh6YgkyCVfW3xef2vSDIns35N+J7Bgp78UtA8pe25LOoeTSN5eBQUgacosIoNER8/uq6m0ksgdRSTXUe7ZHxFv/hUTwndpadWZ0FLvalmD35XEeJTeY9WGB9aUJmE014DXqnoIBthNTh93frnkQv0mcqdAjwJPp2Eabu10KV1lc6WPiywR450C8CPAqGBglegC0YK4NgsRY1a1oDVABcO4pmmp0WOZ0JYvqvBYX4x5JJ9GsnkwkG4fJmVqYINVX173zENs7Qu7NPkD5I4ocwJidx4e3f/CtQO6WVcfi6Vd84+c/oGHa5fE6ps7IjKb5izwbw0SfuQ6uSoJQAb6CwJR5t+G3aCtpbLeMsCQC3uEGcO79qU/cyFUBrX4EjNCV1aQCxr6xEYb9NMh1tIEd8ZqOS+WGD9UT75W94JkFpXGLUSaqxK+Tym/6F8XQu5fHHkHHec0P4Frc2GGG0kxNCsgczwkKqlu5fStDAHOVBG1WVAQ6w1CDMJAfkmuqjkUa6b9c1FKe3XS07GdUkxkr8a+JUqftlv4aezdM30hhjbNy16GaCQ/OzoVZ3CjCoP+S1qTrTg9PW0LIQxNRbYTJzbd/DGFiXAGKVL7BhDl454Pcu9swWn9EyVZ03asjJf5c/Li8RoFuMi1tECFKBtJUY7hRf1Eu/Or0OkKxgwMLwnuZFWdBHkDeCaj7sxN0+OM/67KYcO4H9tOuNj8HbQjID+0FL5GUcMx64i/RKJdMLVWdko4crgWOGPkMzJwTk2mz8ICTdpKnxP52arvCbMKOIuWh11uzV0/Va8v1t+j5YSvKc0CP+OYXOoSUIIvJQTZ+2BQr8YONer8cq/u98yd/vu9xKGPiiO0T4veWBZ9BjVL4e04LBQ3kLZ9gJmysKvtBW3UeqB4ZNnn80aNJfWyLo3i6jgI/SGrwCSUGeXtsBvF51TLkt/7dEJnK6mtr78xFCmpSPHVFO0jhTlrHqPx2BLfEXfFnI+X5egR7nZRZF2IbCCLPVUN1Jm2mT43pYP9xt604Xq2cB1jmvlRXnWfv56vZ6VaAaGpK87DexNmGRqhx9U3x4rMdpmFQqmLtcWoyNeCJF3be69j748xGV/6hbelnfE/viCRSHr3Yd5dOawYzj85iKQEGiLNRKOvs4mbT8rJ5DVhNeoo4EEZyQqswLJtfWlJsaYBWFSdR48D6m50hTIdCzZKcmCPF8YGWQpBCOuaFu3o59KQhZXXZ
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 AM2PEPF0001C70E.eurprd05.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 12d62db5-ca70-4590-2ac1-08dd2b40e29a
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|82310400026|35042699022|36860700013|14060799003|1800799024|376014;
X-Microsoft-Antispam-Message-Info: 
 9ZuaDQ1zFFBtmjZ2OpQRQ3s+ZXKu0SYfzCQN94snoXgLd9C6hCn3q6zzYOJx0lHfMbyiZSsqjskHPuQTvjjwkI3UB/0QzssGANzsYvdOcEK0ihFJl3E7PGZ7VupkloXQl14T1qB2rd83kdkp2aI7IuF2PssSLmmT51FdzD76r4FsywX/tx1zl9fSU4kKdA3TY9BaaNKFDnfhAYFa4oE+VBHPRy9Qwz3yFMKeQAXwM2cOq39EtkLBbCelTsgjkCsCgiBll+7vB9iXA8hwG0C40a0uXzpauzELYdiLGU6Zkx0glvQVWD1dX0wSIq4P/e5ho7p3hXpWM0l84ZioOQT0Ubqoa6RP2HabrYC4XX0elZ/jOrDXqtaKpRgwK5MT0mIx2G56ZnjYXP62K8bVVkS6VyDqIylHkmWR1gjQsSWozdigHBt4/7u/bk8bo0A2NYdauuD3vELAiIdqHuanowubwQxE/zTBgGUCMY75v492wR0KHeigNHAKy8CmYTt2LMOtoGUS4MDhHvVOugeNBHGWYrpjBpsoc96+hY2jDLFpnpUidVT1gP+A0LXOVb1/frg+I8KCdLIHqP82xbRWbdH659JG/qfFyF3fIHFfuEpQ9l5P81QMIkczWOT1oyDRJP8spxYLJaYk+KcWRqX6tKoFTCCU44uC9/w2AYvt4pgQEej7QHopugmcglRe49w/ElkZ5xVeP2loQuN68YHmhQNLCKyp5+uQCPDGcwdmfz29se0D9c5lMSineBYAGXn4oRK1A/G8xvS189UCGeJHEIuDt2Cz3TKuGM+2xUm05Xu48UyGo6VuFnhqH9nUuYBl1UbIr2o5qcuFf30Sffg46RdbThyjHoi6fa3p5AuORR0oOU7aiJ/urzoT1Kb4llTvCRLWcQYryVf8YI3loBE2IIo3Q9dVIcMUD5L+FjEqHNLhIXhYMKCFJ0VlnADLbYr5vrZM8RKmMc2K1ylY8nYDUHl3HHwpIp4VCYHJa7UOmwwvC5tX3U5jIt/8MtvFsL9HlZAa9yUPd7CQmGgBi01krjEx8h4iqNvdljlB7P8T7RDA/V8gQXdaZJWAyzjozi7bNkHvTItGw8+on56dEbupOwGwtlDRfbkgXfQwz695vjNBd9G7KCwJaQ+jPmCtuc7Q3zluVwMryiVJEvD/+Yy+7OWT6VQLVjrn/y++TvZcbO7sKhPTla22m7iY8Of1lOnK7nfjX3jLpB4nQmYEtLkZpG8SnkhMWYSlJoYgtVREpgz5ZuiI7zmBXxt+K7AQj3CgvKKH2Tx3z7dJdBx51lXoDhzCP8yewptdXkBQt1ZRhcHT3q6mwTS+T1RLm/uGw0MXLZf+A5dWN4Ag3MTtafxmWS8F8093Fq0gmdtfbm8A0rRX97frCIoTcInLW5zTHkH3c8ZCtEoH9n80u+Tuer+D3qNyq1W4aaalL9yKYhyKtxmMD5biT93F1HVHDBhUZJGnOHmkzF6MAXkRzY6vjh2LnrhsUCJJID8ur2wpu+1aWw9i8DY=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(82310400026)(35042699022)(36860700013)(14060799003)(1800799024)(376014);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:19:54.6045 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 62c8dfd0-b594-47a9-d882-08dd2b40ec1f
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 AM2PEPF0001C70E.eurprd05.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: VE1PR10MB3887
Subject: [ovs-dev] [RFC PATCH ovn v3 6/9] controller: Support learning
 routes per iface.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

Previously we just assumed that if a LR had multiple LRPs bound to the
local chassis that all routes where valid for all of these LRPs.
This commit handles a previous option in ovn-nb that allowes the user to
specify the interface name that a route needs to use to be acceptable
for a given LRP.
The users can then have a 1:1 relationship between LRPs and interfaces
to allow ovn-controller to determine which route belongs to which LRP.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 controller/route-exchange-netlink.c |  1 +
 controller/route-exchange-netlink.h |  2 ++
 controller/route-exchange.c         | 21 +++++++++++++++------
 controller/route.c                  | 12 +++++++++---
 controller/route.h                  |  6 ++++--
 tests/system-ovn.at                 | 25 +++++++++++++++++++++++--
 6 files changed, 54 insertions(+), 13 deletions(-)

diff --git a/controller/route-exchange-netlink.c b/controller/route-exchange-netlink.c
index c2a7551f3..9fea0d955 100644
--- a/controller/route-exchange-netlink.c
+++ b/controller/route-exchange-netlink.c
@@ -222,6 +222,7 @@ handle_route_msg_delete_routes(const struct route_table_msg *msg, void *data)
             rr->addr = rd->rta_dst;
             rr->plen = rd->rtm_dst_len;
             rr->nexthop = nexthop->addr;
+            memcpy(rr->ifname, nexthop->ifname, IFNAMSIZ);
         }
         return;
     }
diff --git a/controller/route-exchange-netlink.h b/controller/route-exchange-netlink.h
index 566b38fde..fca2429e6 100644
--- a/controller/route-exchange-netlink.h
+++ b/controller/route-exchange-netlink.h
@@ -18,6 +18,7 @@
 #include <stdint.h>
 #include "openvswitch/hmap.h"
 #include <netinet/in.h>
+#include <net/if.h>
 
 /* This value is arbitrary but currently unused.
  * See https://github.com/iproute2/iproute2/blob/main/etc/iproute2/rt_protos */
@@ -31,6 +32,7 @@ struct re_nl_received_route_node {
     struct in6_addr addr;
     unsigned int plen;
     struct in6_addr nexthop;
+    char ifname[IFNAMSIZ];
 };
 
 int re_nl_create_vrf(const char *ifname, uint32_t table_id);
diff --git a/controller/route-exchange.c b/controller/route-exchange.c
index febe13a8e..77d5ce51d 100644
--- a/controller/route-exchange.c
+++ b/controller/route-exchange.c
@@ -101,7 +101,7 @@ route_erase_entry(struct route_entry *route_e)
 static void
 sb_sync_learned_routes(const struct sbrec_datapath_binding *datapath,
                        const struct hmap *learned_routes,
-                       const struct sset *bound_ports,
+                       const struct smap *bound_ports,
                        struct ovsdb_idl *ovnsb_idl,
                        struct ovsdb_idl_txn *ovnsb_idl_txn,
                        struct ovsdb_idl_index *sbrec_learned_route_by_datapath,
@@ -121,8 +121,9 @@ sb_sync_learned_routes(const struct sbrec_datapath_binding *datapath,
     SBREC_LEARNED_ROUTE_FOR_EACH_EQUAL (sb_route, filter,
                                         sbrec_learned_route_by_datapath) {
         /* If the port is not local we don't care about it.
-         * Some other ovn-controller will handle it. */
-        if (!sset_contains(bound_ports,
+         * Some other ovn-controller will handle it.
+         * We may not use smap_get since the value might be validly NULL. */
+        if (!smap_get_node(bound_ports,
                            sb_route->logical_port->logical_port)) {
             continue;
         }
@@ -142,14 +143,22 @@ sb_sync_learned_routes(const struct sbrec_datapath_binding *datapath,
                                                learned_route->plen);
         char *nexthop = normalize_v46(&learned_route->nexthop);
 
-        const char *logical_port_name;
-        SSET_FOR_EACH (logical_port_name, bound_ports) {
+        struct smap_node *port_node;
+        SMAP_FOR_EACH (port_node, bound_ports) {
+            /* The user specified an ifname, but we learned it on a different
+             * port. */
+            if (port_node->value && strcmp(port_node->value,
+                                           learned_route->ifname)) {
+                continue;
+            }
+
             const struct sbrec_port_binding *logical_port =
                 lport_lookup_by_name(sbrec_port_binding_by_name,
-                                     logical_port_name);
+                                     port_node->key);
             if (!logical_port) {
                 continue;
             }
+
             route_e = route_lookup_or_add(&sync_routes,
                 datapath,
                 logical_port, ip_prefix, nexthop);
diff --git a/controller/route.c b/controller/route.c
index b3ff77b83..036a574d8 100644
--- a/controller/route.c
+++ b/controller/route.c
@@ -83,7 +83,7 @@ advertise_datapath_cleanup(struct advertise_datapath_entry *ad)
         free(ar);
     }
     hmap_destroy(&ad->routes);
-    sset_destroy(&ad->bound_ports);
+    smap_destroy(&ad->bound_ports);
     free(ad);
 }
 
@@ -91,6 +91,8 @@ void
 route_run(struct route_ctx_in *r_ctx_in,
           struct route_ctx_out *r_ctx_out)
 {
+    tracked_datapaths_destroy(r_ctx_out->tracked_re_datapaths);
+
     const struct local_datapath *ld;
     HMAP_FOR_EACH (ld, hmap_node, r_ctx_in->local_datapaths) {
         if (!ld->n_peer_ports || ld->is_switch) {
@@ -102,7 +104,7 @@ route_run(struct route_ctx_in *r_ctx_in,
         ad->key = ld->datapath->tunnel_key;
         ad->db = ld->datapath;
         hmap_init(&ad->routes);
-        sset_init(&ad->bound_ports);
+        smap_init(&ad->bound_ports);
 
         /* This is a LR datapath, find LRPs with route exchange options
          * that are bound locally. */
@@ -122,8 +124,12 @@ route_run(struct route_ctx_in *r_ctx_in,
                                           "maintain-vrf", false);
             ad->use_netns |= smap_get_bool(&repb->options,
                                        "use-netns", false);
+            char *ifname = nullable_xstrdup(
+                                    smap_get(&repb->options,
+                                             "dynamic-routing-ifname"));
             relevant_datapath = true;
-            sset_add(&ad->bound_ports, local_peer->logical_port);
+            smap_add_nocopy(&ad->bound_ports,
+                            xstrdup(local_peer->logical_port), ifname);
         }
 
         if (!relevant_datapath) {
diff --git a/controller/route.h b/controller/route.h
index 2a54cf3e3..4b71fa88a 100644
--- a/controller/route.h
+++ b/controller/route.h
@@ -19,6 +19,7 @@
 #include <netinet/in.h>
 #include "openvswitch/hmap.h"
 #include "sset.h"
+#include "smap.h"
 
 struct hmap;
 struct ovsdb_idl_index;
@@ -51,8 +52,9 @@ struct advertise_datapath_entry {
     bool use_netns;
     struct hmap routes;
     /* the name of the port bindings locally bound for this datapath and
-     * running route exchange logic. */
-    struct sset bound_ports;
+     * running route exchange logic.
+     * The key is the port name and the value is the ifname if set. */
+    struct smap bound_ports;
 };
 
 struct advertise_route_entry {
diff --git a/tests/system-ovn.at b/tests/system-ovn.at
index 02d5ce7e1..7ad666f20 100644
--- a/tests/system-ovn.at
+++ b/tests/system-ovn.at
@@ -14920,6 +14920,17 @@ AT_CHECK_UNQUOTED([ovn-sbctl --columns ip_prefix,nexthop,logical_port --bare fin
 $lp
 ])
 
+# by setting a learning interface filter we will now forget about this route
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
+      options:dynamic-routing-ifname=thisdoesnotexist
+check_row_count Learned_Route 0
+
+# chaning it to "lo" will allow us to learn the route again
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
+      options:dynamic-routing-ifname=lo
+check_row_count Learned_Route 1
+
+
 OVS_APP_EXIT_AND_WAIT([ovn-controller])
 
 as ovn-sb
@@ -15130,14 +15141,24 @@ check ip route add 233.252.0.0/24 via 192.168.10.10 dev lo onlink vrf ovnvrf1337
 # for now we trigger a recompute as route watching is not yet implemented
 check ovn-appctl -t ovn-controller inc-engine/recompute
 check ovn-nbctl --wait=hv sync
-check_row_count Learned_Route 2
+check_row_count Learned_Route 1
 lp=$(ovn-sbctl --bare --columns _uuid list port_binding internet-phys)
-AT_CHECK_UNQUOTED([ovn-sbctl --columns ip_prefix,nexthop,logical_port --bare find Learned_Route logical_port=$lp], [0], [dnl
+AT_CHECK_UNQUOTED([ovn-sbctl --columns ip_prefix,nexthop,logical_port --bare find Learned_Route], [0], [dnl
 233.252.0.0/24
 192.168.10.10
 $lp
 ])
 
+# by setting a learning interface filter we will now forget about this route
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
+      options:dynamic-routing-ifname=thisdoesnotexist
+check_row_count Learned_Route 0
+
+# chaning it to "lo" will allow us to learn the route again
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
+      options:dynamic-routing-ifname=lo
+check_row_count Learned_Route 1
+
 as ovn-sb
 OVS_APP_EXIT_AND_WAIT([ovsdb-server])
 

From patchwork Thu Jan  2 15:19:43 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029084
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=Ibc/u/tZ;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=Ibc/u/tZ;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=140.211.166.136; helo=smtp3.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp3.osuosl.org (smtp3.osuosl.org [140.211.166.136])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9QW2wrDz1yTy
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:21:07 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp3.osuosl.org (Postfix) with ESMTP id C2E3860801;
	Thu,  2 Jan 2025 15:21:05 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id dqTQyVqiPMSe; Thu,  2 Jan 2025 15:21:02 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 5BC77608FC
Authentication-Results: smtp3.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=Ibc/u/tZ;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=Ibc/u/tZ
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp3.osuosl.org (Postfix) with ESMTPS id 5BC77608FC;
	Thu,  2 Jan 2025 15:20:46 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 8B46AC0889;
	Thu,  2 Jan 2025 15:20:45 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp3.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 44BDBC0889
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:43 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp3.osuosl.org (Postfix) with ESMTP id 0238360858
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:18 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id PTEOdQj325xi for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:20:16 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2612::624;
 helo=eur05-am6-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp3.osuosl.org 1AAF260830
Authentication-Results: smtp3.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 1AAF260830
Received: from EUR05-AM6-obe.outbound.protection.outlook.com
 (mail-am6eur05on20624.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2612::624])
 by smtp3.osuosl.org (Postfix) with ESMTPS id 1AAF260830
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:15 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=P7tK9a8sBH+15XAPMwd0XGeo1wIQyejVumVXlN2kw0e9TemQJNiOA4zuUd8pnNxQiaYthqjl/MhVDaZcS5A0QvPQfcnuKVaCfKQE0oSeEiFDTH1Kfec51lYbBcyFHLauWbxnOu0qzCztH0luMNdiTWaZY6ywJRTuYLYmL9dPTrbTeSFBmSLkjFt/bV3uXDLJ9iySq8+gV/scmKYs2W8K1woXZtmQ6d2ImF5xiMllqjWUR8wqvvyObF9mkzzu1CvCFwTgtHF9zymkB9ELK8OROKJ8c7AO8gajkVPo3JfWfnh+IkkikY0Rbnv05AQXvT1HQI/peK4U0zyJ6C4TXLNo/w==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=2tYgCiGl7bn9Ty175g1wrsOlviFT+TrwXBBgbagFPTc=;
 b=D+wtNkvxJU3GxJlseCHtL2xr2Cb83g3b5Xfoi283ZJYblPxfA28xqmXDMWUjehY5NoVy2MvV9wbHeo6Gu7QtU0+e0TI00d6bud5LSYBxvTTNowtNnvPfW1hpgTSLNIZmSkaaYHhaREka0H3jnTRAEfS4XCLFgWNgaRJTDjmMVBg9WxzFqcX+OZVcGGSfQ8E0zdHmJ3T7LnObmAi6KmFm4YLthnARPPfFw9y8zTRRSGz4KNxQ4l2L/6ocC70HZrFzXzVTKBzX8PiGGtKZDe9jc0iu6n+5Jt9dgUir9riOxc7tety8qEOX6B3LK31CgbiJzN9ybjkfPMWEOLO1Wn0ZYg==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=2tYgCiGl7bn9Ty175g1wrsOlviFT+TrwXBBgbagFPTc=;
 b=Ibc/u/tZrHk4lfX68JFnEgY5h1hAhnEQlsffVh2by/rg8969aMVGk6ljPzwt2QEm74oYeUI4etiQ2Zuu6mwldg2tLIj+Hh//FHhk0K+zm1mhvRojvNtVT360MQJ/GeskBEHNJ+rjELJtwpDbiER7KSsrttlqe3GDfJ72HY4iBHCvR2dKyDNUS2HxzJsrwNqctRs0Y4yJPaw1VHBNPQtlDHT4LPSgA7wirAngKVsw7zfVFSHH6EvSKW55dXtMqdpjEEBqZ4PYnYz6BhXqKHaj4mruqhIlv5lI9AJrgHExVyMcL/2sUQexRFy7M2w9l7HKxj8CJbKe7ZLylQUpDzXKgQ==
Received: from DB9PR06CA0024.eurprd06.prod.outlook.com (2603:10a6:10:1db::29)
 by PR3PR10MB4141.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:95::21)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.12; Thu, 2 Jan
 2025 15:20:03 +0000
Received: from DB1PEPF000509F1.eurprd03.prod.outlook.com
 (2603:10a6:10:1db:cafe::6d) by DB9PR06CA0024.outlook.office365.com
 (2603:10a6:10:1db::29) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8314.13 via Frontend Transport; Thu,
 2 Jan 2025 15:20:03 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DB1PEPF000509F1.mail.protection.outlook.com (10.167.242.75) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8293.12 via Frontend Transport; Thu, 2 Jan 2025 15:20:02 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:20:02
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 8317305
X-ExclaimerImprintLatency: 6066034
X-ExclaimerImprintAction: 0d5509e00fa1484e920389173c52e321
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=ZVFPPauZ/3QqbJDWoVVQpSeVcZMPNGYWGcdWKXxgUjVbaEJ//F1w28/mLU2RKXJ9nkzG1xLc2mKi0AgTA9lCOT/Hi5FqLgo6iy9V0ZxWZz5ZJg/tB8wcF4duVnc3xmWcHhitrg7lNbd+EXWsLza9kpVME3W2iIRWniZBr9f532uBtXrlZ0SGE+bcmHAdozJqM/3Evi0gCex6TmqGBW6vdPSRONV3GDsEECHVmvdhC40bxnb8q4wdZHWxDtwAt7ARDqRqsELsra4eP9ir+jjfYH/CML8ggneMwKARIUDJL3ZnVRxcPxkyV1oO301EhL2SRBKa31hXK/y/KCL1+wpFPw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=2tYgCiGl7bn9Ty175g1wrsOlviFT+TrwXBBgbagFPTc=;
 b=XnOyVzxrUUAlMb+DVKHrp+NLDlcnf2YDynBaaVTCBZor4KJ3ZvnQwgkzPZSddcDpG/clGJj2nTtYaEQg/6ECKOxC0J/LYtrcJ1EYvBcA3ueFy880X4YvIgBwGr9J9z5600LhmvAavQboevl5IawrIDzVS2bbmpjkcyk3JvVYPSZgHmVkNFDn5BZ8cOj+24ususQiv0eez0+7B80QyFz1myafsv+HFqO1frd9KGOByOxh6TaYw1rTSfA5p11fP38SIt4zprNcsnwesFuS220JMZOLB2GV1InTnY3zZOD/S5xMMZAA680TmSuIELQ5rkt+xHwuo8Lrpcm3IlOqJagX1Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=2tYgCiGl7bn9Ty175g1wrsOlviFT+TrwXBBgbagFPTc=;
 b=Ibc/u/tZrHk4lfX68JFnEgY5h1hAhnEQlsffVh2by/rg8969aMVGk6ljPzwt2QEm74oYeUI4etiQ2Zuu6mwldg2tLIj+Hh//FHhk0K+zm1mhvRojvNtVT360MQJ/GeskBEHNJ+rjELJtwpDbiER7KSsrttlqe3GDfJ72HY4iBHCvR2dKyDNUS2HxzJsrwNqctRs0Y4yJPaw1VHBNPQtlDHT4LPSgA7wirAngKVsw7zfVFSHH6EvSKW55dXtMqdpjEEBqZ4PYnYz6BhXqKHaj4mruqhIlv5lI9AJrgHExVyMcL/2sUQexRFy7M2w9l7HKxj8CJbKe7ZLylQUpDzXKgQ==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:45 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:45 +0000
Date: Thu, 2 Jan 2025 16:19:43 +0100
To: dev@openvswitch.org
Message-ID: 
 <86daea0d0d51d1d9504277d02f3f0c9b1f2804ff.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0110.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::7) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|DB1PEPF000509F1:EE_|PR3PR10MB4141:EE_
X-MS-Office365-Filtering-Correlation-Id: bb915542-5027-4795-eb0a-08dd2b40ee19
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 NXvrl+WjI7lUBJP6CnrHc4bJ5Y1i4W07PUeeUaDJ9gvFlFTkIKVlTbfebaNuvPgAHpDQZMOMltc3+vlQRgmbRLsqV+mYnw5yJnXUSr2FcyWtT2h2xY+yGyTVDAUlHaKMUJjwpQH1aRBFBRzc1lyT9kJSCQJKIQjZAejS/SZ5/g9P9JxX6WzeQVNj7F3zKOe9PJTEso1tn6FMygwmjc9BENQOS8QyPKedlhL81dRMqzfIfcjJ8AmXJ2aQ4ob59IJBZc+oAIjxbwDlPcrKLCvyh99qzLxISOOz8SmK1/tUA+tgPy48FeAADqffdEMzP/8KBZ6bvRlTjzfyPIcF3OEb79usrILBlkon6xFy9YtjijZQ+UutVKK9IpB6j8yTLci7UDcZ/sN/osq7VyBrprGftjxD/Pe0ITNJ2tnyGjb706o9Sponp3dffsXAZ34ihGHnXhGPTvi6Qk/JLoeybFXNAJEpd9UFlnvU5B0xlSJ8E2k111zG2fAdja6cy77ZgkLAKD6D372csf4LBqIedA+/CJ8lJFNqZxf33vVDTtOnpEfRQFbH2g01C7wJj59+nH3ZvmsPDfRH4I3d7KgsHs0MREu5uhua7eJn9FGV0g9eSFOQS4QiZf3aIjWyxASEDA5zJhWCHmuEh9RCYL9xO1XAWRmG+skoWak8e4+u4c0bA6xIrRFyDZqpCeXtzHICDYswAF9CqHD3sH/WRLCUECX8+ZL1jWeDfz0B4UbVpU/XsKBKDMKeoMaywYPpAxOOT0EHlrzSn6jwXagJbVbeyzisrcN8Hddo0tTsECr2sMpP8SYo22qQQ7mpn7EbG4CEqNU7mV9DDFnVU/aVm7liXh4qgdPfeix5JALWEmvgt+dy5W/H8XLNQ+Ll+jOiTTc6utelt2eaXNXl8tCbqfBPsQnzKw/ERXt/3wKGazrThw8cfb2QxWjE+K/Bze+mldy/q7xN1geJ1DuB2sn0RCbHOn6v8J7N4MTnF3/rUFmCVU3z8ls9V2T+BQMQwPOy9tM+xPYjQGnZUGk0dfI65te73gFNCCpm3o8E1qBX9ECPGc1bcRuGnbOE79e7d0MpU2DIMLOPX9FFokoX39VJQrygFYQPveIQ73+seXOSXOvifn1oeF4q9HUoDUpLtWuZqNFnnxhdbF56hLqDNlruxT2MFp/WItyauvdK3JgI7fldnAqoKM3mjs3oKxNwtj240vDYYmYUOxNg0opDJeUJffTNIfsSkeV075HZASSknefDGUS60wgPRdKQKMd5SKEh2fo/w1Gy+WYadQ1bPFeDthQ/X+OPspoLgM+yroO/JSt26/UJ+AC9iGVThbs2jhLW/KojVFBQElqdPru59GhjnJNSi2G7SYRds861DkE8P6q+NRYvpwxPVDdF0n/WvWq2+Xz7Rp9L
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DB1PEPF000509F1.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 d0ff2054-bb80-4ebd-6f92-08dd2b40e38c
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|1800799024|14060799003|376014|36860700013|82310400026|35042699022;
X-Microsoft-Antispam-Message-Info: 
 Yu6cbs0Ec9HtipLBKbNzXabu8XxEZgCaEBhkoYR1v+41IWnlKL+rakRokX8dZfe/bf6AT3pXNScyeDFDTXfnobvBjMkleP8faUpeNNCyY2WM39trbuybPM0ggI3rPCNlEEE++t4697EtOIm1r9IS1UhBUZ60WGs8SiP34/RvOtDUGPZHX7Ved1mkE/Z24cVx7saZtOuyWSa6nN9LnlLia0FaTDs80VksT1QHegDmUUXZ82OLYrCPlgJvyl5hdMvo5XZ8i8xOc5cBslI22Z/ED9SC532pLZkCmOyBmfaSmxF2Gn5t/WscMOykv8Y8ZBmCAW+Q8Xqi0newiako0P/Cnm+S3P26vnp4ggVZc7SXW4bzRTsBUMmebyR5/4XzLOJpHJSy1MGMEQp+qoMo6kam9+KlYQMtgrGjh843MJ/DsDJ2LzqtDCo87hxpZvRiqkdWg9GP908Q17y6BXtM+DG/orG+NcYEpmjYmb2DluZ1ou5wg87+LjzlFwXaV0WeCB+MffDtFqvHr6qf9v0qwqsHh/ce7crvRvc2pw945xl/6pcBchx6su2e8ZkX0MFll5MDvQ+KH5g7A3vaKVKIK6KAgqhnr04XswmrvO8jTPuoKQuPW+AnYaBJziHhcSp39Id8dbNIVez1X8nYxCxp6H50HelsIkdjSAzvVdM2O521NCJjlKVGwodNASL7tBbQasCIGiamy+ybB9tqD2kAd2FN2uDxJQM7D41ljn0wwf9OLHw9Ht7HrjJomBaH5n48i/IlSfzDsnn1+1/m9bc1/WAXMN2A/Ac42248JwfW8PvrMgmTHANH0LYIlRPTxns1IGzgfmdW7A5kriVtvIk2cB22JuLHmJaGA3fVVyfr9o8l5tQO/o4n7YqVgo7uTappKD7EhZoy4NMX14kuTiqRbgzf0QiuPb5zp4jKyMEY1uvtEqHLCqnK1VEfznQaRk1CMOW1dBp0kpWBbey1vcxUBRy4cZdvERAtmcjhRR1kulVQS4XOVxaIsUGjzzyFw6wuJ+L0mJPDlfsEAr1YZMndBiw3U26bKUuiO2CZMdk4EOw2YZK8qPCoRTUDKXRmGcIrrixY2lMyyWw3VY5xDomI12TLf+ASXWmawzvVW82KQ0Kl3NVOrvXKRzlIavcrE6OeS/ajUNbKD6F/NmjnzRadKHeApfcwtSmO8vDeOjPcVvonAu/W51NMqHiV34coLT7QXXn8tmJCHdRNOIPU1DjHbuems32zDWIxNI4TU+8AMxymC7pX+pD/Il3CZjYPDt2UA4KVGklnqWdClPGPQ0ifOfi9bcEBWerrCHcs8a8F1EsguoF5d8Z3kicFJE0/t2Jvz553yEBBoi/RIyKE5aPJL+29iNk3VjdCFMBnyqmmSbZrpBUV+oYAtHvc8y5HoNQivamn2vtHlL4F4GIZeAvYvK+sJVEnNi28zZHXN7wbbMJgssmgITKkgoUPNDu8AqyX7EAVYNZp8bJ12EGNEw37AzO7xs0tnKotW30zcCRLS2C9ACA=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(1800799024)(14060799003)(376014)(36860700013)(82310400026)(35042699022);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:20:02.2337 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 bb915542-5027-4795-eb0a-08dd2b40ee19
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DB1PEPF000509F1.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: PR3PR10MB4141
Subject: [ovs-dev] [RFC PATCH ovn v3 7/9] controller: Prioritize host routes.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

northd allows us to announce host routes instead of connected routes of
LRs.

For the host routes we also know the LSP that host the address.
We can then check if this LSP is pointing to a LRP that is also local to
the current chassis, so if a LR is chained behind an LR and both use
chassisredirect ports.
In this case we can announce the route with a more preferable priority
than otherwise.

This helps in the following case:
* the backend router is bound on only a single chassis
* the frontend router is bound to multiple chassis (with multiple LRPs)
* one of the chassis of the frontend router matches the backend router

In this case it would be preferable if the network fabric sends the
traffic to the chassis that hosts both the frontend and backend router.
Other chassis would work as well, but then OVN would redirect the
traffic from one chassis to the other.
So this allows us to skip tunneling traffic in one case.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 controller/ovn-controller.c         | 51 ++++++++++++++++++++
 controller/route-exchange-netlink.c | 21 ++++----
 controller/route-exchange-netlink.h |  4 +-
 controller/route.c                  | 48 ++++++++++++++++++-
 controller/route.h                  | 13 +++++
 tests/system-ovn.at                 | 74 +++++++++++++++++++++++------
 6 files changed, 186 insertions(+), 25 deletions(-)

diff --git a/controller/ovn-controller.c b/controller/ovn-controller.c
index 77c85086d..f90ab1f59 100644
--- a/controller/ovn-controller.c
+++ b/controller/ovn-controller.c
@@ -4832,6 +4832,13 @@ struct ed_type_route {
     /* Contains struct tracked_datapath entries for local datapaths subject to
      * route exchange. */
     struct hmap tracked_route_datapaths;
+
+    /* Contains the tracked_ports that in the last run where bound locally */
+    struct sset tracked_ports_local;
+
+    /* Contains the tracked_ports that in the last run where bound not local */
+    struct sset tracked_ports_remote;
+
     /* Contains struct advertise_datapath_entry */
     struct hmap announce_routes;
 };
@@ -4880,6 +4887,8 @@ en_route_run(struct engine_node *node, void *data)
 
     struct route_ctx_out r_ctx_out = {
         .tracked_re_datapaths = &re_data->tracked_route_datapaths,
+        .tracked_ports_local = &re_data->tracked_ports_local,
+        .tracked_ports_remote = &re_data->tracked_ports_remote,
         .announce_routes = &re_data->announce_routes,
     };
 
@@ -4896,6 +4905,8 @@ en_route_init(struct engine_node *node OVS_UNUSED,
     struct ed_type_route *data = xzalloc(sizeof *data);
 
     hmap_init(&data->tracked_route_datapaths);
+    sset_init(&data->tracked_ports_local);
+    sset_init(&data->tracked_ports_remote);
     hmap_init(&data->announce_routes);
 
     return data;
@@ -4907,6 +4918,8 @@ en_route_cleanup(void *data)
     struct ed_type_route *re_data = data;
 
     tracked_datapaths_destroy(&re_data->tracked_route_datapaths);
+    sset_destroy(&re_data->tracked_ports_local);
+    sset_destroy(&re_data->tracked_ports_remote);
     route_cleanup(&re_data->announce_routes);
     hmap_destroy(&re_data->announce_routes);
 }
@@ -4954,6 +4967,26 @@ route_sb_port_binding_data_handler(struct engine_node *node, void *data)
     const struct sbrec_port_binding_table *pb_table =
         EN_OVSDB_GET(engine_get_input("SB_port_binding", node));
 
+    const struct ovsrec_open_vswitch_table *ovs_table =
+        EN_OVSDB_GET(engine_get_input("OVS_open_vswitch", node));
+    const char *chassis_id = get_ovs_chassis_id(ovs_table);
+    ovs_assert(chassis_id);
+
+    struct ovsdb_idl_index *sbrec_chassis_by_name =
+        engine_ovsdb_node_get_index(
+                engine_get_input("SB_chassis", node),
+                "name");
+    const struct sbrec_chassis *chassis
+        = chassis_lookup_by_name(sbrec_chassis_by_name, chassis_id);
+    ovs_assert(chassis);
+
+    struct ovsdb_idl_index *sbrec_port_binding_by_name =
+        engine_ovsdb_node_get_index(
+                engine_get_input("SB_port_binding", node),
+                "name");
+    struct ed_type_runtime_data *rt_data =
+        engine_get_input_data("runtime_data", node);
+
     const struct sbrec_port_binding *sbrec_pb;
     SBREC_PORT_BINDING_TABLE_FOR_EACH_TRACKED (sbrec_pb, pb_table) {
         struct tracked_datapath *re_t_dp =
@@ -4971,6 +5004,24 @@ route_sb_port_binding_data_handler(struct engine_node *node, void *data)
             return false;
         }
 
+        if (sset_contains(&re_data->tracked_ports_local,
+                          sbrec_pb->logical_port)) {
+            if (!find_route_exchange_pb(sbrec_port_binding_by_name, chassis,
+                                        &rt_data->active_tunnels, sbrec_pb)) {
+                /* The port was previously local but now it no longer is. */
+                return false;
+            }
+        }
+
+        if (sset_contains(&re_data->tracked_ports_remote,
+                          sbrec_pb->logical_port)) {
+            if (find_route_exchange_pb(sbrec_port_binding_by_name, chassis,
+                                       &rt_data->active_tunnels, sbrec_pb)) {
+                /* The port was previously remote but now we bound it. */
+                return false;
+            }
+        }
+
     }
     return true;
 }
diff --git a/controller/route-exchange-netlink.c b/controller/route-exchange-netlink.c
index 9fea0d955..f4428009e 100644
--- a/controller/route-exchange-netlink.c
+++ b/controller/route-exchange-netlink.c
@@ -102,7 +102,8 @@ re_nl_delete_vrf(const char *ifname)
 
 static int
 modify_route(uint32_t type, uint32_t flags_arg, uint32_t table_id,
-             const struct in6_addr *dst, unsigned int plen)
+             const struct in6_addr *dst, unsigned int plen,
+             unsigned int priority)
 {
     uint32_t flags = NLM_F_REQUEST | NLM_F_ACK;
     bool is_ipv4 = IN6_IS_ADDR_V4MAPPED(dst);
@@ -128,6 +129,7 @@ modify_route(uint32_t type, uint32_t flags_arg, uint32_t table_id,
     rt->rtm_dst_len = plen;
 
     nl_msg_put_u32(&request, RTA_TABLE, table_id);
+    nl_msg_put_u32(&request, RTA_PRIORITY, priority);
 
     if (is_ipv4) {
         nl_msg_put_be32(&request, RTA_DST, in6_addr_get_mapped_ipv4(dst));
@@ -143,7 +145,7 @@ modify_route(uint32_t type, uint32_t flags_arg, uint32_t table_id,
 
 int
 re_nl_add_route(uint32_t table_id, const struct in6_addr *dst,
-                unsigned int plen)
+                unsigned int plen, unsigned int priority)
 {
     uint32_t flags = NLM_F_CREATE | NLM_F_EXCL;
     uint32_t type = RTM_NEWROUTE;
@@ -155,12 +157,12 @@ re_nl_add_route(uint32_t table_id, const struct in6_addr *dst,
         return EINVAL;
     }
 
-    return modify_route(type, flags, table_id, dst, plen);
+    return modify_route(type, flags, table_id, dst, plen, priority);
 }
 
 int
 re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
-                   unsigned int plen)
+                   unsigned int plen, unsigned int priority)
 {
     if (!TABLE_ID_VALID(table_id)) {
         VLOG_WARN_RL(&rl,
@@ -169,7 +171,7 @@ re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
         return EINVAL;
     }
 
-    return modify_route(RTM_DELROUTE, 0, table_id, dst, plen);
+    return modify_route(RTM_DELROUTE, 0, table_id, dst, plen, priority);
 }
 
 static uint32_t
@@ -230,13 +232,15 @@ handle_route_msg_delete_routes(const struct route_table_msg *msg, void *data)
     uint32_t arhash = advertise_route_hash(&rd->rta_dst, rd->rtm_dst_len);
     HMAP_FOR_EACH_WITH_HASH (ar, node, arhash, routes) {
         if (ipv6_addr_equals(&ar->addr, &rd->rta_dst)
-                && ar->plen == rd->rtm_dst_len) {
+                && ar->plen == rd->rtm_dst_len
+                && ar->priority == rd->rta_priority) {
             ar->installed = true;
             return;
         }
     }
+
     err = re_nl_delete_route(rd->rta_table_id, &rd->rta_dst,
-                             rd->rtm_dst_len);
+                             rd->rtm_dst_len, rd->rta_priority);
     if (err) {
         char addr_s[INET6_ADDRSTRLEN + 1];
         VLOG_WARN_RL(&rl, "Delete route table_id=%"PRIu32" dst=%s plen=%d: %s",
@@ -273,7 +277,8 @@ re_nl_sync_routes(uint32_t table_id,
         if (ar->installed) {
             continue;
         }
-        int err = re_nl_add_route(table_id, &ar->addr, ar->plen);
+        int err = re_nl_add_route(table_id, &ar->addr, ar->plen,
+                                  ar->priority);
         if (err) {
             char addr_s[INET6_ADDRSTRLEN + 1];
             VLOG_WARN_RL(&rl, "Add route table_id=%"PRIu32" dst=%s "
diff --git a/controller/route-exchange-netlink.h b/controller/route-exchange-netlink.h
index fca2429e6..13346e944 100644
--- a/controller/route-exchange-netlink.h
+++ b/controller/route-exchange-netlink.h
@@ -39,9 +39,9 @@ int re_nl_create_vrf(const char *ifname, uint32_t table_id);
 int re_nl_delete_vrf(const char *ifname);
 
 int re_nl_add_route(uint32_t table_id, const struct in6_addr *dst,
-                    unsigned int plen);
+                    unsigned int plen, unsigned int priority);
 int re_nl_delete_route(uint32_t table_id, const struct in6_addr *dst,
-                       unsigned int plen);
+                       unsigned int plen, unsigned int priority);
 
 void re_nl_dump(uint32_t table_id);
 
diff --git a/controller/route.c b/controller/route.c
index 036a574d8..53349821f 100644
--- a/controller/route.c
+++ b/controller/route.c
@@ -33,6 +33,9 @@ static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);
  * in the corresponding VRF interface name. */
 #define MAX_TABLE_ID 1000000000
 
+#define PRIORITY_DEFAULT 1000
+#define PRIORITY_LOCAL_BOUND 100
+
 bool
 route_exchange_relevant_port(const struct sbrec_port_binding *pb)
 {
@@ -46,7 +49,7 @@ advertise_route_hash(const struct in6_addr *dst, unsigned int plen)
     return hash_int(plen, hash);
 }
 
-static const struct sbrec_port_binding*
+const struct sbrec_port_binding*
 find_route_exchange_pb(struct ovsdb_idl_index *sbrec_port_binding_by_name,
                        const struct sbrec_chassis *chassis,
                        const struct sset *active_tunnels,
@@ -74,6 +77,29 @@ find_route_exchange_pb(struct ovsdb_idl_index *sbrec_port_binding_by_name,
     return NULL;
 }
 
+static bool
+pb_is_local(struct ovsdb_idl_index *sbrec_port_binding_by_name,
+            const struct sbrec_chassis *chassis,
+            const struct sset *active_tunnels,
+            const char *port_name)
+{
+    if (lport_is_chassis_resident(sbrec_port_binding_by_name, chassis,
+                                active_tunnels, port_name)) {
+        return true;
+    }
+
+    const struct sbrec_port_binding *pb = lport_lookup_by_name(
+        sbrec_port_binding_by_name, port_name);
+
+    const char *crp = smap_get(&pb->options, "chassis-redirect-port");
+    if (!crp) {
+        return NULL;
+    }
+
+    return lport_is_chassis_resident(sbrec_port_binding_by_name, chassis,
+                                     active_tunnels, crp);
+}
+
 static void
 advertise_datapath_cleanup(struct advertise_datapath_entry *ad)
 {
@@ -92,6 +118,8 @@ route_run(struct route_ctx_in *r_ctx_in,
           struct route_ctx_out *r_ctx_out)
 {
     tracked_datapaths_destroy(r_ctx_out->tracked_re_datapaths);
+    sset_clear(r_ctx_out->tracked_ports_local);
+    sset_clear(r_ctx_out->tracked_ports_remote);
 
     const struct local_datapath *ld;
     HMAP_FOR_EACH (ld, hmap_node, r_ctx_in->local_datapaths) {
@@ -176,11 +204,29 @@ route_run(struct route_ctx_in *r_ctx_in,
                 continue;
             }
 
+            unsigned int priority = PRIORITY_DEFAULT;
+
+            if (route->tracked_port) {
+                if (pb_is_local(
+                          r_ctx_in->sbrec_port_binding_by_name,
+                          r_ctx_in->chassis,
+                          r_ctx_in->active_tunnels,
+                          route->tracked_port->logical_port)) {
+                    priority = PRIORITY_LOCAL_BOUND;
+                    sset_add(r_ctx_out->tracked_ports_local,
+                             route->tracked_port->logical_port);
+                } else {
+                    sset_add(r_ctx_out->tracked_ports_remote,
+                             route->tracked_port->logical_port);
+                }
+            }
+
             struct advertise_route_entry *ar = xzalloc(sizeof(*ar));
             hmap_insert(&ad->routes, &ar->node,
                         advertise_route_hash(&prefix, plen));
             ar->addr = prefix;
             ar->plen = plen;
+            ar->priority = priority;
         }
         sbrec_advertised_route_index_destroy_row(route_filter);
 
diff --git a/controller/route.h b/controller/route.h
index 4b71fa88a..ef08312cb 100644
--- a/controller/route.h
+++ b/controller/route.h
@@ -39,6 +39,13 @@ struct route_ctx_in {
 
 struct route_ctx_out {
     struct hmap *tracked_re_datapaths;
+
+    /* Contains the tracked_ports that in the last run where bound locally */
+    struct sset *tracked_ports_local;
+
+    /* Contains the tracked_ports that in the last run where bound not local */
+    struct sset *tracked_ports_remote;
+
     /* Contains struct advertise_datapath_entry */
     struct hmap *announce_routes;
 };
@@ -61,11 +68,17 @@ struct advertise_route_entry {
     struct hmap_node node;
     struct in6_addr addr;
     unsigned int plen;
+    unsigned int priority;
     /* used by the route-exchange module to determine if the route is
      * already installed */
     bool installed;
 };
 
+const struct sbrec_port_binding *find_route_exchange_pb(
+    struct ovsdb_idl_index *sbrec_port_binding_by_name,
+    const struct sbrec_chassis *chassis,
+    const struct sset *active_tunnels,
+    const struct sbrec_port_binding *pb);
 bool route_exchange_relevant_port(const struct sbrec_port_binding *pb);
 uint32_t advertise_route_hash(const struct in6_addr *dst, unsigned int plen);
 void route_run(struct route_ctx_in *,
diff --git a/tests/system-ovn.at b/tests/system-ovn.at
index 7ad666f20..08a9dc418 100644
--- a/tests/system-ovn.at
+++ b/tests/system-ovn.at
@@ -14887,8 +14887,8 @@ ovnvrf1337 1337
 # ip route list output has a trailing space on each line
 # the awk magic removes all trailing spaces.
 OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
-blackhole 192.0.2.0/24 proto 84
-blackhole 198.51.100.0/24 proto 84])
+blackhole 192.0.2.0/24 proto 84 metric 1000
+blackhole 198.51.100.0/24 proto 84 metric 1000])
 
 # we now switch to announcing host routes and expect 192.0.2.0/24 to be gone
 # and the following to be added:
@@ -14896,15 +14896,39 @@ blackhole 198.51.100.0/24 proto 84])
 # * 192.0.2.2/32
 # * 192.0.2.3/32
 # * 192.0.2.10/32
+# the last 3 of them are local to the current chassis so we expect a better
+# prio.
 check ovn-nbctl --wait=hv set Logical_Router_Port internet-public \
                          options:dynamic-routing-connected-as-host-routes=true
 
 OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
-blackhole 192.0.2.1 proto 84
-blackhole 192.0.2.2 proto 84
-blackhole 192.0.2.3 proto 84
-blackhole 192.0.2.10 proto 84
-blackhole 198.51.100.0/24 proto 84])
+blackhole 192.0.2.1 proto 84 metric 1000
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000])
+
+# if the pr1-public lrp is now removed from this hypervisor the route metric
+# will go back to the default.
+# For this we just schedule it on a non existing chassis
+check ovn-nbctl lrp-del-gateway-chassis pr1-public hv1
+check ovn-nbctl --wait=hv lrp-set-gateway-chassis pr1-public hv123
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 1000
+blackhole 192.0.2.2 proto 84 metric 1000
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 1000
+blackhole 198.51.100.0/24 proto 84 metric 1000])
+
+# moving pr1-public back will also change the route metrics again
+check ovn-nbctl lrp-del-gateway-chassis pr1-public hv123
+check ovn-nbctl --wait=hv lrp-set-gateway-chassis pr1-public hv1
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 1000
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000])
 
 # now we test route learning
 check_row_count Learned_Route 0
@@ -15114,8 +15138,8 @@ ovnvrf1337 1337
 # ip route list output has a trailing space on each line
 # the awk magic removes all trailing spaces.
 OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
-blackhole 192.0.2.0/24 proto 84
-blackhole 198.51.100.0/24 proto 84])
+blackhole 192.0.2.0/24 proto 84 metric 1000
+blackhole 198.51.100.0/24 proto 84 metric 1000])
 
 # we now switch to announcing host routes and expect 192.0.2.0/24 to be gone
 # and the following to be added:
@@ -15129,11 +15153,33 @@ check ovn-nbctl --wait=hv set Logical_Router_Port internet-public \
                          options:dynamic-routing-connected-as-host-routes=true
 
 OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
-blackhole 192.0.2.1 proto 84
-blackhole 192.0.2.2 proto 84
-blackhole 192.0.2.3 proto 84
-blackhole 192.0.2.10 proto 84
-blackhole 198.51.100.0/24 proto 84])
+blackhole 192.0.2.1 proto 84 metric 100
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000])
+
+# if the pr1-public lrp is now removed from this hypervisor the route metric
+# will go back to the default.
+# For this we just schedule it on a non existing chassis
+check ovn-nbctl lrp-del-gateway-chassis pr1-public hv1
+check ovn-nbctl --wait=hv lrp-set-gateway-chassis pr1-public hv123
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 100
+blackhole 192.0.2.2 proto 84 metric 1000
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 1000
+blackhole 198.51.100.0/24 proto 84 metric 1000])
+
+# moving pr1-public back will also change the route metrics again
+check ovn-nbctl lrp-del-gateway-chassis pr1-public hv123
+check ovn-nbctl --wait=hv lrp-set-gateway-chassis pr1-public hv1
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 100
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000])
 
 # now we test route learning
 check_row_count Learned_Route 0

From patchwork Thu Jan  2 15:19:45 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029083
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=rAC2ZAWo;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=rAC2ZAWo;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::137; helo=smtp4.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp4.osuosl.org (smtp4.osuosl.org [IPv6:2605:bc80:3010::137])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9Q74Mv5z1ycJ
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:20:47 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp4.osuosl.org (Postfix) with ESMTP id BB2F0406FA;
	Thu,  2 Jan 2025 15:20:45 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp4.osuosl.org ([127.0.0.1])
 by localhost (smtp4.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id 8QU29nPxh_fC; Thu,  2 Jan 2025 15:20:44 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp4.osuosl.org DF4AB40162
Authentication-Results: smtp4.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=rAC2ZAWo;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=rAC2ZAWo
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp4.osuosl.org (Postfix) with ESMTPS id DF4AB40162;
	Thu,  2 Jan 2025 15:20:43 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 75599C0889;
	Thu,  2 Jan 2025 15:20:43 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp3.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 1D7C2C08AA
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:41 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp3.osuosl.org (Postfix) with ESMTP id 8FD496084D
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:17 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id 0EIjiUFNZeaw for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:20:15 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2612::61d;
 helo=eur05-am6-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp3.osuosl.org 2B4E560831
Authentication-Results: smtp3.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 2B4E560831
Authentication-Results: smtp3.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=rAC2ZAWo;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=rAC2ZAWo
Received: from EUR05-AM6-obe.outbound.protection.outlook.com
 (mail-am6eur05on2061d.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2612::61d])
 by smtp3.osuosl.org (Postfix) with ESMTPS id 2B4E560831
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:15 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=WI5cuqucXD/uT/ms/ceB4uXaqWwgUyVDm6Q2YasTfDiwz+DmehVl1mNq8bE3d+le+iSzbCM4FQUa7vU+a9R+WWRu1b9BhoKrvyAXo7n0oKW70qFObFWD4Gk+gGW7RP6j87392F6aQLPToitUEux0a2EWHL4IpgSxadE0RYE25CtdBEXUzNibPflXrSBUl8uJjz2jwkpcYBlfHiUiPzatfk3ct0EBiFN/ih3uzf1enY2Rl/u7PQ0vXpVQ8D6qlJG/KKFm+QzWfK2Rj40hqEzmCLUz28RBTVQrhb1F3AP4A/Y0D3tzuE7nAWDmm/0tfb3BAf1+MP80+SZv5ByHKCPlog==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ur4N9y3oTMdOKaNw1MwMeUtB09fPKkm6jDsXRcdU9Cg=;
 b=RdDhjr976VHEqHPyMOhVX0ttVXMi6ClSg9oNoMSh9tHtLJnMfRNcf30VA/AGT341+n7IvX0EnqI6C+mQbzOxubly/TfFIcaa94eJ0KtJ8DHCcOtCQFVjhAQ6S0zotUmEZNDspWXn6V1Jf9SN9Hl4B/ZxZG0OZZl361gvro5gIngD+V5Vms6YCHzo7CQ+XMZuV292WwbUkrI967rBICU17Xznq5c/5CpkPyfMRF6p/OUU17j5plCz4GBERmFB0kR3AzIrLH0eyTecWlfgqb/O23lv++lrHdGkZFgpavtbTHaJKkucgg38p8Cm2SgqWS6NCeLMfgcqgS3gBGhisJWACg==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ur4N9y3oTMdOKaNw1MwMeUtB09fPKkm6jDsXRcdU9Cg=;
 b=rAC2ZAWoxjGemIti8b9TgLGJN9B6YIiCNt4tkJh2f3hbx2vT9nJVNTNXcs4Hdnc3RNz+9SKTIW0O3NxZMw2Gz7ewuR/DDdxqLK5c2/C69uctBaBK8kcjGEA3FXctiPcOR9lHIByIE/uBvDmTwy/ek4mcWNBXvlBa7qGo0lZL8aOm0pYnadRq/D0KYLi4/U08APugZHzfnIS4vYPcYXemBnHEABp+oOZ6kckXvaLAFS3bgb6jKLLjrVn6TkT0AuZ6DFy4IJKFgKEuOLAs6tHj5WiE49b0UouMzenY1hPPij8G9gAl4GO08xmbB+wW30iS4D0sww0oipX5CrMQLqjybA==
Received: from DU2P251CA0021.EURP251.PROD.OUTLOOK.COM (2603:10a6:10:230::24)
 by AM7PR10MB3762.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:20b:170::19) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8335.5; Thu, 2 Jan
 2025 15:20:07 +0000
Received: from DU2PEPF00028D07.eurprd03.prod.outlook.com
 (2603:10a6:10:230:cafe::72) by DU2P251CA0021.outlook.office365.com
 (2603:10a6:10:230::24) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8314.13 via Frontend Transport; Thu,
 2 Jan 2025 15:20:07 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D07.mail.protection.outlook.com (10.167.242.167) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:20:04 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:20:05
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 9541320
X-ExclaimerImprintLatency: 6658818
X-ExclaimerImprintAction: e3e385505d4d4711971190abffb16b5b
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Bimgb3dL1fP0S23TiUqfJ8dFqOGRnWqEU90u1DVYrrXJDMzK3cLPea9GpkacPDw71XfsoCMAPMqK1EOJ6hhoMnY0McXAOz7B8M+ZRklBkykpbu+g6uVvzYLghExg0lL5WaK9JMqJwoTxQ9BBZpZPND9d45gsa96JH8I8s4VIfXGtYxROOk0NFu13WbrtNgP3sRSOb9C33gXZ5S8Y7z5E8EJ4Vs84Ype9b04Bk+9NJa3OGJG8iUrZsjsxsjVNQrrDPy9WvP8QjLZ/fV/EvT+ac10uvt2hjSZoiv+RAP5tZb/UbGZtyhgmj3E6JhDAAcMMy4wUdgnszt1im7PmATvWwQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ur4N9y3oTMdOKaNw1MwMeUtB09fPKkm6jDsXRcdU9Cg=;
 b=eNNXH7/bjrxKMNbNcgAYgpNRgCtY44NtswjGDWoIxOWFMoPUeIiao1oCAxl0esW1pFLrxMxOl0byoawChhLhcdwA+XbtCzUyHQ+pP9QryPuyts/9BE6PU/TxOzAXhBPLYStkQQTtibXg/epXRic99mUonlmSiM+k4hciGnM1PvJtPvq6ZDVzIazoLWuvpQqjwjnmRKx9k+5YptYKxT1jYyZOJQUW2TXaKz35WUCCuzcyYt9RP0ZvMfN7hACn5VG8pHvfl9rhqTE8/uMArUiIRFTJUwmGFMCeAA2acpomWBTVz5+qk1yOWTpy0ykzOjSffhLif0UsIs/ySuthpqYwQA==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ur4N9y3oTMdOKaNw1MwMeUtB09fPKkm6jDsXRcdU9Cg=;
 b=rAC2ZAWoxjGemIti8b9TgLGJN9B6YIiCNt4tkJh2f3hbx2vT9nJVNTNXcs4Hdnc3RNz+9SKTIW0O3NxZMw2Gz7ewuR/DDdxqLK5c2/C69uctBaBK8kcjGEA3FXctiPcOR9lHIByIE/uBvDmTwy/ek4mcWNBXvlBa7qGo0lZL8aOm0pYnadRq/D0KYLi4/U08APugZHzfnIS4vYPcYXemBnHEABp+oOZ6kckXvaLAFS3bgb6jKLLjrVn6TkT0AuZ6DFy4IJKFgKEuOLAs6tHj5WiE49b0UouMzenY1hPPij8G9gAl4GO08xmbB+wW30iS4D0sww0oipX5CrMQLqjybA==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:46 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:46 +0000
Date: Thu, 2 Jan 2025 16:19:45 +0100
To: dev@openvswitch.org
Message-ID: 
 <ae5de92e1880da09e7d27770f0b0a3214f0a2985.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0108.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::11) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|DU2PEPF00028D07:EE_|AM7PR10MB3762:EE_
X-MS-Office365-Filtering-Correlation-Id: 63dc2903-aac2-472f-d28c-08dd2b40ef6e
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 dAteStkMk0+gniKKJsx6OL9I9siCj/NHc5yhPDhVqDWlFIjYfp5aDv+C8qcZGgBx7UIaC/eoyUw/FMUYRqsy4W7apMeaZ6vlowo7s4GqpgAgSojv0N+Bb05nH0/zXo1f7KinxgZ4l4qzuw0/BPINomjD86AXrkqOvrEcbTgm/kZHw6T1qW+9z+SZ6BbAK7lZvUzDCYToXbBghjzbgbp/U2XxmOl5UeceY9djbV318SVJ6Yu2B9ZoyjiuJwgHS/jJyV/N9/K/0CAGr5H2DUP4ZhU8rNzGdIIyqGBxMHpazk1oHZpEK6AAVDnnnSOovtj+QVcsTc6otUQKuP8LS3Vo/jf5SPFThNr7N6IsnlRl/Kd8EWM0ZddH/CIae2mARINjbJODbEfff1J2EA1P5uu5eQG7DcR76KiXn/adl9uAMdkyYp8cqx2UNVEvt6toMoceTTxJNJXIS14sbj/jqNmLVxpDVIGhw+eb6N474V7QUvkTdqDEVDpfrEnCwDXETgvc79M+yOGpAf5ypZI3CUXFQzR1tfJQcUy4UjuUcKQDjQ21ipyjCB+tOeyVZQiins2QuL678LR3gJa8F+zoqf6fdtBSXUspLcQ6Dj8pibLhy/Vb+P8+Nc8W2QwcZJZUoLLSGhVLJHzvT+LhAmqbuOcVGgDvvFA1mX/4X7/MnIoqMjFn7Xjf84z0BFxx/m8NKJ7Oo/W3XvqAQISuPHQuzwCGC37VVsUFt/yeVn0k/u2ALQxvIUuS4NPA1KZxVGiNvi+WTWQjKNMGreWjgxUXWCKcAyhQsDlBXCeMcWWSQvhvXoCE99EiwxpnT0hAZnQubuCVmyLLBY6essdfaX9d5CF6tyZYCizLs3XjzdR91sscHr5Gw6jQKk7pFbia4TN1SxvCTnJpWRPsR5pb9gTh0Qhb3yxNj6waVs6qSbbiIUCtdoCQ8aiIaJFV1XDchHf2mQ65CFqUfls01B72kU8i47ZHb2V9LIKmdsl4F+RjFPg4VItyxoqGMPdGXhAutzjoNgyT55rPIefdIUZVxI4uiCjUgE3EWZBtWX/S0A6+61ksJL4gjmJh2Xak0mbu/PecwWXBmrNRBdxO1/pIw9c96tMNMwNbuVMzXoPLbaOgmPvd0c7o61XX+iiIBVjqay3HcbGDt/NJlG1P1oYd28Vuf+XEABBM2HCDt7EjXQ9FXqR/ojOm0y1ndfN898TxrEBUBmhJNrzTeOnYRxPfVHcdIcpfPmYyl7lhEDhmQ8B+fcXAgtBlSyvEddeD4ITSxRDc153goMRjcXOlziEMZa8L8Fj6c5b6UkuuFxCfywBYHKDHAQ6jllrVnZfMEWLH+2TKa6HPe/1qp0nJ5s04kIE1/ZxgnL9X2kUjbFp6h0UBvJXj0waIFyF0u7lqm7ERMF9+ijcD
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D07.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 9c827cfe-6cda-4a79-f445-08dd2b40e47e
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|376014|1800799024|14060799003|36860700013|35042699022|82310400026;
X-Microsoft-Antispam-Message-Info: 
 dHfB6/w8Xhi5Ro2mS52Fk340Io4ujgbe/MgqOEcWDvfO265t9oScDFH6E4eJhBWIffSZMdhHUfMeb96Y5CAFGfEVSE0DS6SuugG/HCRaEb9fay9P6HEpY/lNuTyHo7qq2t85S4FEOyOttzwfxO4zFL8LcC64HS9At9cF2DTmi8dBcQRsOJU7kFykx3rsO+HfQlyZmsdgxbyi1nfaCqH9S/JsFB8pzD2SlUc+kjvgHOwzKkEz993JSHaYE1yDBi/ylSw5Is+yUMAmZJDgWxVDPLPIMsPj6wS8BcqrUiTX0gtdQc43sY7Z/015bIscjSFtZzpw5k7/VwLNK0PS4d77/ZhsoG1qz20XGWbD/fFyzAo8djbByqzFIoGHWg0GBMmXcyEtJzgzWWC+vNrhGPVKylALEIYshGZr7LtwRZ9BkaV9+q9TfoUHZrZ7v9FbXUMB3Dtp8NDMmHuC1zdlYzGgZlNAxzHqmN+tefI9Qa86r5XMidn56cLVQ2zc347TGLTh/tiUBd7tBoo3mgRgEc9MiTPByAR/ZP+plAK6Z4qsRlHDrBHnN91nexYVlC90Q4/Dk9/BXVnECDHDsoqeSdJz5kmH1QPfnswvbmZqyE0dgWdU7wJbOEimE3uogTKiGvBUTi6ENuKTHTgum88DMz1WuYYPNFJrXMJ6dVUCiUjHVnbHJmLZQGIznr4cBN/ioDSATsqwzT0bgPmIoTF2sdHWCKZS9EjtnBaDQSm0/qrtrUY1zd5Off+NR0bBxM/N37oslfZ4CN7ll2Sk0TY4wXT2u/z/wC57+ikWcmhf9eA++hbARQXSlIR/u3JvNlL7LAh4SrZF67Vpqx4KvkkdUp6lzwo3TolLOkePY9wY9NRdZ8eG3m0DJrPaq6HFNRlWVDFEcU4IeAj25kwq8SbOi/g0kyuLWZyjr+ME26MGmksfzGVY7++zGx3YjlAKWZlpaguOq2Q3IagxQomaDyyPXdDwIt01tWnP/6reubZuTT6MbWs6I7N2TgbjktYIgqUuKqy319bxDx6OnZjNBjX3uoFw53AIgh380/DQxFGJN71U5m3VLRuFf7mo6jVsdnv20pR1tXG8YeHEp/nspDhG2/obDsFCRMjkWh3VmtvSg71HabJN/xMEHi2LnyXTgFPOrBycVxpch6AHWRmdTau3wbGRa4YG8SnoWuZM2hvJeFAfv+shTisQMDQif9RuceSEGwtzsfntF3o7SvI+Wv9WnmQ1sAcRJlFUqULHnu/BNUYzBAMlEypc/AF5EophVSVI7xfMqemryxT62l1P3vXJzSJkSXU0R/ANNrpgkIrMfKX1TEd7QCf29ShBq71CD6ncZNlksyiW+6oExo8FBt0dZQL/hf4JxGIBH6EKmVvn9PEeFhSp97VTE1YTyVhiWZkXaoaeTvsD+rzC6Jc8igOAdpZkczFLR5FFI3+nls5BlIOy8UlGULUYlnlGJRSg8IgmZNFdUqb2QDmgbJM1yKVVJVuAeSw44ENqq/g2axnHo9QUcdU=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(376014)(1800799024)(14060799003)(36860700013)(35042699022)(82310400026);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:20:04.3897 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 63dc2903-aac2-472f-d28c-08dd2b40ef6e
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D07.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AM7PR10MB3762
Subject: [ovs-dev] [RFC PATCH ovn v3 8/9] controller: Watch for route
 changes.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

for each vrf/network namespace we use we open a netlink watcher.
This allows us to reconcile on changed route entries from outside
routing agents.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 controller/automake.mk               |   7 +-
 controller/ovn-controller.c          |  48 +++++++++
 controller/route-exchange-stub.c     |   6 --
 controller/route-exchange.c          |   8 +-
 controller/route-exchange.h          |   3 +
 controller/route-table-notify-stub.c |  37 +++++++
 controller/route-table-notify.c      | 148 +++++++++++++++++++++++++++
 controller/route-table-notify.h      |  41 ++++++++
 tests/system-ovn.at                  |   4 -
 9 files changed, 289 insertions(+), 13 deletions(-)
 create mode 100644 controller/route-table-notify-stub.c
 create mode 100644 controller/route-table-notify.c
 create mode 100644 controller/route-table-notify.h

diff --git a/controller/automake.mk b/controller/automake.mk
index 66aff8643..df24a674f 100644
--- a/controller/automake.mk
+++ b/controller/automake.mk
@@ -53,6 +53,7 @@ controller_ovn_controller_SOURCES = \
 	controller/ovn-dns.c \
 	controller/ovn-dns.h \
 	controller/route-exchange.h \
+	controller/route-table-notify.h \
 	controller/route.h \
 	controller/route.c
 
@@ -60,10 +61,12 @@ if HAVE_NETLINK
 controller_ovn_controller_SOURCES += \
 	controller/route-exchange-netlink.h \
 	controller/route-exchange-netlink.c \
-	controller/route-exchange.c
+	controller/route-exchange.c \
+	controller/route-table-notify.c
 else
 controller_ovn_controller_SOURCES += \
-	controller/route-exchange-stub.c
+	controller/route-exchange-stub.c \
+	controller/route-table-notify-stub.c
 endif
 
 controller_ovn_controller_LDADD = lib/libovn.la $(OVS_LIBDIR)/libopenvswitch.la
diff --git a/controller/ovn-controller.c b/controller/ovn-controller.c
index f90ab1f59..261b949cd 100644
--- a/controller/ovn-controller.c
+++ b/controller/ovn-controller.c
@@ -90,6 +90,7 @@
 #include "ovn-dns.h"
 #include "route.h"
 #include "route-exchange.h"
+#include "route-table-notify.h"
 
 VLOG_DEFINE_THIS_MODULE(main);
 
@@ -5081,9 +5082,13 @@ en_route_exchange_run(struct engine_node *node, void *data)
 
     struct route_exchange_ctx_out r_ctx_out = {
     };
+    hmap_init(&r_ctx_out.route_table_watches);
 
     route_exchange_run(&r_ctx_in, &r_ctx_out);
 
+    route_table_notify_update_watches(&r_ctx_out.route_table_watches);
+    hmap_destroy(&r_ctx_out.route_table_watches);
+
     engine_set_node_state(node, EN_UPDATED);
 }
 
@@ -5101,6 +5106,38 @@ static void
 en_route_exchange_cleanup(void *data OVS_UNUSED)
 {}
 
+struct ed_type_route_table_notify {
+    /* For incremental processing this could be tracked per datapath in
+     * the future. */
+    bool changed;
+};
+
+static void
+en_route_table_notify_run(struct engine_node *node, void *data)
+{
+    struct ed_type_route_table_notify *rtn = data;
+    if (rtn->changed) {
+        engine_set_node_state(node, EN_UPDATED);
+    } else {
+        engine_set_node_state(node, EN_UNCHANGED);
+    }
+    rtn->changed = false;
+}
+
+
+static void *
+en_route_table_notify_init(struct engine_node *node OVS_UNUSED,
+                       struct engine_arg *arg OVS_UNUSED)
+{
+    struct ed_type_route_table_notify *rtn = xzalloc(sizeof(*rtn));
+    rtn->changed = true;
+    return rtn;
+}
+
+static void
+en_route_table_notify_cleanup(void *data OVS_UNUSED)
+{}
+
 /* Returns false if the northd internal version stored in SB_Global
  * and ovn-controller internal version don't match.
  */
@@ -5403,6 +5440,7 @@ main(int argc, char *argv[])
     ENGINE_NODE(bfd_chassis, "bfd_chassis");
     ENGINE_NODE(dns_cache, "dns_cache");
     ENGINE_NODE(route, "route");
+    ENGINE_NODE(route_table_notify, "route_table_notify");
     ENGINE_NODE(route_exchange, "route_exchange");
 
 #define SB_NODE(NAME, NAME_STR) ENGINE_NODE_SB(NAME, NAME_STR);
@@ -5440,6 +5478,7 @@ main(int argc, char *argv[])
                      engine_noop_handler);
     engine_add_input(&en_route_exchange, &en_sb_port_binding,
                      engine_noop_handler);
+    engine_add_input(&en_route_exchange, &en_route_table_notify, NULL);
 
     engine_add_input(&en_addr_sets, &en_sb_address_set,
                      addr_sets_sb_address_set_handler);
@@ -5957,6 +5996,14 @@ main(int argc, char *argv[])
                                &transport_zones,
                                bridge_table);
 
+                    if (route_table_notify_run()) {
+                        struct ed_type_route_table_notify *rtn =
+                            engine_get_internal_data(&en_route_table_notify);
+                        if (rtn) {
+                            rtn->changed = true;
+                        }
+                    }
+
                     stopwatch_start(CONTROLLER_LOOP_STOPWATCH_NAME,
                                     time_msec());
 
@@ -6232,6 +6279,7 @@ main(int argc, char *argv[])
             }
 
             binding_wait();
+            route_table_notify_wait();
         }
 
         unixctl_server_run(unixctl);
diff --git a/controller/route-exchange-stub.c b/controller/route-exchange-stub.c
index 2ca644b06..7225e67a8 100644
--- a/controller/route-exchange-stub.c
+++ b/controller/route-exchange-stub.c
@@ -19,12 +19,6 @@
 #include "openvswitch/compiler.h"
 #include "route-exchange.h"
 
-bool
-route_exchange_relevant_port(const struct sbrec_port_binding *pb OVS_UNUSED)
-{
-    return false;
-}
-
 void
 route_exchange_run(struct route_exchange_ctx_in *r_ctx_in OVS_UNUSED,
                    struct route_exchange_ctx_out *r_ctx_out OVS_UNUSED)
diff --git a/controller/route-exchange.c b/controller/route-exchange.c
index 77d5ce51d..a9eb4dbfe 100644
--- a/controller/route-exchange.c
+++ b/controller/route-exchange.c
@@ -25,6 +25,7 @@
 #include "ha-chassis.h"
 #include "local_data.h"
 #include "route.h"
+#include "route-table-notify.h"
 #include "route-exchange.h"
 #include "route-exchange-netlink.h"
 
@@ -187,7 +188,7 @@ sb_sync_learned_routes(const struct sbrec_datapath_binding *datapath,
 
 void
 route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
-                   struct route_exchange_ctx_out *r_ctx_out OVS_UNUSED)
+                   struct route_exchange_ctx_out *r_ctx_out)
 {
     struct sset old_maintained_vrfs = SSET_INITIALIZER(&old_maintained_vrfs);
     sset_swap(&_maintained_vrfs, &old_maintained_vrfs);
@@ -228,6 +229,11 @@ route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
                                r_ctx_in->sbrec_learned_route_by_datapath,
                                r_ctx_in->sbrec_port_binding_by_name);
 
+        struct route_table_watch_request *wr = xzalloc(sizeof(*wr));
+        wr->table_id = ad->key;
+        hmap_insert(&r_ctx_out->route_table_watches, &wr->node,
+                    route_table_notify_hash_watch(wr->table_id));
+
 out:
         re_nl_received_routes_destroy(&received_routes);
     }
diff --git a/controller/route-exchange.h b/controller/route-exchange.h
index d51fba598..8617f9df2 100644
--- a/controller/route-exchange.h
+++ b/controller/route-exchange.h
@@ -16,6 +16,7 @@
 #define ROUTE_EXCHANGE_H 1
 
 #include <stdbool.h>
+#include "openvswitch/hmap.h"
 
 struct route_exchange_ctx_in {
     /* We need the idl to check if a table exists. */
@@ -28,6 +29,8 @@ struct route_exchange_ctx_in {
 };
 
 struct route_exchange_ctx_out {
+    /* contains route_table_watch */
+    struct hmap route_table_watches;
 };
 
 void route_exchange_run(struct route_exchange_ctx_in *,
diff --git a/controller/route-table-notify-stub.c b/controller/route-table-notify-stub.c
new file mode 100644
index 000000000..d6de9852e
--- /dev/null
+++ b/controller/route-table-notify-stub.c
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include <stdbool.h>
+
+#include "openvswitch/compiler.h"
+#include "route-table-notify.h"
+
+bool
+route_table_notify_run(void)
+{
+    return false;
+}
+
+void
+route_table_notify_wait(void)
+{
+}
+
+void
+route_table_notify_update_watches(struct hmap *route_table_watches OVS_UNUSED)
+{
+}
+
diff --git a/controller/route-table-notify.c b/controller/route-table-notify.c
new file mode 100644
index 000000000..dd8b4ffdb
--- /dev/null
+++ b/controller/route-table-notify.c
@@ -0,0 +1,148 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include <net/if.h>
+#include <linux/rtnetlink.h>
+
+#include "netlink-notifier.h"
+#include "openvswitch/vlog.h"
+
+#include "binding.h"
+#include "route-table.h"
+#include "route.h"
+#include "route-table-notify.h"
+#include "route-exchange-netlink.h"
+
+
+VLOG_DEFINE_THIS_MODULE(route_table_notify);
+
+struct route_table_watch_entry {
+    struct hmap_node node;
+    uint32_t table_id;
+    bool is_netns;
+    struct nln *nln;
+    struct nln_notifier *route_notifier;
+    struct nln_notifier *route6_notifier;
+    /* used in update_watches to ensure we clean up */
+    bool stale;
+};
+
+static struct hmap watches = HMAP_INITIALIZER(&watches);
+static bool any_route_table_changed = false;
+static struct route_table_msg rtmsg;
+
+static struct route_table_watch_entry*
+find_watch_entry(uint32_t table_id)
+{
+    struct route_table_watch_entry *we;
+    uint32_t hash = route_table_notify_hash_watch(table_id);
+    HMAP_FOR_EACH_WITH_HASH (we, node, hash, &watches) {
+        if (table_id == we->table_id) {
+            return we;
+        }
+    }
+    return NULL;
+}
+
+static void
+route_table_change(const struct route_table_msg *change OVS_UNUSED,
+                   void *aux OVS_UNUSED)
+{
+    if (change && change->rd.rtm_protocol != RTPROT_OVN) {
+        any_route_table_changed = true;
+    }
+}
+
+static void
+add_watch_entry(uint32_t table_id)
+{
+    struct route_table_watch_entry *we;
+    uint32_t hash = route_table_notify_hash_watch(table_id);
+    we = xzalloc(sizeof(*we));
+    we->table_id = table_id;
+    we->stale = false;
+    VLOG_DBG("registering new route table watcher for table %d",
+             table_id);
+    we->nln = nln_create( NETLINK_ROUTE, route_table_parse, &rtmsg);
+
+    we->route_notifier =
+        nln_notifier_create(we->nln, RTNLGRP_IPV4_ROUTE,
+                            (nln_notify_func *) route_table_change, NULL);
+    we->route6_notifier =
+        nln_notifier_create(we->nln, RTNLGRP_IPV6_ROUTE,
+                            (nln_notify_func *) route_table_change, NULL);
+    hmap_insert(&watches, &we->node, hash);
+}
+
+static void
+remove_watch_entry(struct route_table_watch_entry *we)
+{
+    hmap_remove(&watches, &we->node);
+    nln_notifier_destroy(we->route_notifier);
+    nln_notifier_destroy(we->route6_notifier);
+    nln_destroy(we->nln);
+    free(we);
+}
+
+bool
+route_table_notify_run(void)
+{
+    any_route_table_changed = false;
+
+    struct route_table_watch_entry *we;
+    HMAP_FOR_EACH (we, node, &watches) {
+        nln_run(we->nln);
+    }
+
+    return any_route_table_changed;
+}
+
+void
+route_table_notify_wait(void)
+{
+    struct route_table_watch_entry *we;
+    HMAP_FOR_EACH (we, node, &watches) {
+        nln_wait(we->nln);
+    }
+}
+
+void
+route_table_notify_update_watches(struct hmap *route_table_watches)
+{
+    struct route_table_watch_entry *we;
+    HMAP_FOR_EACH (we, node, &watches) {
+        we->stale = true;
+    }
+
+    struct route_table_watch_request *wr;
+    HMAP_FOR_EACH_SAFE (wr, node, route_table_watches) {
+        we = find_watch_entry(wr->table_id);
+        if (we) {
+            we->stale = false;
+        } else {
+            add_watch_entry(wr->table_id);
+        }
+        hmap_remove(route_table_watches, &wr->node);
+        free(wr);
+    }
+
+    HMAP_FOR_EACH_SAFE (we, node, &watches) {
+        if (we->stale) {
+            remove_watch_entry(we);
+        }
+    }
+
+}
diff --git a/controller/route-table-notify.h b/controller/route-table-notify.h
new file mode 100644
index 000000000..63100e283
--- /dev/null
+++ b/controller/route-table-notify.h
@@ -0,0 +1,41 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ROUTE_TABLE_NOTIFY_H
+#define ROUTE_TABLE_NOTIFY_H 1
+
+#include <stdbool.h>
+#include "openvswitch/hmap.h"
+#include "hash.h"
+
+struct route_table_watch_request {
+    struct hmap_node node;
+    uint32_t table_id;
+};
+
+static inline uint32_t
+route_table_notify_hash_watch(uint32_t table_id)
+{
+    return hash_add(0, table_id);
+}
+
+/* returns true if any route table has changed enough that we need to learn
+ * new routes. */
+bool route_table_notify_run(void);
+void route_table_notify_wait(void);
+/* updates the list of route table watches that are currently active.
+ * hmap should contain struct route_table_watch_request */
+void route_table_notify_update_watches(struct hmap *route_table_watches);
+
+#endif /* ROUTE_TABLE_NOTIFY_H */
diff --git a/tests/system-ovn.at b/tests/system-ovn.at
index 08a9dc418..0b4a240e6 100644
--- a/tests/system-ovn.at
+++ b/tests/system-ovn.at
@@ -14933,8 +14933,6 @@ blackhole 198.51.100.0/24 proto 84 metric 1000])
 # now we test route learning
 check_row_count Learned_Route 0
 check ip route add 233.252.0.0/24 via 192.168.10.10 dev lo onlink vrf ovnvrf1337
-# for now we trigger a recompute as route watching is not yet implemented
-check ovn-appctl -t ovn-controller inc-engine/recompute
 check ovn-nbctl --wait=hv sync
 check_row_count Learned_Route 1
 lp=$(ovn-sbctl --bare --columns _uuid list port_binding internet-phys)
@@ -15184,8 +15182,6 @@ blackhole 198.51.100.0/24 proto 84 metric 1000])
 # now we test route learning
 check_row_count Learned_Route 0
 check ip route add 233.252.0.0/24 via 192.168.10.10 dev lo onlink vrf ovnvrf1337
-# for now we trigger a recompute as route watching is not yet implemented
-check ovn-appctl -t ovn-controller inc-engine/recompute
 check ovn-nbctl --wait=hv sync
 check_row_count Learned_Route 1
 lp=$(ovn-sbctl --bare --columns _uuid list port_binding internet-phys)

From patchwork Thu Jan  2 15:19:46 2025
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2029085
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QK4fh5c0;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=QK4fh5c0;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=140.211.166.136; helo=smtp3.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp3.osuosl.org (smtp3.osuosl.org [140.211.166.136])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YP9Qk4YZHz1yTy
	for <incoming@patchwork.ozlabs.org>; Fri,  3 Jan 2025 02:21:18 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp3.osuosl.org (Postfix) with ESMTP id B013F60AB4;
	Thu,  2 Jan 2025 15:21:16 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id MkG4oXCGyGkp; Thu,  2 Jan 2025 15:21:14 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org DDE6C608F9
Authentication-Results: smtp3.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QK4fh5c0;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=QK4fh5c0
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp3.osuosl.org (Postfix) with ESMTPS id DDE6C608F9;
	Thu,  2 Jan 2025 15:21:03 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 9457DC0889;
	Thu,  2 Jan 2025 15:21:03 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp3.osuosl.org (smtp3.osuosl.org [140.211.166.136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 2870CC02A4
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:21:02 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp3.osuosl.org (Postfix) with ESMTP id 2B24560835
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:29 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id tGXiSZK8GsDG for <dev@openvswitch.org>;
 Thu,  2 Jan 2025 15:20:20 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2614::622;
 helo=eur05-db8-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp3.osuosl.org 7F8446081A
Authentication-Results: smtp3.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 7F8446081A
Received: from EUR05-DB8-obe.outbound.protection.outlook.com
 (mail-db8eur05on20622.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2614::622])
 by smtp3.osuosl.org (Postfix) with ESMTPS id 7F8446081A
 for <dev@openvswitch.org>; Thu,  2 Jan 2025 15:20:19 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=DzAGNq2DnmrYAY2hrNoev4SPjSgp/OaiYAQsvddyp2EFQxm5QVdnHMMgOkeGYeiurlfygnUBYJcdfHkIEfy+15tu6D27JlchZbR+qeHQrgwCTQz4xetnC+4kaUngZH0ohJsBZjgKn9TONGdUWSTTgtRWRHX6Q/O68H+fQY/yYFzSwKqtBuGWLSZvw0udW1+yTmJFcWuTD3kQE5ysiTTPa+vTZDqtpWJCWJ9DWohP4/o1T9bdK6iPOgYC4Ok2rmH+5PvAYMHqT/U81bTlGVj0ncp1tQS+zZOdiPKAF7UGRjtUjHyTvp7iSV/fVJFD6/i5V86Vu5lbspsGnQIjgx8cVQ==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Raqu+hkljPv+i1Y9j0z0L03O7wf1VlvunQC+MFj9fEg=;
 b=RwUlhEtRt62smyrXmIkTEcDM9tiKlyhtnnrh76gbWbgmpaC4eCGDq7GTHfORsYheMhs2grAk32tS23W3cSkymunXT5LgX2rSg42HW33qQeSJCmSkxHuj3zv6CX+3HEEIoUEe9j0Uh+2XJz+bLmPaDubhf4MYq6Le4akmz8KVw4otImHxfeDsUV9oShA0vT4QwKQjcMLMyxt27fLE42k2yFNUDJTc75YGHiMVwtmHW3zaWrP18L9TANWqzaCyr6aF+RrB1VzVDsgx4yUzEVu3zadPZOUP+BrpgisAyEU21wl1n+PDKIn3aNXrCRldFQzS4BS2MKP4Aljt6peSQfgDrQ==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Raqu+hkljPv+i1Y9j0z0L03O7wf1VlvunQC+MFj9fEg=;
 b=QK4fh5c0IscwSFw7EQRHQI0Y9MpH0TolaTGcf5wRZlpEHkGmMNYK2PcFYpxYiCSYzwKlw2LDu419A8iO5x/iOIGBpoe+lPIFcAWWyEJ+Vxx3gvE4h0lBIWw5CKgIF+rtJxDnSkpTC8aLTDypGRv8lqFNuTiTLrDODN5JGhvA3XSVRl9GTvGN65v951a2oswz4fyr8m1g0pmoUgi3og9OgFYorVjivdjdE6k2nXTSf5NjTmsAluwbVU/2zY/s1Yz3sScf1AIKCjeUfOWCkS0mLkIUM55Gcul9fUGbSP0WRDrwj2E6AT3nOtLI4YVKRzFeA9CN1UXm25CUqlGUWHnNFw==
Received: from DU2PR04CA0260.eurprd04.prod.outlook.com (2603:10a6:10:28e::25)
 by AS8PR10MB7547.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:20b:5ae::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.12; Thu, 2 Jan
 2025 15:20:10 +0000
Received: from DU2PEPF00028D05.eurprd03.prod.outlook.com
 (2603:10a6:10:28e:cafe::46) by DU2PR04CA0260.outlook.office365.com
 (2603:10a6:10:28e::25) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8314.13 via Frontend Transport; Thu,
 2 Jan 2025 15:20:09 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D05.mail.protection.outlook.com (10.167.242.165) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8314.11 via Frontend Transport; Thu, 2 Jan 2025 15:20:07 +0000
Received: from EUR02-DB5-obe.outbound.protection.outlook.com (104.47.11.113)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Thu, 2 Jan 2025 15:20:07
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 5794436
X-ExclaimerImprintLatency: 2859438
X-ExclaimerImprintAction: bfed3f60746a407fb222a3ea22a67f05
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Kk3ToihobIjnY4tasBWma+2Tj64cx24XmjW7kU82dfQuMwHthOXI4n4pdInekp8SyXD70MQTEd7yRMU4K8HFuk/+tNJa5gX41nPmf19EigrdvJWgZjNV6G27UIh4U9Sg+MqXGKAeOQliUUwvl7tsxQcmIVKSnBOWP3ZPyZe4B7GoKQDg/m6Fbnwis+HV7mthfTtgL2t/vABv8+7yhyEDVsN5P9ieCNOBcl/DWApxHF3qlXbmvwMGM0NtTsjYsb7WdnVhoE1KhZKpexRFe5d8x4fcVlwQml9vaRcuubK3Ku9jA4tQV3FB0/VdGi6kaavOLg4nenlGksOBiK2O3pOoDw==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Raqu+hkljPv+i1Y9j0z0L03O7wf1VlvunQC+MFj9fEg=;
 b=F51+V6n4LGzvsB2VSMtLKDP9CYnEbXgZajA75hhRSW0F5KshyCsb7s+1Vp8NyaYOaEgXwqRuty/3oW4A4zKUnqLHQOsi2JcY8m+JZXh8mTEavlQBZPWXHjSlsa2/FtYKL4S+IqMDt2fx0N47OS1td57NCJWzpDTL99XRYHOWoDdsgDP8mp4YpDE/sbJii7TzvCUn7C/W5JJn2LU/2leItM7NOTezfbSg8SCIJQEEGHt9mHd8wfrRNmbrBDYNJAi1rytbDSlKThgMMs9TeeLWFOvGkkpZbsf0MM8vOdPZEFcFaphRRduFxUock9a7RXU5DMqcM4tt847s0YLXgwHRIw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Raqu+hkljPv+i1Y9j0z0L03O7wf1VlvunQC+MFj9fEg=;
 b=QK4fh5c0IscwSFw7EQRHQI0Y9MpH0TolaTGcf5wRZlpEHkGmMNYK2PcFYpxYiCSYzwKlw2LDu419A8iO5x/iOIGBpoe+lPIFcAWWyEJ+Vxx3gvE4h0lBIWw5CKgIF+rtJxDnSkpTC8aLTDypGRv8lqFNuTiTLrDODN5JGhvA3XSVRl9GTvGN65v951a2oswz4fyr8m1g0pmoUgi3og9OgFYorVjivdjdE6k2nXTSf5NjTmsAluwbVU/2zY/s1Yz3sScf1AIKCjeUfOWCkS0mLkIUM55Gcul9fUGbSP0WRDrwj2E6AT3nOtLI4YVKRzFeA9CN1UXm25CUqlGUWHnNFw==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU0PR10MB7508.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:427::6) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8314.11; Thu, 2 Jan
 2025 15:19:48 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8335.003; Thu, 2 Jan 2025
 15:19:48 +0000
Date: Thu, 2 Jan 2025 16:19:46 +0100
To: dev@openvswitch.org
Message-ID: 
 <0f6188cbc307214143f097e6dff8a847352c8e11.1735830931.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1735830931.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1735830931.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0109.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::9) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU0PR10MB7508:EE_|DU2PEPF00028D05:EE_|AS8PR10MB7547:EE_
X-MS-Office365-Filtering-Correlation-Id: c2aea85a-bcee-491a-788c-08dd2b40f10e
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|1800799024|376014|366016;
X-Microsoft-Antispam-Message-Info-Original: 
 sUs+i98BmawORUYFBx+a/nqvwKYLFDNPM+HpYA2Koh//WogTiPVLN+tSztMMA3IhLEKjOYXRrs7TbxK6DYU0foBl6jdOv5rpe1DvIXOfVMmAoRr2C3PdvVdSrXTa4IglPOFJc/Cvpo6z5szlpHncUa06uKwZh0fQsttTzVf6D3LcXMI4bhrOKF0XrQNT9PZE1YSa3a7bMF2H/MsmhuT0GWUENsoKq72SUB4vpphwWxtNLmjA6LvqdokAKJ+eTPXCjbOgh/yOvxWd+u0at+01pD2duZYTjbxwuxABZeS2wC0rPoAaTKM+Ns3ae0+dNjtXqHPOzXmiwqCaiWJ+u6cTa6yU8FALPbkA0LxfBJJm99FUO80imJSdSzGc/oaQiG4z61NXjaLlkd2Bg4xMfMnkSCml2PrWOfybrQKLXIvJ+g7Y3Ka+DvTIc2WdAZlwB6dbLDLpGJa8BwH8/WaqINo5q22wTT6U/uJljIRqAof2wES7DFmdPb41KVGO+uwkSplTxIJ8xLoaAhU+x8LV+NrmA4QNUaWuO7d1PFurwIv0c9X1ZjifTOegJGquQXbNKRGp2VDxSzOK2BogiopkthFDwH1nXkbXfodNdph5ULAGhfYpd3WZfYqJarpnmA1AU2mPVcwV1XzH5Nfu/7MrwgI8Mvd2ucRH7Jg2Y0x3HnWw9wtuG+6nLKTUM/jWp4v+aXvZv3+IXpbH/dlJfg95158fYWYxkaefYbly575VGmiGC4MgFMin1ePiNujnSCA1mYm9wrwBuanEq/KW92FWKtS+k6jTzkzKwb3vPK884ZAMSAcGOD47ikaC+htYFeWbqoA00/pRXB+wI8P4O11Xd1/e46cUGe6oE+CBtXT8KlUUXCEI3PujkOb1AdM8DtjolnlU4kwoXSgQTVREjdU+QIWckxL6r1Vu58HRe0HcgRHebHfd9C4ZXEGx4eNi41LI7nJh5UbMvLP6Ji82Evghn5C3RfsdzBUu1+pCOtPUpJp/7ngzbnTAe59cXLEXlC5G5a1dcJDfSQK77E0IoaaEI8lV0HehgoE8iNB07jhur8HWcWePoj5SUz07MUz1/v2mT8uEP6PV0GkFyKdQUmwt9qMuN0xW2iScQPgBW+VdaPzgC0cOzPb5HI1fxdX1FMaEOyrUPRAeg7FSf4LlOEb7anER1ArdLvsaaWN3KG7fKecIJyYdAZb8c6J1/ddnDldfr3NFQSBmjtYtks7G+W9n0F4Oq7y/2UijnaMopbWi0M0h81VKhRX2DaxxytIAfSYZodwEqsy/BO20km1MJGWhZP4zQobqTaOsweLla3dyOgB7U84y+Mc46VDlzFvnuN4CDD0AnnddHegLmmrVf498TNL/DxjEAHDgpv3ghvU0CIuft2K1FRpWdrJ4mm1TLX2xAwT3
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(1800799024)(376014)(366016); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7508
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D05.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 615f81eb-9096-491c-ffce-08dd2b40e57f
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|1800799024|376014|14060799003|36860700013|82310400026|35042699022;
X-Microsoft-Antispam-Message-Info: 
 xmepv5ooViQ2BMxsBlKT29RTMnMGsJCVZTmGbFufi8YTQRM74Lvyfosn33xR9oxxuH3f4T28ce+SsiJLM/IbncZYPzmn58GdSOiwAu3OaMNUzxCAWaIgQuaGwb4wsdkumkSmv4E06VT/+qH193Pgx7/PEWVP3z4KyIwDBHyNY7UbAIkJ4SMAwdgczT5063x4jd93RbzrNQZr9obTN9hmNekTXaArvMQooi4CS7I33N3Vll24JkSrgoOV3fR28Vq7IpQKhkLJI9ByWRV1TTMDS9pI1IMq18wOnbBQvPyNUKi3+pBAO2SKw1hdb3dlCgFriGHrf+Y2Z4r/HXRV5MaBAmfdQXONh0W2tU5XlP9pyTN6NF0kOgz8cP4VgXLd3zMjR66Gw02go7w05q6ZIS0AQ1A+BEiEoftHQoFGY4pGyRqpSMZIfBORfV5sJv33Hs/7QR7CdpEYWUldchI4divgt32q8rVTPZiDieo7u0eKdJV3xH27w1LSuspYA1+aAFHiIZ7+MRm0Q5RsR+pgrIgXVNF5x8FIF9bM17C+K/Ieb+TbYTp8hWgkZqtAxNwfmvVhrb4WisOQ35wWfXSeczWipEDVKashyr5l/TQasU2Qxp1oPGLvGotwMLubTJpuRX/nbGrOf4kGCCHmflubNhurj5x1HZHKntIQwQUhJIu+YuOQ8h9+VWDOfqNW85IWJv/dKixJT3i2xdxALNFr3iq0Tnivx2NWO9O4KnO+EXdloZQQKo20sudLo6Oxh/F974Dbp5YFkZ6fBX6V77L6vgM/nmBjn7AVMUafu5NzAcUazBe1e7goCzIGULBq1VV0PhgIOSgX128kz+kVNq++WztuClKkiEQF5wwJHMA9FiLnzdjCr4dozOE31FGBhiRPpPfcC175C2n3sua1e9biSJZeMQr1YLbSZ/lvg4MnJAzLwFkzz5vk/QDi23+HvrzJAJEn1ZMwaKMFhNhrFuzSTJuaIgvp1FSzaA6zPqIscU0rHx2XvkHkdB6wcQylf2StAsU1PNkv7WZYJbjbPlob1XFOADZA0TwNQDcpDX+fJPSTlLMsEYo/HtizmxCLXyK/GcEMsE8LGNAFdUVvyiJ+eXa/fvHGJcgjCL/SeUbEWjU/gnV2KFWA4TBm7lnEXY+XHhQ7fAhEBXRwH70UVjGbn4+thI9+ujPS17ilrmNI43w9jMakS6Zz0f6+XoTtlcyn1gBPHZKA174hRRafRehj+vEMCxUf6lYzmGER90qQl2cZw3637qIvVS7YpBdJmsxVVuK8rL3XqLOIlXgqgIcwBcJ9oA8S7kbR4NBI18+xPncPxAqAlfo7m6VSUf3lNSVumuy1TyQqh82x97gyoRwxsyY66dDQ65UMmAf6hhbWxE2/z/zKv1NT6uKkJQDO/zCyXNgcNZxTiu6cb8jAOkdBz3258rerv5waZqWfw7cle0EfYiT29KfODNBQ8MWgebIlzHMAa4VJ5fDh28hz+8ICiSJD0g==
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(1800799024)(376014)(14060799003)(36860700013)(82310400026)(35042699022);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 02 Jan 2025 15:20:07.5199 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 c2aea85a-bcee-491a-788c-08dd2b40f10e
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D05.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AS8PR10MB7547
Subject: [ovs-dev] [RFC PATCH ovn v3 9/9] controller: Cleanup routes on stop.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

When we stop ovn-controller without immediately restarting it we now
cleanup routes.
This allows the routing agents to stop advertising this chassis to the
fabric.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 controller/route-exchange-netlink.c | 40 +++++++++++++++++
 controller/route-exchange-netlink.h |  2 +
 controller/route-exchange.c         | 67 ++++++++++++++++++++++++++++
 tests/system-ovn.at                 | 69 ++++++++++++++++++++++++++++-
 4 files changed, 177 insertions(+), 1 deletion(-)

diff --git a/controller/route-exchange-netlink.c b/controller/route-exchange-netlink.c
index f4428009e..03e75f7de 100644
--- a/controller/route-exchange-netlink.c
+++ b/controller/route-exchange-netlink.c
@@ -291,3 +291,43 @@ re_nl_sync_routes(uint32_t table_id,
         }
     }
 }
+
+static void
+handle_route_msg_delete_all_our_routes(const struct route_table_msg *msg,
+                                       void *data OVS_UNUSED)
+{
+    const struct route_data *rd = &msg->rd;
+    int err;
+
+    /* This route is not from us, so not interesting. */
+    if (rd->rtm_protocol != RTPROT_OVN) {
+        return;
+    }
+
+    err = re_nl_delete_route(rd->rta_table_id, &rd->rta_dst,
+                             rd->rtm_dst_len, rd->rta_priority);
+    if (err) {
+        char addr_s[INET6_ADDRSTRLEN + 1];
+        VLOG_WARN_RL(&rl, "Delete route table_id=%"PRIu32" dst=%s plen=%d: %s",
+                     rd->rta_table_id,
+                     ipv6_string_mapped(
+                         addr_s, &rd->rta_dst) ? addr_s : "(invalid)",
+                     rd->rtm_dst_len,
+                     ovs_strerror(err));
+    }
+}
+
+void
+re_nl_cleanup_routes(uint32_t table_id)
+{
+    /* Remove routes from the system that are not in the host_routes hmap and
+     * remove entries from host_routes hmap that match routes already installed
+     * in the system. */
+    struct route_msg_handle_data data = {
+        .routes = NULL,
+        .learned_routes = NULL,
+    };
+    route_table_dump_one_table(table_id,
+                               handle_route_msg_delete_all_our_routes,
+                               &data);
+}
diff --git a/controller/route-exchange-netlink.h b/controller/route-exchange-netlink.h
index 13346e944..d1f624e45 100644
--- a/controller/route-exchange-netlink.h
+++ b/controller/route-exchange-netlink.h
@@ -50,4 +50,6 @@ void re_nl_sync_routes(uint32_t table_id,
                        const struct hmap *host_routes,
                        struct hmap *learned_routes);
 
+void re_nl_cleanup_routes(uint32_t table_id);
+
 #endif /* route-exchange-netlink.h */
diff --git a/controller/route-exchange.c b/controller/route-exchange.c
index a9eb4dbfe..470f820bd 100644
--- a/controller/route-exchange.c
+++ b/controller/route-exchange.c
@@ -16,6 +16,7 @@
 
 #include <errno.h>
 #include <net/if.h>
+#include <stdbool.h>
 
 #include "openvswitch/vlog.h"
 
@@ -33,6 +34,13 @@
 VLOG_DEFINE_THIS_MODULE(route_exchange);
 static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 20);
 
+struct maintained_route_table_entry {
+    struct hmap_node node;
+    uint32_t table_id;
+};
+
+static struct hmap _maintained_route_tables = HMAP_INITIALIZER(
+    &_maintained_route_tables);
 static struct sset _maintained_vrfs = SSET_INITIALIZER(&_maintained_vrfs);
 
 struct route_entry {
@@ -47,6 +55,38 @@ struct route_entry {
     bool stale;
 };
 
+static uint32_t
+maintained_route_table_hash(uint32_t table_id)
+{
+    return hash_int(table_id, 0);
+}
+
+static bool
+maintained_route_table_contains(uint32_t table_id)
+{
+    uint32_t hash = maintained_route_table_hash(table_id);
+    struct maintained_route_table_entry *mrt;
+    HMAP_FOR_EACH_WITH_HASH (mrt, node, hash,
+                             &_maintained_route_tables) {
+        if (mrt->table_id == table_id) {
+            return true;
+        }
+    }
+    return false;
+}
+
+static void
+maintained_route_table_add(uint32_t table_id)
+{
+    if (maintained_route_table_contains(table_id)) {
+        return;
+    }
+    uint32_t hash = maintained_route_table_hash(table_id);
+    struct maintained_route_table_entry *mrt = xzalloc(sizeof(*mrt));
+    mrt->table_id = table_id;
+    hmap_insert(&_maintained_route_tables, &mrt->node, hash);
+}
+
 static struct route_entry *
 route_alloc_entry(struct hmap *routes,
                   const struct sbrec_datapath_binding *sb_db,
@@ -192,6 +232,9 @@ route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
 {
     struct sset old_maintained_vrfs = SSET_INITIALIZER(&old_maintained_vrfs);
     sset_swap(&_maintained_vrfs, &old_maintained_vrfs);
+    struct hmap old_maintained_route_table = HMAP_INITIALIZER(
+        &old_maintained_route_table);
+    hmap_swap(&_maintained_route_tables, &old_maintained_route_table);
 
     const struct advertise_datapath_entry *ad;
     HMAP_FOR_EACH (ad, node, r_ctx_in->announce_routes) {
@@ -219,6 +262,7 @@ route_exchange_run(struct route_exchange_ctx_in *r_ctx_in,
             sset_find_and_delete(&old_maintained_vrfs, vrf_name);
         }
 
+        maintained_route_table_add(ad->key);
         re_nl_sync_routes(ad->key, &ad->routes,
                           &received_routes);
 
@@ -238,6 +282,17 @@ out:
         re_nl_received_routes_destroy(&received_routes);
     }
 
+    /* Remove routes in tables previousl maintained by us. */
+    struct maintained_route_table_entry *mrt;
+    HMAP_FOR_EACH_SAFE (mrt, node, &old_maintained_route_table) {
+        if (!maintained_route_table_contains(mrt->table_id)) {
+            re_nl_cleanup_routes(mrt->table_id);
+        }
+        hmap_remove(&old_maintained_route_table, &mrt->node);
+        free(mrt);
+    }
+    hmap_destroy(&old_maintained_route_table);
+
     /* Remove VRFs previously maintained by us not found in the above loop. */
     const char *vrf_name;
     SSET_FOR_EACH_SAFE (vrf_name, &old_maintained_vrfs) {
@@ -252,6 +307,11 @@ out:
 void
 route_exchange_cleanup(void)
 {
+    struct maintained_route_table_entry *mrt;
+    HMAP_FOR_EACH_SAFE (mrt, node, &_maintained_route_tables) {
+        re_nl_cleanup_routes(mrt->table_id);
+    }
+
     const char *vrf_name;
     SSET_FOR_EACH_SAFE (vrf_name, &_maintained_vrfs) {
         re_nl_delete_vrf(vrf_name);
@@ -261,10 +321,17 @@ route_exchange_cleanup(void)
 void
 route_exchange_destroy(void)
 {
+    struct maintained_route_table_entry *mrt;
+    HMAP_FOR_EACH_SAFE (mrt, node, &_maintained_route_tables) {
+        hmap_remove(&_maintained_route_tables, &mrt->node);
+        free(mrt);
+    }
+
     const char *vrf_name;
     SSET_FOR_EACH_SAFE (vrf_name, &_maintained_vrfs) {
         sset_delete(&_maintained_vrfs, SSET_NODE_FROM_NAME(vrf_name));
     }
 
     sset_destroy(&_maintained_vrfs);
+    hmap_destroy(&_maintained_route_tables);
 }
diff --git a/tests/system-ovn.at b/tests/system-ovn.at
index 0b4a240e6..9dddfc399 100644
--- a/tests/system-ovn.at
+++ b/tests/system-ovn.at
@@ -14952,8 +14952,40 @@ check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
       options:dynamic-routing-ifname=lo
 check_row_count Learned_Route 1
 
-
+# stopping the ovn-controller will clean up the route entries created by it
+# we first need to unset maintain-vrf as otherwise it will delete the whole vrf
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
+                             options:maintain-vrf=false
 OVS_APP_EXIT_AND_WAIT([ovn-controller])
+AT_CHECK([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [0], [dnl
+233.252.0.0/24 via 192.168.10.10 dev lo onlink
+])
+
+# starting it again will add the routes again
+# the 2 sync commands ensure that we wait until the routes are actually
+# installed. Otherwise this is racy
+start_daemon ovn-controller
+OVS_WAIT_UNTIL([test "$(ovn-appctl -t ovn-controller debug/status)" == "running"])
+check ovn-nbctl --wait=hv sync
+check ovn-nbctl --wait=hv sync
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 1000
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000
+233.252.0.0/24 via 192.168.10.10 dev lo onlink])
+
+# stoping with --restart will not touch the routes
+check ovn-appctl -t ovn-controller exit --restart
+OVS_WAIT_UNTIL([test "$(ovn-appctl -t ovn-controller debug/status)" != "running"])
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 1000
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000
+233.252.0.0/24 via 192.168.10.10 dev lo onlink])
 
 as ovn-sb
 OVS_APP_EXIT_AND_WAIT([ovsdb-server])
@@ -15201,6 +15233,41 @@ check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
       options:dynamic-routing-ifname=lo
 check_row_count Learned_Route 1
 
+# stopping the ovn-controller will clean up the route entries created by it
+# we first need to unset maintain-vrf as otherwise it will delete the whole vrf
+check ovn-nbctl --wait=hv set Logical_Router_Port internet-phys \
+                             options:maintain-vrf=false
+OVS_APP_EXIT_AND_WAIT([ovn-controller])
+AT_CHECK([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [0], [dnl
+233.252.0.0/24 via 192.168.10.10 dev lo onlink
+])
+
+# starting it again will add the routes again
+# the 2 sync commands ensure that we wait until the routes are actually
+# installed. Otherwise this is racy
+start_daemon ovn-controller
+OVS_WAIT_UNTIL([test "$(ovn-appctl -t ovn-controller debug/status)" == "running"])
+check ovn-nbctl --wait=hv sync
+check ovn-nbctl --wait=hv sync
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 100
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000
+233.252.0.0/24 via 192.168.10.10 dev lo onlink])
+
+# stoping with --restart will not touch the routes
+check ovn-appctl -t ovn-controller exit --restart
+OVS_WAIT_UNTIL([test "$(ovn-appctl -t ovn-controller debug/status)" != "running"])
+OVS_WAIT_UNTIL_EQUAL([ip route list vrf ovnvrf1337 | awk '{$1=$1};1'], [dnl
+blackhole 192.0.2.1 proto 84 metric 100
+blackhole 192.0.2.2 proto 84 metric 100
+blackhole 192.0.2.3 proto 84 metric 100
+blackhole 192.0.2.10 proto 84 metric 100
+blackhole 198.51.100.0/24 proto 84 metric 1000
+233.252.0.0/24 via 192.168.10.10 dev lo onlink])
+
 as ovn-sb
 OVS_APP_EXIT_AND_WAIT([ovsdb-server])
 
