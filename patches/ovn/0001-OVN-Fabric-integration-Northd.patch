From patchwork Wed Dec 18 10:24:53 2024
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2024809
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QWxfOdzJ;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=QWxfOdzJ;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::136; helo=smtp3.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp3.osuosl.org (smtp3.osuosl.org [IPv6:2605:bc80:3010::136])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YCqZ20FVtz1yRt
	for <incoming@patchwork.ozlabs.org>; Wed, 18 Dec 2024 21:25:14 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp3.osuosl.org (Postfix) with ESMTP id 9D82E6145C;
	Wed, 18 Dec 2024 10:25:12 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id C3XvF0rMKeW9; Wed, 18 Dec 2024 10:25:10 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 6F58461452
Authentication-Results: smtp3.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QWxfOdzJ;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=QWxfOdzJ
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp3.osuosl.org (Postfix) with ESMTPS id 6F58461452;
	Wed, 18 Dec 2024 10:25:10 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 49C4AC0864;
	Wed, 18 Dec 2024 10:25:10 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp2.osuosl.org (smtp2.osuosl.org [140.211.166.133])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 28C96C0864
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:08 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp2.osuosl.org (Postfix) with ESMTP id E8FF1416E8
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:07 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
 by localhost (smtp2.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id vN5f_Go_XPfv for <dev@openvswitch.org>;
 Wed, 18 Dec 2024 10:25:05 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2606::62c;
 helo=eur02-am0-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp2.osuosl.org 3E07140919
Authentication-Results: smtp2.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp2.osuosl.org 3E07140919
Authentication-Results: smtp2.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=QWxfOdzJ;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=QWxfOdzJ
Received: from EUR02-AM0-obe.outbound.protection.outlook.com
 (mail-am0eur02on2062c.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2606::62c])
 by smtp2.osuosl.org (Postfix) with ESMTPS id 3E07140919
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:04 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=DkuNbQZl53MCA9N+666WmgIKwVeMkpuRqdtae0AANq+sUDa1h4pjFnCAvsccKX+QwCDU8AXgfRfnRwzLI6pgA6eWAhQ4/CYCW5q0W6RqaNXVYPEDsc3udeC4uT0c+6Bw9hs6WokBcyAeD/yK122bnbujseItGPop5IUmqT0vhuom9dxQhZ/GB+hSeeKMS8/RR14zbSy2qDcEY/+IIvMTIq8t4JIgpIWb0rQDplC3gD7mTHRAoEv4gHTKYtJmuE+1UspkAiEmdgw0p4w9suTKeMb6acTFrwRO0jvtS+glqGkxAJoTw9c9nKNYjmJ2eL1jyNbjmP7MbCC826j/indtXQ==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=rnL5cr8qb34v/Jae/O53b24byd0rA0RerrHVqqmzqwg=;
 b=AU+AsMdbkMp0fDJZfxY7GiQWw4LAcvlz1HrXye4Nr/QrTQQ6gXXDyRCfT0xVlF80my96lmynqfXQVf98LuyZuJV5EjtKLNWo0KeqstVpHEDeS7eZpRYkgJr783mqpxiscDkD0aFZtowmW2K03IQKgRqLr05iNxRoG6VlGgCfni4laLnc/MSBZhM3TDSdnm5NVlhwO/yxvWwBnZDyeXXPGVCc/EjOjvHjjWtziqW43iNy7sLkTFrmx90uExwz0wFMELxEnLiOU3sOr0PkuSNb3dqX3wHMBf/51qP92iGepj8M1yUU97bJccUNN+k1YkihsVJYgpZ701fnihUdj0wbbw==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=rnL5cr8qb34v/Jae/O53b24byd0rA0RerrHVqqmzqwg=;
 b=QWxfOdzJJjyYXf9w5ifyO4p7wjGGBulsGKvpmsE1b5dp40ol3Bz3SbWVP0twJ3E6sw0rXfGleXI4VdF8z8bHHHH3dwgEzS10gnyyolm9qtyucG+QZifN19ysPQmL3xxcOUchbGuTK+O1zJxIKuYxnOdxCEs2BYPBBrz1LUQJPRoxKz8p3zmeB5r00m9TYLR98TakOMfWCg3iOJWUWUA27wWVmhhyf8cdyLoAdAFsynQr3Ejxw5zSrBDlldx1SmwLxc/ScUJu/DRXRHR6jG8d8UTR8PaEEbeUtulU33mQOUKdW/evaTGvV8v2hrkgugg1vLGGRJvl6k9L2iGbE/Bf4Q==
Received: from AS9PR06CA0102.eurprd06.prod.outlook.com (2603:10a6:20b:465::19)
 by GV2PR10MB6431.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:150:b9::15)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.11; Wed, 18 Dec
 2024 10:24:58 +0000
Received: from AM4PEPF00027A67.eurprd04.prod.outlook.com
 (2603:10a6:20b:465:cafe::99) by AS9PR06CA0102.outlook.office365.com
 (2603:10a6:20b:465::19) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8251.22 via Frontend Transport; Wed,
 18 Dec 2024 10:24:58 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 AM4PEPF00027A67.mail.protection.outlook.com (10.167.16.84) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8251.15 via Frontend Transport; Wed, 18 Dec 2024 10:24:56 +0000
Received: from EUR05-DB8-obe.outbound.protection.outlook.com (104.47.17.111)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Wed, 18 Dec 2024 10:24:56
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 8860268
X-ExclaimerImprintLatency: 7631070
X-ExclaimerImprintAction: 6b9848a0367848c7bf2d86894caa955e
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=Cbcn6B/q2nv4GwLOSEXujkp4a0pEHuoGmjbc3bDXesKtje9aKtGg5eaCSz9Hk8cPlj6aI447R0LMe2IFx6duQ6JyIozT/JeaQrKwJhZwRBp6MTWcIm4JWia29SRxS4sJobQtekpo8J22RhRO1rt5VMxdbS2wEa1xeDDVPtyqG2C06DNylSbahLenUFgqH7ZjwkytvRolhJyS5JK2mqzDv56tNo0SrxRMsCR1eVfSUK//Fh5gXwJIfZmbzFl9STMNcz7dRBIaDmFlNE5+lIZNEEQQVGOWBOxDWVhsUlPLCj2vjsyswW7zCqWyiIS+PzL1r7J/H3RML37jcl6+8qBoCQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=rnL5cr8qb34v/Jae/O53b24byd0rA0RerrHVqqmzqwg=;
 b=E7WrlQx/7yxYpGL2yfy9+Yvp3R0UOQgOIul//WPowZewq65ZwLIyzYqmZfGB3JgJXy4+sitrhu+MJQTbdifFZkV4DIl3a5JibiadiXy4fOfJf0J3sbzF/t3oMky7KzX4hzRt9IB7Ryz1tunq9LVi9WeXdFDRoYbgoF2rqyb877Rai191MQukE3jwusr5MxA6CXZntGg/YMwVWWBan1jsXEufRuJKPTOfLWepaDBQJp4MBnsS96v4M82hrSEYBSgv2JH1e9/nWulfuekknttQ2J4FvlhnGbD28olFM3EGk4+31DkrLy1pSn3HXVahug4YW08n5COwUt0OsGdSwXFlDw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=rnL5cr8qb34v/Jae/O53b24byd0rA0RerrHVqqmzqwg=;
 b=QWxfOdzJJjyYXf9w5ifyO4p7wjGGBulsGKvpmsE1b5dp40ol3Bz3SbWVP0twJ3E6sw0rXfGleXI4VdF8z8bHHHH3dwgEzS10gnyyolm9qtyucG+QZifN19ysPQmL3xxcOUchbGuTK+O1zJxIKuYxnOdxCEs2BYPBBrz1LUQJPRoxKz8p3zmeB5r00m9TYLR98TakOMfWCg3iOJWUWUA27wWVmhhyf8cdyLoAdAFsynQr3Ejxw5zSrBDlldx1SmwLxc/ScUJu/DRXRHR6jG8d8UTR8PaEEbeUtulU33mQOUKdW/evaTGvV8v2hrkgugg1vLGGRJvl6k9L2iGbE/Bf4Q==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU4PR10MB9191.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:568::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:24:55 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8272.005; Wed, 18 Dec 2024
 10:24:55 +0000
Date: Wed, 18 Dec 2024 11:24:53 +0100
To: dev@openvswitch.org
Message-ID: 
 <dabf53f4a17126ab6cdc398d424d5c4ab4035eb6.1734513749.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1734513749.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1734513749.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0109.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::9) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU4PR10MB9191:EE_|AM4PEPF00027A67:EE_|GV2PR10MB6431:EE_
X-MS-Office365-Filtering-Correlation-Id: 4ab8b776-2520-4ae1-0d62-08dd1f4e3849
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info-Original: 
 f4cMyHkMxkhVzc/qRVkANGahJukvoCacrUNjcibedfAdUUJY7ZqJNnLopxzP9xvJGydySQGHtBI8iVOhErCLn2DMEUqKJNFJ+tx/TKOqqrOEXjTcsqxNIbo7YklB5z1V985qMVwc1/K9pvPN5QHSn0p48U2T6qq3QHf+k7fu6Jg1IfQXA3hxF/kMrs+4cyU4RYBsPC6l1wFnfcT3xT+a7vWtR5WijI/P8lDdFfnVddF3W+xCjdtnNqXWKDwUasitJjajJm76ANeADJi6MBqd55tiITCANo4K9eG3F/RBjqXDQQGnCdCJKKhfXWkdgIocxmCnjFJvyYuU5Zm4GXS56AODUMKU8WurPG2YNpVbawzooFgEBNnJlcDWG0lRHxdar4KuMYBB1RcAyLmBwYyjJ/Op5Y3cf3qFVYxH4DUJQvOFQnYVkh/2joQnvmCSoq5JkDoPlauLWOnjfrQe7jwBcZwElKdf7WF6ED3kY5q6vJk0kXsq9rvkFmnCB8WrT6lAm8brJvSt6TuZkcitdMHQ2fu5/3KsVRyE1shxiHqIJ/VorQx0pK4H2YuleHRs5/lomdOa4O4p5pB8R2TiATERu6FV9AiVHCS4GMTC5p6iQTbRZxY4iUvJw4YLzaHzsBbSYyVgUu3M/Vrbr6rasfqd/+0bEP/j5L1dQlC+AlrzxWHj7UjSLJeVgpv0BACiBJVtA6UHXAQS7D2Lkqp/81KBQWzeRrcWUyFii84+URJ/IkNWUI/Yl77Nhnu3bcsa3neKCMwC9zmqboMrMk3C+HClZtk4z8Kjf5++rZvf44/O+zaWBEfK3L7yFcHTFnlSPJxCXWRUr7ONYgSfdYvgHej30AaGQ4bw+/pY68Uy2U0FpQFZG+VXpgwGf0LmtcwMD9mn/0ZrNEVEOTMwwxgEq2yjswAtXjYWKJdgjfuawU9rZP1tg9AoOcc3bkVykP1+IlXhtF6CW1cx8+eBwJznRX5+DghtucpU04T+pyVVh+fsrjFsV9sO/LU2EhOKNho7mEPg9SWECtDZyTiiyi5Nb7kjQm9ZGhjXczqFOTz7O2enPMTHwPbmvTgVoos5pHw/m5OyPCuYFJqE5JpxwFx40sQ2gwps7b0jJD04pjWPzotO8P9pJIBwM43S25N6LBEyswtQETQztEXPo/lq9nlI2E6GKMSHl7Ovwh0TJBcUgQrOr8Y67wI3bBZyH3ToocJjGP5SpcOCVSeA2ko70zoHoDlBxhOEZy5HinMSQpFqlZhOEyceS5kQUMdKeqtG7+ItHOnRoD72yahYea8keN8QzrKCQ+4DonD8VRlUDOvVzuPszAUD4fZcqMo3M7hONJ/M3G0Eiwj3BrfE3+GtWFp9p/hgj+KJsw0jgkg/M0k11ZU7VNpkemywPv4KS6mbSnGfMd3M
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(376014)(366016)(1800799024); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU4PR10MB9191
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 AM4PEPF00027A67.eurprd04.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 590aec80-7439-4573-1b39-08dd1f4e3715
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|1800799024|14060799003|376014|36860700013|82310400026|35042699022;
X-Microsoft-Antispam-Message-Info: 
 uRH6bIYcZM6Mxubj56cO7aQR2IJQ7NZs6Kqf0C6CwEK2NHD5ZKROLP9QDgnPvPOWcmCjrpIrprU3m5UgpRBZqDdTZKmT3R4GY1Vksjkgl9jwnerMsBKCndyuJkpNIRhl8OB0yOwuBpy9L2WxBDQLgspNT5vve4GstHCZhQgtfFVcDw3gSXW37G339F2q4c0vPFwf/85t7gDmj2by4wXC13CDBgFIm8liGBeHgclA2c/a++s57rtd+UvbGY/O0E22k1W8g6A3W+h/Oa3ZCavbzB7DvXMgX55mnvRRRRcG/WeQVZk+7TF70N6UK3YtOutkQDy24sGa639RC3icnYeRwT+E5SduLZvRq4oBOp9W1FtguyS4HzGOgnEupO6MHP02woN/SRfe7uCbXFWfjSC55xCGjEQotV8MK4EHeKpKP+x9+YIn8eBTUpmhbJXFxgWAmtA80ezbWcI3cjJPkkHHyR4ujEt43cTyTfhjYvQ9q1gAR6ZjjL3iqbwMsbUViljLdA3Xdfs582JvUI0iARm1jOJMMhxlEqkJB9fGBS79AScQp7Edj0XmDJOdqZ19JT6+142QGun+NkrhXftZrV1A8Kz2YsJmk5R5m86Lt33V0X2v00SJSJkVnl2kjPEWNb6zRTmzrFjKnXz+P6+eWR0SsgMhrKdj/Zn4UgbuqElldemsOKSOqsvd0pwugRFMYZAHOMvJOD/rP9zCT/+rEd6ixGzWvxBtcY5kt7uTeEBqNceYJ2CB8acC4a/QprkDkbIoITUBOQzMlpwFySmgxuCQLD8KjnRPOu8lUjyR6sXdzMKdCYkFK3EFiE4etdVYKgqJ9W27zmET9HoTaLUdXKx4+i24wV+4PaB7HFY/e40fSZfSqiqtW5csCvd6A3D6wrj5iHcBeu+nambtfHQpNqmOcrxeho0NdZCXClyCdC1Y2pkjYZHFTUVBwdE/eynIvCIv2yNv+laIoWq0SfIYWnnXYECSZLhFfPWSaSfFJDqQVs/Z6g4agD+xBrAhlWkWMhqLK0wUBoWcP8g83Bl1JZ0zwZzFQrb8xyeZn4b/A3oMrRBGpLJ1y9e0zv1MWxmpnTDNN44TFdSu7RmJ80bw1xwHZ9JTCJmFqbEhcucvbhh+P/aqbgSdXmCGz2zJyOZeHMhYRmaIZxoM0YVihibLluR07Z45i1pqQqpUQh6vfJcr9P+GZ1XZIoe9paB1/eH7sfEuKe0x9kUXVICCqEn9Spt+M3zoCXBOKKRIgI3cWoaEealCDe9Y36RpCTM3xJi6x8JTn72sG0MHwSZVuVoD50oX5kU2CdYS+nYcuDfs6VoT2IdLX4KRRQEgaHpU+0DidwiU0j/0EKt1A2uU3nZdL7PcjlgYG8nDlzvW2dsUOfhPGRASMTgJBq5Swd9l2ioNjoHq3ODrDmCn5YqjqZk/OzpEGXtYjyyiZqUSZCuzMG6ITjy5Ho7eHlFs12zZew2qDRhwIRxzQxahHN6JJ1RFT0MoxNjpEY6uiirFYraKGvSyrJk=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(1800799024)(14060799003)(376014)(36860700013)(82310400026)(35042699022);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Dec 2024 10:24:56.0731 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 4ab8b776-2520-4ae1-0d62-08dd1f4e3849
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 AM4PEPF00027A67.eurprd04.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: GV2PR10MB6431
Subject: [ovs-dev] [PATCH ovn v2 1/6] northd: Add route table to southbound
 and sync.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

in order to exchange routes between OVN and the network fabric we
introduce a new southbound table. This is used by northd to write in the
routes which should be announced from a given Logical Router.

ovn-controller will later use this table to share these routes to the
outside.

Additionally this table will be used as a way for ovn-controller to
share learned routes back to northd.

Users must explicitly opt-in to advertise the routes using this table.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 NEWS                              |   3 +
 ic/ovn-ic.c                       |  21 ----
 lib/ovn-util.c                    |  22 ++++
 lib/ovn-util.h                    |   2 +
 lib/stopwatch-names.h             |   1 +
 northd/automake.mk                |   2 +
 northd/en-advertised-route-sync.c | 202 ++++++++++++++++++++++++++++++
 northd/en-advertised-route-sync.h |  27 ++++
 northd/en-northd-output.c         |   8 ++
 northd/en-northd-output.h         |   2 +
 northd/inc-proc-northd.c          |  11 +-
 northd/northd.c                   |  24 ++--
 northd/northd.h                   |   4 +-
 ovn-nb.xml                        |  13 ++
 tests/ovn-northd.at               |  57 +++++++++
 15 files changed, 365 insertions(+), 34 deletions(-)
 create mode 100644 northd/en-advertised-route-sync.c
 create mode 100644 northd/en-advertised-route-sync.h

diff --git a/ic/ovn-ic.c b/ic/ovn-ic.c
index c95b556f8..659b571ce 100644
--- a/ic/ovn-ic.c
+++ b/ic/ovn-ic.c
@@ -1008,27 +1008,6 @@ get_nexthop_from_lport_addresses(bool is_v4,
     return true;
 }
 
-static bool
-prefix_is_link_local(struct in6_addr *prefix, unsigned int plen)
-{
-    if (IN6_IS_ADDR_V4MAPPED(prefix)) {
-        /* Link local range is "169.254.0.0/16". */
-        if (plen < 16) {
-            return false;
-        }
-        ovs_be32 lla;
-        inet_pton(AF_INET, "169.254.0.0", &lla);
-        return ((in6_addr_get_mapped_ipv4(prefix) & htonl(0xffff0000)) == lla);
-    }
-
-    /* ipv6, link local range is "fe80::/10". */
-    if (plen < 10) {
-        return false;
-    }
-    return (((prefix->s6_addr[0] & 0xff) == 0xfe) &&
-            ((prefix->s6_addr[1] & 0xc0) == 0x80));
-}
-
 static bool
 prefix_is_deny_listed(const struct smap *nb_options,
                       struct in6_addr *prefix,
diff --git a/lib/ovn-util.c b/lib/ovn-util.c
index b78bdbfa1..ed847517a 100644
--- a/lib/ovn-util.c
+++ b/lib/ovn-util.c
@@ -1351,3 +1351,25 @@ ovn_update_swconn_at(struct rconn *swconn, const char *target,
 
     return notify;
 }
+
+bool
+prefix_is_link_local(const struct in6_addr *prefix, unsigned int plen)
+{
+    if (IN6_IS_ADDR_V4MAPPED(prefix)) {
+        /* Link local range is "169.254.0.0/16". */
+        if (plen < 16) {
+            return false;
+        }
+        ovs_be32 lla;
+        inet_pton(AF_INET, "169.254.0.0", &lla);
+        return ((in6_addr_get_mapped_ipv4(prefix) & htonl(0xffff0000)) == lla);
+    }
+
+    /* ipv6, link local range is "fe80::/10". */
+    if (plen < 10) {
+        return false;
+    }
+    return (((prefix->s6_addr[0] & 0xff) == 0xfe) &&
+            ((prefix->s6_addr[1] & 0xc0) == 0x80));
+}
+
diff --git a/lib/ovn-util.h b/lib/ovn-util.h
index 899bd9d12..31c2c68df 100644
--- a/lib/ovn-util.h
+++ b/lib/ovn-util.h
@@ -487,4 +487,6 @@ void ovn_exit_args_finish(struct ovn_exit_args *exit_args);
 bool ovn_update_swconn_at(struct rconn *swconn, const char *target,
                           int probe_interval, const char *where);
 
+bool prefix_is_link_local(const struct in6_addr *prefix, unsigned int plen);
+
 #endif /* OVN_UTIL_H */
diff --git a/lib/stopwatch-names.h b/lib/stopwatch-names.h
index 660c653fb..dc4129ee5 100644
--- a/lib/stopwatch-names.h
+++ b/lib/stopwatch-names.h
@@ -34,5 +34,6 @@
 #define LR_NAT_RUN_STOPWATCH_NAME "lr_nat_run"
 #define LR_STATEFUL_RUN_STOPWATCH_NAME "lr_stateful"
 #define LS_STATEFUL_RUN_STOPWATCH_NAME "ls_stateful"
+#define ADVERTISED_ROUTE_SYNC_RUN_STOPWATCH_NAME "advertised_route_sync"
 
 #endif
diff --git a/northd/automake.mk b/northd/automake.mk
index 6566ad299..a2797237a 100644
--- a/northd/automake.mk
+++ b/northd/automake.mk
@@ -34,6 +34,8 @@ northd_ovn_northd_SOURCES = \
 	northd/en-ls-stateful.h \
 	northd/en-sampling-app.c \
 	northd/en-sampling-app.h \
+	northd/en-advertised-route-sync.c \
+	northd/en-advertised-route-sync.h \
 	northd/inc-proc-northd.c \
 	northd/inc-proc-northd.h \
 	northd/ipam.c \
diff --git a/northd/en-advertised-route-sync.c b/northd/en-advertised-route-sync.c
new file mode 100644
index 000000000..46ae3adf8
--- /dev/null
+++ b/northd/en-advertised-route-sync.c
@@ -0,0 +1,202 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+
+#include "openvswitch/vlog.h"
+#include "stopwatch.h"
+#include "northd.h"
+
+#include "en-advertised-route-sync.h"
+#include "lib/stopwatch-names.h"
+#include "openvswitch/hmap.h"
+#include "ovn-util.h"
+
+VLOG_DEFINE_THIS_MODULE(en_advertised_route_sync);
+
+static void
+advertised_route_table_sync(
+    struct ovsdb_idl_txn *ovnsb_txn,
+    const struct sbrec_advertised_route_table *sbrec_advertised_route_table,
+    const struct hmap *parsed_routes);
+
+void
+*en_advertised_route_sync_init(struct engine_node *node OVS_UNUSED,
+                     struct engine_arg *arg OVS_UNUSED)
+{
+    return NULL;
+}
+
+void
+en_advertised_route_sync_cleanup(void *data OVS_UNUSED)
+{
+}
+
+void
+en_advertised_route_sync_run(struct engine_node *node, void *data OVS_UNUSED)
+{
+    struct routes_data *routes_data
+        = engine_get_input_data("routes", node);
+    const struct engine_context *eng_ctx = engine_get_context();
+    const struct sbrec_advertised_route_table *sbrec_advertised_route_table =
+        EN_OVSDB_GET(engine_get_input("SB_advertised_route", node));
+
+    stopwatch_start(ADVERTISED_ROUTE_SYNC_RUN_STOPWATCH_NAME, time_msec());
+
+    advertised_route_table_sync(eng_ctx->ovnsb_idl_txn,
+                      sbrec_advertised_route_table,
+                      &routes_data->parsed_routes);
+
+    stopwatch_stop(ADVERTISED_ROUTE_SYNC_RUN_STOPWATCH_NAME, time_msec());
+    engine_set_node_state(node, EN_UPDATED);
+}
+
+struct ar_entry {
+    struct hmap_node hmap_node;
+
+    const struct sbrec_advertised_route *sb_route;
+    const struct sbrec_datapath_binding *sb_db;
+
+    const struct sbrec_port_binding *logical_port;
+    char *ip_prefix;
+    bool stale;
+};
+
+static struct ar_entry *
+ar_alloc_entry(struct hmap *routes,
+                  const struct sbrec_datapath_binding *sb_db,
+                  const struct sbrec_port_binding *logical_port,
+                  const char *ip_prefix)
+{
+    struct ar_entry *route_e = xzalloc(sizeof *route_e);
+
+    route_e->sb_db = sb_db;
+    route_e->logical_port = logical_port;
+    route_e->ip_prefix = xstrdup(ip_prefix);
+    route_e->stale = false;
+    uint32_t hash = uuid_hash(&sb_db->header_.uuid);
+    hash = hash_string(logical_port->logical_port, hash);
+    hash = hash_string(ip_prefix, hash);
+    hmap_insert(routes, &route_e->hmap_node, hash);
+
+    return route_e;
+}
+
+static struct ar_entry *
+ar_lookup_or_add(struct hmap *route_map,
+                    const struct sbrec_datapath_binding *sb_db,
+                    const struct sbrec_port_binding *logical_port,
+                    const char *ip_prefix)
+{
+    struct ar_entry *route_e;
+    uint32_t hash;
+
+    hash = uuid_hash(&sb_db->header_.uuid);
+    hash = hash_string(logical_port->logical_port, hash);
+    hash = hash_string(ip_prefix, hash);
+    HMAP_FOR_EACH_WITH_HASH (route_e, hmap_node, hash, route_map) {
+        if (!uuid_equals(&sb_db->header_.uuid,
+                         &route_e->sb_db->header_.uuid)) {
+            continue;
+        }
+
+        if (!uuid_equals(&logical_port->header_.uuid,
+                         &route_e->logical_port->header_.uuid)) {
+            continue;
+        }
+
+        if (strcmp(ip_prefix, route_e->ip_prefix)) {
+            continue;
+        }
+
+        return route_e;
+    }
+
+    route_e = ar_alloc_entry(route_map, sb_db,
+                             logical_port, ip_prefix);
+    return route_e;
+}
+
+static void
+route_erase_entry(struct ar_entry *route_e)
+{
+    free(route_e->ip_prefix);
+    free(route_e);
+}
+
+static void
+advertised_route_table_sync(
+    struct ovsdb_idl_txn *ovnsb_txn,
+    const struct sbrec_advertised_route_table *sbrec_advertised_route_table,
+    const struct hmap *parsed_routes)
+{
+    if (!ovnsb_txn) {
+        return;
+    }
+
+    struct hmap sync_routes = HMAP_INITIALIZER(&sync_routes);
+
+    const struct parsed_route *route;
+
+    struct ar_entry *route_e;
+    const struct sbrec_advertised_route *sb_route;
+    SBREC_ADVERTISED_ROUTE_TABLE_FOR_EACH (sb_route,
+                                           sbrec_advertised_route_table) {
+        route_e = ar_alloc_entry(&sync_routes,
+                                    sb_route->datapath,
+                                    sb_route->logical_port,
+                                    sb_route->ip_prefix);
+        route_e->stale = true;
+        route_e->sb_route = sb_route;
+    }
+
+    HMAP_FOR_EACH (route, key_node, parsed_routes) {
+        if (route->is_discard_route) {
+            continue;
+        }
+        if (prefix_is_link_local(&route->prefix, route->plen)) {
+            continue;
+        }
+        if (!smap_get_bool(&route->od->nbr->options, "dynamic-routing",
+                           false)) {
+            continue;
+        }
+
+        char *ip_prefix = normalize_v46_prefix(&route->prefix,
+                                               route->plen);
+        route_e = ar_lookup_or_add(&sync_routes, route->od->sb,
+                                   route->out_port->sb, ip_prefix);
+        route_e->stale = false;
+
+        if (!route_e->sb_route) {
+            const struct sbrec_advertised_route *sr =
+                sbrec_advertised_route_insert(ovnsb_txn);
+            sbrec_advertised_route_set_datapath(sr, route_e->sb_db);
+            sbrec_advertised_route_set_logical_port(sr, route_e->logical_port);
+            sbrec_advertised_route_set_ip_prefix(sr, route_e->ip_prefix);
+            route_e->sb_route = sr;
+        }
+
+        free(ip_prefix);
+    }
+
+    HMAP_FOR_EACH_POP (route_e, hmap_node, &sync_routes) {
+        if (route_e->stale) {
+            sbrec_advertised_route_delete(route_e->sb_route);
+        }
+        route_erase_entry(route_e);
+    }
+    hmap_destroy(&sync_routes);
+}
+
diff --git a/northd/en-advertised-route-sync.h b/northd/en-advertised-route-sync.h
new file mode 100644
index 000000000..c6a41c713
--- /dev/null
+++ b/northd/en-advertised-route-sync.h
@@ -0,0 +1,27 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef EN_ADVERTISED_ROUTE_SYNC_H
+#define EN_ADVERTISED_ROUTE_SYNC_H 1
+
+#include "lib/inc-proc-eng.h"
+
+struct advertised_route_sync_data {
+};
+
+void *en_advertised_route_sync_init(struct engine_node *, struct engine_arg *);
+void en_advertised_route_sync_cleanup(void *data);
+void en_advertised_route_sync_run(struct engine_node *, void *data);
+
+
+#endif /* EN_ADVERTISED_ROUTE_SYNC_H */
diff --git a/northd/en-northd-output.c b/northd/en-northd-output.c
index 98098d974..555ed2b9e 100644
--- a/northd/en-northd-output.c
+++ b/northd/en-northd-output.c
@@ -72,3 +72,11 @@ northd_output_fdb_aging_handler(struct engine_node *node,
     engine_set_node_state(node, EN_UPDATED);
     return true;
 }
+
+bool
+northd_output_advertised_route_sync_handler(struct engine_node *node,
+                                            void *data OVS_UNUSED)
+{
+    engine_set_node_state(node, EN_UPDATED);
+    return true;
+}
diff --git a/northd/en-northd-output.h b/northd/en-northd-output.h
index 5f577b89c..00391ace3 100644
--- a/northd/en-northd-output.h
+++ b/northd/en-northd-output.h
@@ -17,5 +17,7 @@ bool northd_output_mac_binding_aging_handler(struct engine_node *node,
                                              void *data OVS_UNUSED);
 bool northd_output_fdb_aging_handler(struct engine_node *node,
                                      void *data OVS_UNUSED);
+bool northd_output_advertised_route_sync_handler(struct engine_node *node,
+                                                 void *data OVS_UNUSED);
 
 #endif
diff --git a/northd/inc-proc-northd.c b/northd/inc-proc-northd.c
index 6e0aa04c4..77a7d637c 100644
--- a/northd/inc-proc-northd.c
+++ b/northd/inc-proc-northd.c
@@ -41,6 +41,7 @@
 #include "en-sampling-app.h"
 #include "en-sync-sb.h"
 #include "en-sync-from-sb.h"
+#include "en-advertised-route-sync.h"
 #include "unixctl.h"
 #include "util.h"
 
@@ -102,7 +103,8 @@ static unixctl_cb_func chassis_features_list;
     SB_NODE(fdb, "fdb") \
     SB_NODE(static_mac_binding, "static_mac_binding") \
     SB_NODE(chassis_template_var, "chassis_template_var") \
-    SB_NODE(logical_dp_group, "logical_dp_group")
+    SB_NODE(logical_dp_group, "logical_dp_group") \
+    SB_NODE(advertised_route, "advertised_route")
 
 enum sb_engine_node {
 #define SB_NODE(NAME, NAME_STR) SB_##NAME,
@@ -161,6 +163,7 @@ static ENGINE_NODE(route_policies, "route_policies");
 static ENGINE_NODE(routes, "routes");
 static ENGINE_NODE(bfd, "bfd");
 static ENGINE_NODE(bfd_sync, "bfd_sync");
+static ENGINE_NODE(advertised_route_sync, "advertised_route_sync");
 
 void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
                           struct ovsdb_idl_loop *sb)
@@ -263,6 +266,10 @@ void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
     engine_add_input(&en_bfd_sync, &en_route_policies, NULL);
     engine_add_input(&en_bfd_sync, &en_northd, bfd_sync_northd_change_handler);
 
+    engine_add_input(&en_advertised_route_sync, &en_routes, NULL);
+    engine_add_input(&en_advertised_route_sync, &en_sb_advertised_route,
+                     engine_noop_handler);
+
     engine_add_input(&en_sync_meters, &en_nb_acl, NULL);
     engine_add_input(&en_sync_meters, &en_nb_meter, NULL);
     engine_add_input(&en_sync_meters, &en_sb_meter, NULL);
@@ -344,6 +351,8 @@ void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
                      northd_output_mac_binding_aging_handler);
     engine_add_input(&en_northd_output, &en_fdb_aging,
                      northd_output_fdb_aging_handler);
+    engine_add_input(&en_northd_output, &en_advertised_route_sync,
+                     northd_output_advertised_route_sync_handler);
 
     struct engine_arg engine_arg = {
         .nb_idl = nb->idl,
diff --git a/northd/northd.c b/northd/northd.c
index b01e40ecd..0b495a2b6 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -11127,7 +11127,8 @@ route_hash(struct parsed_route *route)
 }
 
 static bool
-find_static_route_outport(struct ovn_datapath *od, const struct hmap *lr_ports,
+find_static_route_outport(const struct ovn_datapath *od,
+    const struct hmap *lr_ports,
     const struct nbrec_logical_router_static_route *route, bool is_ipv4,
     const char **p_lrp_addr_s, struct ovn_port **p_out_port);
 
@@ -11229,7 +11230,7 @@ parsed_route_add(const struct ovn_datapath *od,
     new_pr->route_table_id = route_table_id;
     new_pr->is_src_route = is_src_route;
     new_pr->hash = route_hash(new_pr);
-    new_pr->nbr = od->nbr;
+    new_pr->od = od;
     new_pr->ecmp_symmetric_reply = ecmp_symmetric_reply;
     new_pr->is_discard_route = is_discard_route;
     if (!is_discard_route) {
@@ -11255,7 +11256,8 @@ parsed_route_add(const struct ovn_datapath *od,
 }
 
 static void
-parsed_routes_add_static(struct ovn_datapath *od, const struct hmap *lr_ports,
+parsed_routes_add_static(const struct ovn_datapath *od,
+                  const struct hmap *lr_ports,
                   const struct nbrec_logical_router_static_route *route,
                   const struct hmap *bfd_connections,
                   struct hmap *routes, struct simap *route_tables,
@@ -11381,7 +11383,8 @@ parsed_routes_add_static(struct ovn_datapath *od, const struct hmap *lr_ports,
 }
 
 static void
-parsed_routes_add_connected(struct ovn_datapath *od, const struct ovn_port *op,
+parsed_routes_add_connected(const struct ovn_datapath *od,
+                            const struct ovn_port *op,
                             struct hmap *routes)
 {
     for (size_t i = 0; i < op->lrp_networks.n_ipv4_addrs; i++) {
@@ -11410,14 +11413,14 @@ parsed_routes_add_connected(struct ovn_datapath *od, const struct ovn_port *op,
 }
 
 void
-build_parsed_routes(struct ovn_datapath *od, const struct hmap *lr_ports,
-                    const struct hmap *bfd_connections, struct hmap *routes,
-                    struct simap *route_tables,
-                    struct hmap *bfd_active_connections)
+build_parsed_routes(const struct ovn_datapath *od, const struct hmap *lr_ports,
+                     const struct hmap *bfd_connections, struct hmap *routes,
+                     struct simap *route_tables,
+                     struct hmap *bfd_active_connections)
 {
     struct parsed_route *pr;
     HMAP_FOR_EACH (pr, key_node, routes) {
-        if (pr->nbr == od->nbr) {
+        if (pr->od == od) {
             pr->stale = true;
         }
     }
@@ -11641,7 +11644,8 @@ build_route_match(const struct ovn_port *op_inport, uint32_t rtb_id,
 
 /* Output: p_lrp_addr_s and p_out_port. */
 static bool
-find_static_route_outport(struct ovn_datapath *od, const struct hmap *lr_ports,
+find_static_route_outport(const struct ovn_datapath *od,
+    const struct hmap *lr_ports,
     const struct nbrec_logical_router_static_route *route, bool is_ipv4,
     const char **p_lrp_addr_s, struct ovn_port **p_out_port)
 {
diff --git a/northd/northd.h b/northd/northd.h
index 9457a7be6..2be34e249 100644
--- a/northd/northd.h
+++ b/northd/northd.h
@@ -714,7 +714,7 @@ struct parsed_route {
     const struct nbrec_logical_router_static_route *route;
     bool ecmp_symmetric_reply;
     bool is_discard_route;
-    const struct nbrec_logical_router *nbr;
+    const struct ovn_datapath *od;
     bool stale;
     struct sset ecmp_selection_fields;
     enum route_source source;
@@ -745,7 +745,7 @@ void northd_indices_create(struct northd_data *data,
 
 void route_policies_init(struct route_policies_data *);
 void route_policies_destroy(struct route_policies_data *);
-void build_parsed_routes(struct ovn_datapath *, const struct hmap *,
+void build_parsed_routes(const struct ovn_datapath *, const struct hmap *,
                          const struct hmap *, struct hmap *, struct simap *,
                          struct hmap *);
 uint32_t get_route_table_id(struct simap *, const char *);
diff --git a/ovn-nb.xml b/ovn-nb.xml
index 8373ddb99..7f17c8059 100644
--- a/ovn-nb.xml
+++ b/ovn-nb.xml
@@ -2946,6 +2946,19 @@ or
         option is not present the limit is not set and the zone limit is
         derived from OvS default datapath limit.
       </column>
+
+      <column name="options" key="dynamic-routing" type='{"type": "boolean"}'>
+        If set to <code>true</code> then this <ref table="Logical_Router"/>
+        can participate in dynamic routing with components outside of OVN.
+
+        It will synchronize all routes to the soutbound
+        <ref table="Route" db="OVN_SB"/> table that are relevant for the
+        router. This includes:
+        * all "connected" routes implicitly created by networks associated with
+          this Logical Router
+        * all <ref table="Logical_Router_Static_Route"/> that are applied to
+          this Logical Router
+      </column>
     </group>
 
     <group title="Common Columns">
diff --git a/tests/ovn-northd.at b/tests/ovn-northd.at
index 21d9d63ab..b677c4b87 100644
--- a/tests/ovn-northd.at
+++ b/tests/ovn-northd.at
@@ -14384,3 +14384,60 @@ AT_CHECK([ovn-sbctl lflow-list S1 | grep ls_out_acl_action | grep priority=500 |
 
 AT_CLEANUP
 ])
+
+OVN_FOR_EACH_NORTHD_NO_HV([
+AT_SETUP([dynamic-routing - sync to sb])
+AT_KEYWORDS([dynamic-routing])
+ovn_start
+
+# adding a router - still nothing here
+check ovn-nbctl lr-add lr0
+check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing=true
+check_row_count Advertised_Route 0
+datapath=$(ovn-sbctl --bare --columns _uuid list datapath_binding lr0)
+
+# adding a LRP adds a route entry for the associated network
+check ovn-nbctl --wait=sb lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24
+pb=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw0)
+check_row_count Advertised_Route 1
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$pb], [0], [dnl
+10.0.0.0/24
+])
+
+# adding a second LRP adds an additional route entry
+check ovn-nbctl --wait=sb lrp-add lr0 lr0-sw1 00:00:00:00:ff:02 10.0.1.1/24
+pb2=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw1)
+check_row_count Advertised_Route 2
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$pb], [0], [dnl
+10.0.0.0/24
+])
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$pb2], [0], [dnl
+10.0.1.0/24
+])
+
+# adding a static route adds an additional entry
+check ovn-nbctl --wait=sb lr-route-add lr0 192.168.0.0/24 10.0.0.10
+check_row_count Advertised_Route 3
+check_row_count Advertised_Route 2 logical_port=$pb
+check_row_count Advertised_Route 1 logical_port=$pb ip_prefix=192.168.0.0/24
+
+# removing the option:dynamic-routing removes all routes
+check ovn-nbctl --wait=sb remove Logical_Router lr0 option dynamic-routing
+check_row_count Advertised_Route 0
+
+# and setting it again adds them again
+check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing=true
+check_row_count Advertised_Route 3
+
+# removing the lrp used for the static route removes both route entries
+check ovn-nbctl --wait=sb lrp-del lr0-sw0
+check_row_count Advertised_Route 1
+check_row_count Advertised_Route 1 logical_port=$pb2
+
+# removing the lr will remove all routes
+check ovn-nbctl --wait=sb lr-del lr0
+check_row_count Advertised_Route 0
+
+AT_CLEANUP
+])
+

From patchwork Wed Dec 18 10:24:55 2024
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2024810
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=MCKR5rer;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=MCKR5rer;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::138; helo=smtp1.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp1.osuosl.org (smtp1.osuosl.org [IPv6:2605:bc80:3010::138])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YCqZ85ND8z1yRt
	for <incoming@patchwork.ozlabs.org>; Wed, 18 Dec 2024 21:25:20 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp1.osuosl.org (Postfix) with ESMTP id 2540F84DFE;
	Wed, 18 Dec 2024 10:25:19 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id BxaZxmPsd-68; Wed, 18 Dec 2024 10:25:17 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp1.osuosl.org 6613484E08
Authentication-Results: smtp1.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=MCKR5rer;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=MCKR5rer
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp1.osuosl.org (Postfix) with ESMTPS id 6613484E08;
	Wed, 18 Dec 2024 10:25:17 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id E74F7C0888;
	Wed, 18 Dec 2024 10:25:16 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp2.osuosl.org (smtp2.osuosl.org [IPv6:2605:bc80:3010::133])
 by lists.linuxfoundation.org (Postfix) with ESMTP id DA001C0864
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:15 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp2.osuosl.org (Postfix) with ESMTP id C79FD4170D
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:15 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
 by localhost (smtp2.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id uULlUZ_qd2fA for <dev@openvswitch.org>;
 Wed, 18 Dec 2024 10:25:14 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2612::62e;
 helo=eur05-am6-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp2.osuosl.org 3B1DB4170B
Authentication-Results: smtp2.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp2.osuosl.org 3B1DB4170B
Authentication-Results: smtp2.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=MCKR5rer;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=MCKR5rer
Received: from EUR05-AM6-obe.outbound.protection.outlook.com
 (mail-am6eur05on2062e.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2612::62e])
 by smtp2.osuosl.org (Postfix) with ESMTPS id 3B1DB4170B
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:14 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=V4Xok/knlcqcIa1DXvra7Xr72MIlc+/Nv4xUgoSDMYh0V/dbMTYteHI37+Os64CnvFIiX0Hty4b1ooTQ4FySlT/4JLrRXc8fxUhBZnE9Lcx0mr3iPY60uf7Uuevj3BZuS61Md9qjSpCKgNJxNIWzdFPZRNli5Vl+dOzj0gc14qjrMo3wYebeBc3L7n87vN8jSnJ+Q292tfPw+m8AfxhLpKWtj16RujkUnjxP+HNvCT9ZrRSpBxMVplxuHk/upn5BYgsvxpJgNSXYzsV+h+6qpPzj9SoGul4Wic3gkA0xmsx1lewP4451oj2P//xKroOcRhoeG8RXxpLB1zKyEURqsw==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=H9f6K1nqcib0uR1nfgKR6Sb6P5ll6Cv+o3GmJQZ6bk8=;
 b=ajshLFEPJ2Bm2VJsUeQcHZ5gpcRPM1bfBbbBHTZJSL5sAaweiJQITPtv9uR+SbD65VpNUML+1x1DdAR0yZ1mK60RU8FJai7HPfmr+sV6BHusEi5JwFivt1u3CyGttLzPoljxxD65wnlAMqxymgZsO4KZAOsKNzT+lMdWxFCFH7f1mgQun2MdWIPKOY88KfYlis1ZsAYGYRajWCD9O2mZpS7q8eTup2Vv8sa5kg4EiBvk9/xfKT2SpcZTmU/CYauRplAR62rE4rGkY9no8ETMt5CZbMOYYGGzYjdEv+UhdNfG5X4hIxVDuJQ+Dxj7HMvlIKBWwMqo1N3h1V0qN8Futg==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=H9f6K1nqcib0uR1nfgKR6Sb6P5ll6Cv+o3GmJQZ6bk8=;
 b=MCKR5rerTLH1Nby/tziKfJFEDiOKECejtELZs3z0rdFsTtLL5VJ6gvnj8KmIYUT9tSLFZ3BchOVmKfxzV6wDN0BgJoumecYTCuE3AqRx6Wd0YN71AxrMHpZbka3beXHlasqUIjFmvQjaUu8FhswHteWVXRJ8U9WG3OxRGpIurao139hnBxEBOpoe3SaNEU4m5r81xJdv/DH8t+WnvUkpUXV0Bdnf5QCDmKeJ566oCBwuTJnwQqkgyZXLngtNxUTtMyuBWf0p2PxUFynAMNhKqugm1thtXADMvy1N1PZy2kZJM7N2q4yVosL42TdB3FUCu2HkEWhQ3IUsjqfN8wuJZQ==
Received: from DU2PR04CA0220.eurprd04.prod.outlook.com (2603:10a6:10:2b1::15)
 by DU2PR10MB7905.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:496::20)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:25:09 +0000
Received: from DU2PEPF00028D0E.eurprd03.prod.outlook.com
 (2603:10a6:10:2b1:cafe::24) by DU2PR04CA0220.outlook.office365.com
 (2603:10a6:10:2b1::15) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8251.22 via Frontend Transport; Wed,
 18 Dec 2024 10:25:08 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D0E.mail.protection.outlook.com (10.167.242.22) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8251.15 via Frontend Transport; Wed, 18 Dec 2024 10:24:58 +0000
Received: from EUR05-DB8-obe.outbound.protection.outlook.com (104.47.17.111)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Wed, 18 Dec 2024 10:25:07
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 92770026
X-ExclaimerImprintLatency: 89746710
X-ExclaimerImprintAction: a4340e9052dd4562841f5b4457491bba
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=aKqeMtK7DDPbeeGhh1l58gnB5T2/v4U9O/i9GraNKjsKjijgqBqhIKSbfw6h2DU8ftiHfswuJW2IBuBfSf8mXIt/LNBG7XBxKcyzI91RpsTRB9YjlpGnFcH7+5DeWVg6u7YI8bDIj0+ArUu8i8tfVJyaekcwyf+okU/Z/6cESdw0gPS2gfrJx1fd2BaxVN/VMDHwgvjuUAoLIBFGq68M62QJLwc03J+RUR5V9zZOxEUkt/E8GVmgwQJewGCvMPjYQwkVnnsGGq8uCIdvJQb6pfHjOLY5cAbvAumck3jbov4z759bYbC800eKEIeBZ2R3/Mrzy6fC8/lkGp0ejEBj7w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=H9f6K1nqcib0uR1nfgKR6Sb6P5ll6Cv+o3GmJQZ6bk8=;
 b=rS21YpKfWYcqt4DJogKk4ifXnMpUETs8C8KdAuyx7do7ST4eTHpstTMQMbPY8UROkpKw2KoC7KMU5xE/dQzzf5wF4vKimWkHubx5oscTQGeqYf5bjLeojFZ8wknqJ+GEkQVPvFuqH8wxwYuzWPRJlNn6CHCK1XkKw5ac62UQvHGBxskQUj8Ac1kaYlC5bJghD9LcosgDLEG/7dW6VblCq5G83MQsfstZPxA5G8Hzg4IJtcCV/2C4Ut1MVZhLS0+eVSP/Tkbw8ziUoaQ1mrNrowFnpba9wWo3cIiISmxnoTvtRl/w13CPDHN3fVNuLXRYdOnTtpdm/o8Jgh6KWyw+ww==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=H9f6K1nqcib0uR1nfgKR6Sb6P5ll6Cv+o3GmJQZ6bk8=;
 b=MCKR5rerTLH1Nby/tziKfJFEDiOKECejtELZs3z0rdFsTtLL5VJ6gvnj8KmIYUT9tSLFZ3BchOVmKfxzV6wDN0BgJoumecYTCuE3AqRx6Wd0YN71AxrMHpZbka3beXHlasqUIjFmvQjaUu8FhswHteWVXRJ8U9WG3OxRGpIurao139hnBxEBOpoe3SaNEU4m5r81xJdv/DH8t+WnvUkpUXV0Bdnf5QCDmKeJ566oCBwuTJnwQqkgyZXLngtNxUTtMyuBWf0p2PxUFynAMNhKqugm1thtXADMvy1N1PZy2kZJM7N2q4yVosL42TdB3FUCu2HkEWhQ3IUsjqfN8wuJZQ==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU4PR10MB9191.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:568::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:24:57 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8272.005; Wed, 18 Dec 2024
 10:24:57 +0000
Date: Wed, 18 Dec 2024 11:24:55 +0100
To: dev@openvswitch.org
Message-ID: 
 <95a4c1fdce58099883cec0610bb335aad0db4b37.1734513749.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1734513749.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1734513749.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0111.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::14) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU4PR10MB9191:EE_|DU2PEPF00028D0E:EE_|DU2PR10MB7905:EE_
X-MS-Office365-Filtering-Correlation-Id: b746b1c6-1e75-40c0-9b13-08dd1f4e3f08
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info-Original: 
 sczL6eb3S5rlhDkrWhEIMOuWfqKhyTueY9H4gUCsXLkIKbtiTCekJXPvY6eXlTJjs2JDqAvb/ABLkJ3/eR55mo/CHnjlv9lnXUkdrENnT4IRJKmTRwoGHLAUnw4g4oufqoN6c4yTEtH4jY6iBbAEGQkGBV2UtZau9VjWbtRPS6PMp3KFm305mM0Qa1FVsbpBgtkGX/rRXviq+nLmDffxCUP0AlJawU9YeR5jAPbxV1QnJG865Hc3DUfgvl7goICE5vKmPnKc/ttoqdDli5QW7z1oPB0oqok+sXYaOgDfFHEcRwNvNBPTzXAQSE7CiV0fs6m1zKNXzrZ1p/0/ZtPUc7xifdt6U/tGpNtATM0JaF1UjTS8PLfluzlM3bEHXX6+fZH67lcqgKwpCvGXaGC2cRUDxxJcyxOl2vcf3COG4rhhmLkQ/q974NBUwCMb2/EqiTFfowG6+k9kM/ZPNpSZDN7hPMRB8xg9lrqxIgBHeqqSE9S14GViQ9EfwxFflidwQL8Pcw8wJ1JpVavNu51EUToqldgk1Smg6V3LOI9i4jbmAkhp+gqLLHffHzUHMduUnHvCLpUwmnNyBz+MS8e4UODomJ17hiEmNcCRjl6B/MPutYPzPlLCII4UIbSV8uD3tmVp8UJxLub4dXJfdrL1MWzItHVtQdDu8dLce5/OEA+ZghpYWLg6ImGrJs9895kFbsQrfpbhx5JKXH/Lweh4USBzKDS3vtFtonOT7BjqhUyNbFw0NfPrRsBzyBwXng7WERuwJ490gZ8fNxd3XX8eCGlx2Pw+/oUtm6HXonXVPGgW5lx6USRZjsqxXed0tJZio1LC0OHtAADWWAL9ySHwENUr3OrzAa7evKscQafyle+RXCzvbYebJIuBEbE3lPu5hoW6L9e8MHMkuYi1iKUQo1qQ1aLKuxi7e4qXUrMjnuA5oZYv3WxG/UjiCLgEgjFZ2lI8h8lIFR024Z5Z6yHkeyxrrHVGRPQII6b3gyjCf02X7B0yVJDDPw7f3+gBvh4oClJNRM5bbNxQhJBlM7VqLStNor+e+lolCJ1HhlqGsV3Lm+0UJpXH2PUlzmHMs6hCdOhA0XXROeGF+2c7G/EXCAvMvkCqYc8iIx4gziVUVZ4joP3UvD3bp+cA/CxBewwf8Psvg5N99k3cub33JKPChEaj/VFbKamGjMq5UxPkEC5jdbj8scdo76iNIcwr7BVsOJrVYrQs6AINzroTIACyNGRTjzVij6ZwodE1MVW6IP+UfoXnn8fFix2Q2sxhc6Jh00pGYF19+nLb09Iu5M7peFDD9bsrmGwLEzZJVsbinmeTuvOn8Juauh1EI0oHXjsNLU0hHVPYEJxfVUZS4N57DJ4TVoyUZKKoMhEL+gFxJgmHlBmOHueVD3/rROBiGyeS
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(376014)(366016)(1800799024); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU4PR10MB9191
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D0E.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 a1ad4bff-465a-4c67-a132-08dd1f4e384d
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|82310400026|35042699022|36860700013|376014|1800799024|14060799003;
X-Microsoft-Antispam-Message-Info: 
 g33EjEKOj89/mr7pqgEcbLhZCmhwebeAc8Qav7f9W+7ThTqqlbzwiDhZG8WpMpcqWPx/radFQNoQhx+CCI2cpFeqExiOCSDDIwp/ZxRho78OFRuKWGT0uC5fDqrvrKsNtC28Pgu4q91F3YyX/HkYnYHYZBaNmQjboSsBusSKEbLZ+c1XOokyXfcrVqjy7ZqSWwIPhMRxw2kl5djsVMwvPJ4Wa5f8B1i1bU/BbDj5x1QA75ggIoXbRzuZrvqJrnx5dyTuFY1BnXWHqTjLSajY5UfkneeHruPQwMx1ehyNls70VmFr0CGZEjX4MqUFtiaZkNyZgNqDib7A5TtMsJcMS3shOPgwq2TOyvC+u3myIq4iclHfDnI8L6Hqk0OJoSyOzVZfVflJ5yEhLeXscsxSYjnFyjJ7sD8l432g6KRZfyjSHSGMICvJmLPCw/GnqNHtf9xRr5uFRIF1s4kGyvtCi4kaWmM6WWJRYtaYpM5sLlLwafnvrYH3n+6bje1K46ly02HrKOYpf7v+I5rhGwh1na0C4Q7np/yEAamjRZofGA1PDwCNk9M4NauB+subnpsaAxUB4vwmRj1kqcPtPKA7eHWQh99ftiwvoAWpQvCruqR09H6gIKlOeUHBaPUfojizva7DHBSKn0ayB3Tldw2W44mmkEfJdnUwzQ0Rjfk/fgPJAth9dEUS+r8nYHjlG7WULM8QYewG5d+KEaCw2MVesSUnYtk+b0Vn9OD79jpKFNvwVKPLIF1BF6ZxqYheOr1vvRbdqEVRD04MWne2UUWLxb+VG+RrKjXlmf1UXyrGjbVSd6mnHHsGwKc+LtXBfg43Zx3gU2s+f5sdzbh+I4M+Ufp7lxm0jAFq+O3AIylJWXp5iPluFLrv/Yp115ak6GVYqgY8C+VSsipeeWmtb5P4q6nin4ED4mXYnmg3nfebmZKrzAjzgy4bnO9jto2+vb5+K5thJdFmOWMsMrqy1mZmc6tzKnx+enNwEmIwq19nWlz01AzlJ+DImUsXI37sAkp9PZH7nI3v7D25dImQpyhxuchpN4Ywa9p9VFlM9VekMrBe2VlrfWOHCqgqqUUmoNNToV+cD4Z8dTqsUdgqSKRSbpbzSfc8+nVcpFpvpvyvWD0pWnvRUPlfPibHbLjPkmChaXA+S85CXkEUBwGDijh/gzH0lLZecPBR7fjn7XwQakCDJ4d3IAKeCGY0FwgmPC9aHDKZVGAu1yEfMaK3Wrv9FJ/FbrbSbmQSGzl5lgYHNHLDthWCPwK9jWAImceBnm3OBltRXryK4bgEkSpr349/QhbJ1OU/+2+rZRzZJXVuUD22utK+uVmuZvmir4AQIKtVhwh4ZumgIDYmXp/u9SQzprEiWTU1pY5YlZi/Kesd4PJkbd5ARoTjZkpA+wmXHK6ABE+ywKeIRZpffGG5Xmq9Xy61Yd66tkUY04eRXaOkM+LapQnCbODxYx2fiO8lrZbCyfzALzxIa1oZmZqx5oDywTzi/LjmpaisD7Z7dZP4cT4=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(82310400026)(35042699022)(36860700013)(376014)(1800799024)(14060799003);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Dec 2024 10:24:58.8322 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 b746b1c6-1e75-40c0-9b13-08dd1f4e3f08
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D0E.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU2PR10MB7905
Subject: [ovs-dev] [PATCH ovn v2 2/6] northd: Add filtering which routes to
 advertise.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

previously all routes of a logical router where announced. However in
some cases it makes more sense to only announce static or connected
routes. Therefor we add options to LR and LRP to define which routes to
advertise.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 NEWS                              |  3 ++
 northd/en-advertised-route-sync.c | 18 +++++++
 ovn-nb.xml                        | 78 ++++++++++++++++++++++++++++---
 tests/ovn-northd.at               | 61 +++++++++++++++++++++++-
 4 files changed, 152 insertions(+), 8 deletions(-)

diff --git a/northd/en-advertised-route-sync.c b/northd/en-advertised-route-sync.c
index 46ae3adf8..33097ed72 100644
--- a/northd/en-advertised-route-sync.c
+++ b/northd/en-advertised-route-sync.c
@@ -15,6 +15,7 @@
 #include <config.h>
 
 #include "openvswitch/vlog.h"
+#include "smap.h"
 #include "stopwatch.h"
 #include "northd.h"
 
@@ -135,6 +136,13 @@ route_erase_entry(struct ar_entry *route_e)
     free(route_e);
 }
 
+static bool
+get_nbrp_or_nbr_option(const struct ovn_port *op, const char *key)
+{
+    return smap_get_bool(&op->nbrp->options, key,
+        smap_get_bool(&op->od->nbr->options, key, false));
+}
+
 static void
 advertised_route_table_sync(
     struct ovsdb_idl_txn *ovnsb_txn,
@@ -172,6 +180,16 @@ advertised_route_table_sync(
                            false)) {
             continue;
         }
+        if (route->source == ROUTE_SOURCE_CONNECTED &&
+                !get_nbrp_or_nbr_option(route->out_port,
+                                        "dynamic-routing-connected")) {
+            continue;
+        }
+        if (route->source == ROUTE_SOURCE_STATIC &&
+                !get_nbrp_or_nbr_option(route->out_port,
+                                        "dynamic-routing-static")) {
+            continue;
+        }
 
         char *ip_prefix = normalize_v46_prefix(&route->prefix,
                                                route->plen);
diff --git a/ovn-nb.xml b/ovn-nb.xml
index 7f17c8059..fb178cbed 100644
--- a/ovn-nb.xml
+++ b/ovn-nb.xml
@@ -2951,13 +2951,45 @@ or
         If set to <code>true</code> then this <ref table="Logical_Router"/>
         can participate in dynamic routing with components outside of OVN.
 
-        It will synchronize all routes to the soutbound
-        <ref table="Route" db="OVN_SB"/> table that are relevant for the
-        router. This includes:
-        * all "connected" routes implicitly created by networks associated with
-          this Logical Router
-        * all <ref table="Logical_Router_Static_Route"/> that are applied to
-          this Logical Router
+        Users will need to use the following settings to opt into individual
+        routes types that should be advertised. See:
+        * <ref column="options" key="dynamic-routing-connected"
+               table="Logical_Router"/>
+        * <ref column="options" key="dynamic-routing-static"
+               table="Logical_Router"/>
+        * <ref column="options" key="dynamic-routing-connected"
+               table="Logical_Router_Port"/>
+        * <ref column="options" key="dynamic-routing-static"
+               table="Logical_Router_Port"/>
+      </column>
+
+      <column name="options" key="dynamic-routing-connected"
+              type='{"type": "boolean"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> is set to <code>true</code>.
+
+        If this is <code>true</code> as well then northd will synchronize all
+        "connected" routes to the southbound <ref table="Route" db="OVN_SB"/>
+        table. "Connected" here means routes implicitly created by networks
+        associated with the LRPs.
+
+        This value can be overwritten on a per LRP basis using
+        <ref column="options" key="dynamic-routing-connected"
+             table="Logical_Router_Port"/>.
+      </column>
+
+      <column name="options" key="dynamic-routing-static"
+              type='{"type": "boolean"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> is set to <code>true</code>.
+
+        If this is <code>true</code> as well then northd will synchronize all
+        <ref table="Logical_Router_Static_Route"/> to the southbound
+        <ref table="Route" db="OVN_SB"/> table.
+
+        This value can be overwritten on a per LRP basis using
+        <ref column="options" key="dynamic-routing-static"
+             table="Logical_Router_Port"/>.
       </column>
     </group>
 
@@ -3685,6 +3717,38 @@ or
           learned by the <code>ovn-ic</code> daemon.
         </p>
       </column>
+
+      <column name="options" key="dynamic-routing-connected"
+              type='{"type": "boolean"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> on the respective Logical_Router is set
+        to <code>true</code>.
+
+        If this is <code>true</code> as well then northd will synchronize all
+        "connected" routes associated with this LRP to the southbound
+        <ref table="Route" db="OVN_SB"/> table. "Connected" here means routes
+        implicitly created by network associated with this LRP.
+
+        If not set the value from <ref column="options"
+        key="dynamic-routing-connected" table="Logical_Router_Port"/> will be
+        used.
+      </column>
+
+      <column name="options" key="dynamic-routing-static"
+              type='{"type": "boolean"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> on the respective Logical_Router is set
+        to <code>true</code>.
+
+        If this is <code>true</code> as well then northd will synchronize all
+        <ref table="Logical_Router_Static_Route"/> to the southbound
+        <ref table="Route" db="OVN_SB"/> table that use this LRP as an outgoin
+        interface.
+
+        If not set the value from <ref column="options"
+        key="dynamic-routing-static" table="Logical_Router_Port"/> will be
+        used.
+      </column>
     </group>
 
     <group title="Attachment">
diff --git a/tests/ovn-northd.at b/tests/ovn-northd.at
index b677c4b87..370f1d38d 100644
--- a/tests/ovn-northd.at
+++ b/tests/ovn-northd.at
@@ -14392,7 +14392,9 @@ ovn_start
 
 # adding a router - still nothing here
 check ovn-nbctl lr-add lr0
-check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing=true
+check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing=true \
+                                 option:dynamic-routing-connected=true \
+                                 option:dynamic-routing-static=true
 check_row_count Advertised_Route 0
 datapath=$(ovn-sbctl --bare --columns _uuid list datapath_binding lr0)
 
@@ -14441,3 +14443,60 @@ check_row_count Advertised_Route 0
 AT_CLEANUP
 ])
 
+OVN_FOR_EACH_NORTHD_NO_HV([
+AT_SETUP([dynamic-routing - sync to sb filtering])
+AT_KEYWORDS([dynamic-routing])
+ovn_start
+
+# we start with announcing everything on a lr with 2 lrps and 2 static routes
+check ovn-nbctl lr-add lr0
+check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing=true \
+                                 option:dynamic-routing-connected=true \
+                                 option:dynamic-routing-static=true
+check ovn-nbctl --wait=sb lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24
+sw0=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw0)
+check ovn-nbctl --wait=sb lrp-add lr0 lr0-sw1 00:00:00:00:ff:02 10.0.1.1/24
+sw1=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw1)
+check ovn-nbctl --wait=sb lr-route-add lr0 192.168.0.0/24 10.0.0.10
+check ovn-nbctl --wait=sb lr-route-add lr0 192.168.1.0/24 10.0.1.10
+check_row_count Advertised_Route 4
+datapath=$(ovn-sbctl --bare --columns _uuid list datapath_binding lr0)
+
+# disabeling connected routes just keeps the static ones
+check ovn-nbctl --wait=sb remove Logical_Router lr0 option dynamic-routing-connected
+check_row_count Advertised_Route 2
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$sw0], [0], [dnl
+192.168.0.0/24
+])
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$sw1], [0], [dnl
+192.168.1.0/24
+])
+
+# enabeling it on lr0-sw0 will just bring this one route back
+check ovn-nbctl --wait=sb set Logical_Router_Port lr0-sw0 option:dynamic-routing-connected=true
+check_row_count Advertised_Route 3
+check_row_count Advertised_Route 2 logical_port=$sw0
+check_row_count Advertised_Route 1 logical_port=$sw0 ip_prefix=10.0.0.0/24
+check_row_count Advertised_Route 1 logical_port=$sw0 ip_prefix=192.168.0.0/24
+
+# disabeling static routes just keeps the one explicit connected route
+check ovn-nbctl --wait=sb remove Logical_Router lr0 option dynamic-routing-static
+check_row_count Advertised_Route 1
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$sw0], [0], [dnl
+10.0.0.0/24
+])
+
+# enabeling static routes on the LR, but disabeling them on lr0-sw0 also works
+check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing-static=true
+check ovn-nbctl --wait=sb set Logical_Router_Port lr0-sw0 option:dynamic-routing-static=false
+check_row_count Advertised_Route 2
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$sw0], [0], [dnl
+10.0.0.0/24
+])
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$sw1], [0], [dnl
+192.168.1.0/24
+])
+
+AT_CLEANUP
+])
+

From patchwork Wed Dec 18 10:24:57 2024
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2024813
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=fVZK0djw;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=fVZK0djw;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::138; helo=smtp1.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp1.osuosl.org (smtp1.osuosl.org [IPv6:2605:bc80:3010::138])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YCqb832fSz1yRt
	for <incoming@patchwork.ozlabs.org>; Wed, 18 Dec 2024 21:26:12 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp1.osuosl.org (Postfix) with ESMTP id 35B4384E90;
	Wed, 18 Dec 2024 10:26:11 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id bJ9N6hZMF8JC; Wed, 18 Dec 2024 10:26:03 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp1.osuosl.org 6038B84E1B
Authentication-Results: smtp1.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=fVZK0djw;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=fVZK0djw
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp1.osuosl.org (Postfix) with ESMTPS id 6038B84E1B;
	Wed, 18 Dec 2024 10:26:03 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 195C2C088E;
	Wed, 18 Dec 2024 10:26:03 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp2.osuosl.org (smtp2.osuosl.org [IPv6:2605:bc80:3010::133])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 2EF04C089E
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:26:02 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp2.osuosl.org (Postfix) with ESMTP id 0AEA64173D
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:41 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
 by localhost (smtp2.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id h-KWT5WZUEdr for <dev@openvswitch.org>;
 Wed, 18 Dec 2024 10:25:34 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:2608::609;
 helo=eur02-db5-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp2.osuosl.org 98FF74175D
Authentication-Results: smtp2.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp2.osuosl.org 98FF74175D
Authentication-Results: smtp2.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=fVZK0djw;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=fVZK0djw
Received: from EUR02-DB5-obe.outbound.protection.outlook.com
 (mail-db5eur02on20609.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:2608::609])
 by smtp2.osuosl.org (Postfix) with ESMTPS id 98FF74175D
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:33 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=TlkkRq+IcZhj560dAqDBLcHIaZbWd7kW2sNBKWjaz35n5zhKIIIuEEG4bB04Sivg/0oYQXDr1ke12p+wubHeYmZTs7X7br2DuHlmZgY6lSq9X7GFYcNwHaho/geU7lSUXmeTxvswtzQ0ckKtCMKaeAHKLe6JtilHbQgMOM6Qsk6eEHObjEl4LdIlnKIHErrBqBrWsHO8fWe+Lz0b/EYhyNBcCQXiWSdWErlIvrmjVUyIct2z6u1nx7GnczGiaO+/kjovGB8JGD/gQfX8PyDjFz1v7WdjDjEhr/XVBGToYQWIx2DRLVDY+eDgdFczbORZ/OP92un4V1lBZUyFeA/dxA==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=hjh0g9f7jYfKR8/VAl6EpPHz+MutEIfyWQ+ndxNSvk8=;
 b=a0Q9PpPmEnrIvqU5A7zYgkbL42KpfzrJl/rCRagIASCvI+6AyUi+FSKw1QgCXO5schVLIV996OogpwfCozgXw+FqGOSiDLnzLe/g+LkrT0RYgzOaulrceeKHgIhO8K+RWgioIQ0fYnm3UAB2OPuz83PTiobZo8QeIvqKVBTE/2DoImrxXy782CROtgaSlLaJWNsKCE1k+xUElvGotyYJJdddgowwhqWBgcxHk8vm/ABGQkEHjdaQQlAiUWWIQEQU91FXMQKac0tRx53kIqaM4CHZJ/dT/rhh+gdWxUGt1EhhBNyi2rNHGLNukYYs3ZZycS7wDWR9Iezns0NyM0d63Q==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=hjh0g9f7jYfKR8/VAl6EpPHz+MutEIfyWQ+ndxNSvk8=;
 b=fVZK0djwz6yABezRWiBVud4iKiFQW8UChjY4XdchTnYS/UdUO92GbkEAJ2k0Sc8+ksxMG7/uH3kvWkN189Au2mK8IqXORU4Rc4jqTz3b7zbDPK4/eVJzCOt+XWofHhvqcBbu89Qk0ff+qC6jtNcTBa9z6WeW+Y6J+0Tm/0lW6CLX3LamUT+qjwaJ1wEZRK60pdRztmqNPkM0ycN5PjH3U1ou9NP4YX81AS+yEz4jxO+mHbZyXp6gRsJEPcQX9e9chm0Osd9NupVVAffy3R+BbQwah0MsEwuRJQieTkc/aiK0IBWvUMHxUIc7rS+fi0NVsoji+Knfbsm5sIGyY/ZPyw==
Received: from DUZP191CA0037.EURP191.PROD.OUTLOOK.COM (2603:10a6:10:4f8::9) by
 AS8PR10MB7474.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:20b:5ad::11) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.11; Wed, 18 Dec
 2024 10:25:26 +0000
Received: from DU2PEPF00028D04.eurprd03.prod.outlook.com
 (2603:10a6:10:4f8:cafe::fc) by DUZP191CA0037.outlook.office365.com
 (2603:10a6:10:4f8::9) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8251.21 via Frontend Transport; Wed,
 18 Dec 2024 10:25:26 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D04.mail.protection.outlook.com (10.167.242.164) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8251.15 via Frontend Transport; Wed, 18 Dec 2024 10:25:09 +0000
Received: from EUR05-DB8-obe.outbound.protection.outlook.com (104.47.17.111)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Wed, 18 Dec 2024 10:25:24
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 156377877
X-ExclaimerImprintLatency: 153305526
X-ExclaimerImprintAction: e0e964f026b547b2a7e0594ec29a89ba
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=GbNpUVSLKLWrT20mcxmDirHlWqnc4x4tXgpxnobClo0qVht3z5/BFMZ6xFo8m3qeRFuhRg39lpF9CNeCngG9hy+5DdNKzySz63gqH02gepB4IzAR9Ym70xvBCyqBHYhsH8Xg1R4pVnbzrRInTDpfKKnxTTYNv3F67iwHk7T/756ebMF1EHRfRu/2ZNnZMBDTFbgNalWAph/z1YXhhadDS9je/ps+eqVgHfQquHbxXOoeoqLlEgaCOQP3hTPXBwTYBXv3e57mGfxlX9Rq2Y4FuPy1i2kxmzP4PC8haOAWqUWJMUGJPp/O/CkDRIj6iocrd3yJe67HvAQA0ZL/7AVElg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=hjh0g9f7jYfKR8/VAl6EpPHz+MutEIfyWQ+ndxNSvk8=;
 b=XSXpOk7nxDXHadMtSvOT4WTHlxVNofvSoTYvrYB7OkTreY8gOGWVzLw/00PM6qqsUPD//ZWnT2cP3J3ulpwBrF59tNf7jVNXYaP8xMgF7+S/Wp1oPQWUIW8Rca4egdhMcwcLSuJwIv6xXQwQeSeQeiURD7RFHRbJuBYcvmMNAubVnHOLvZ3rVKcyp1w97TCWohI7tGdy+gSS8+hs3C4BlfPks452rl98M7Bf/SWRrkiu5EwCeZMkuAUFNd+MQ6Fp3YNpaQEPpCllg4lZtIgBA6B7esXH+WztKwMjiR54gePGBCMreBfRD9ZK2eGmiXSIUCT6taDKYLY0uqB8GZzA1Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=hjh0g9f7jYfKR8/VAl6EpPHz+MutEIfyWQ+ndxNSvk8=;
 b=fVZK0djwz6yABezRWiBVud4iKiFQW8UChjY4XdchTnYS/UdUO92GbkEAJ2k0Sc8+ksxMG7/uH3kvWkN189Au2mK8IqXORU4Rc4jqTz3b7zbDPK4/eVJzCOt+XWofHhvqcBbu89Qk0ff+qC6jtNcTBa9z6WeW+Y6J+0Tm/0lW6CLX3LamUT+qjwaJ1wEZRK60pdRztmqNPkM0ycN5PjH3U1ou9NP4YX81AS+yEz4jxO+mHbZyXp6gRsJEPcQX9e9chm0Osd9NupVVAffy3R+BbQwah0MsEwuRJQieTkc/aiK0IBWvUMHxUIc7rS+fi0NVsoji+Knfbsm5sIGyY/ZPyw==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU4PR10MB9191.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:568::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:24:59 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8272.005; Wed, 18 Dec 2024
 10:24:59 +0000
Date: Wed, 18 Dec 2024 11:24:57 +0100
To: dev@openvswitch.org
Message-ID: 
 <5072ff3cb54a733ef0b68cc30ca4dc24b5474c88.1734513749.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1734513749.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1734513749.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0113.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::12) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU4PR10MB9191:EE_|DU2PEPF00028D04:EE_|AS8PR10MB7474:EE_
X-MS-Office365-Filtering-Correlation-Id: 6ac1c220-1253-4a2d-e169-08dd1f4e48fb
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info-Original: 
 TCOfyNEx5qdFWlB25gsFEUjXYcXj8EoZcYhn0DG9L84Gu8b3tEaEsdkzygS1oVdgjW9Zwmsa/YWlAJpqv7ZY93sBVUL2RSXEQMl7gFRYJcuV2wHwxLMOqlCwCBMbK7jWXYzCYxQqDDHyYIBL4PjXxkXfD6kiZLUuLqANo/MKXZ+tA4aqRFAKwV8lBuXXtzCLV9ITdC1r7MaL0fj8IrkBJpl5yTBtwViGVYPPNwcdSRrwC5cHx/SmRqKStDAjcOa2d8FRKWUTwcF2Wou4bWzd8544aJK7SnsYzpWGGjbwzck4E1/GBwd4dns4ADKOT1x4eGf1cHwZblf2E4wNjJxS6NjlI9EwyyeChcaej+dj/iA3ShgggGm3ay7omyJQa03IRgLXzMiV2eCczoyVMGdnQgr3V+u57LRuPz6/8lQRHki2OLt7aAyrUr4cxmZjt5gHT7Rm50O+b1W7nEeV7jpKRtbKttuCAATpZ5kvM43u4gI9g8uhC7nhZHxwLBJLJxl9fG1COblsAaYaODkgSYrq8wWclFw3w53cKJLzRfRQv0MUrHH+Eq5nvEkq2TT/nswmFzMj7mXcez0KW2obqvGWJMS2CS8IO8+YXDUOR56p1gIWAvQ+9Qojkw2kFU6mCOc2sgtKLIc3ZOGVlHpFlH10T5YeQUj5esZv0gEUfJpDa2s2iawx7g9xLTRXwphD8jhErRHcvG+54cQv64Ui7qK6JwhAeDtGBokI77rpNAyS71TyO0a6qjsFxYv2R7fFvo22gggxulTUqjZBUbFbXHyYbiQpteHfUKX+GZQKg1ecKqwzADV3p3XPl1ivCyn9ZCcks3vv/moLJwMk9AeWAqPo5R04ik/dRW64wL1IEygciMFq6wr7RS4GlLnl7dpHnLlDc8mWXtl841+eTUe9AgRJUweTaeVxgWbUiNYmu/VGy9H+w3SNw7fsv4scz5Etp+REPQiE368xqzJnGIWDpqG9D9+8sBus2eo+sAdk3T5cJ/BWpAaQXNIjXmupiTLHFPHEuuMZOjhRJCBvSTZZWAEKwuy6BSCT8+jWNIoifuR48l41tHFvGNWQ73coaylT50WyEnF1+MHHKYoPcidSgm5c0+iV6hKGTxbmugvSfQ2ySjzIg5szJ0wHfzNu6I6N451a333X/0iJ0f8R3lMqlZ5qLxyF/2H/GHMnHqf6SbX01Nm/Td/UU/bT/PChQ2xTJcH+L6opotAnfLMm4VuZ/ViZ/yUujWQ9FRoPDwuH2MP0uwRUwxQTHQ80fV+Ub46Jli1LvfGrYy5h7nUh9Az3ATuM9Oir70haRagjftc+RWqR2yCnRjHl2Fmm7s2Yyuc7+VEl3w9aj/P9HVASIbo4/R4Zp0Ogm28eWWLpmvvxWSrl+qdOeffDrFmH+JEMvVWsnERA
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(376014)(366016)(1800799024); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU4PR10MB9191
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D04.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 87e401b2-c8c8-4f6e-390a-08dd1f4e3986
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|35042699022|14060799003|376014|36860700013|1800799024|82310400026;
X-Microsoft-Antispam-Message-Info: 
 DbHH5aD/5mo6KHkStikuTtT9HW6Rx0noO6b8UUkCiVQTyZiLBbgfPHtrlUHH+J8+jOL+7BFLoVrO9jmfdt0nVRKGIrYH8IdUFnuCmSWzk0llVgGWPQC3WdgbM8nbZeTQm9vymE1uHF2nsgxetpSQauGsJxBIA4I7YGbRgL3ir+wYBhSl6TItyyKeOoFP3hoHVKSFyWDlkNb20ORX0AX/vPcKt0wIc6CJ3GzdrkRlWWhm/h73iM1l7Pxgp6QIDD6zhXLl/j84iQP7ErNf5B3afbu+ZUXtey0QR9vfXkE/1UhfWRNxCQ83aZc/VG5L12XqGoy/n7POTCdCIa5pvLJJIbqHeVCIH35PWoS6LhaJBrzozmI2Cpq9ax/6o/bPpnVLAiM3pJmQpb25/wUQQPG2BECL6zhxVYV23jDzYvULE4Bhu3bnq/Isb0OeOXpTxA4Fqfo9cLm2se6jfOaMg61apTWWyfyUwnn5D39hZv4uCCrPmnYlUKbXMb4ZVypanvGeeqdhTZ4fSqEwz6ZpCROZ7tfbK6sTYZs1Qsgb6isHp6Xq2g2xQGVdO40yRL4ASK1BgmUfDnMMjFRetyri+OC+3mL+Mqq3V1j72VtehzUtB7T/xmLCK/GU7tB2aZarF7pJZuHNwwdeef9IJcZyyDEtqb32rVl3VckvkODopS53m44jRFzeFNIqQu962mbiqyFuspcBPOgcybBJ+6LGMVNa1sZsJ0aJBr/Pe9KVr1s+Ceunv1kU1cz2HEBPyxRJzqbyV0ldIpkI4FQpQjwP7rs9jxDAeLFgDEJKLtC0lw6Xjtfucemyn2PobXaO1U07xjD6zczg1fZ/bFLl/hQ6WUjA1xhqdbt2kxgvGc9LO4aKUQNcOgUyLOFp0R2hFDm/5VZXHEuWmU/w7gdVedZrInDhZ6Xv95kWmVKb4AqMtHC/WiL4hOlAu9NkgFD39gDTFEE/tV+am/rpJdtPF9WInBXyqA8vE7PsU5E2KuuHhX7/FyElMT3/VVSTm4jjDxhGoopBV+1GEReZxbr2LPbNw3trASyDYr8WoEdL3AiMtdFNnw45rKySSZroeX1EgcdEIFETo11v1KQeU0gT+pc2onldipjOK3qgs2UmaPn3OQbg1EVoD5i9kmvXZ+Jiw8G27AJwyuXrYvvnEn4B8dYkL2XEAmzXb6bX14c0ueu3/bd0Lr6mS3KIG8kndWz8kKfoaYBWee0YWPU//ngvoUaR04uqsslBQkwSm/WkInefI5V41OJ9Uc3rP8GBoaWeQyDrbqUB09GbrQ1IHQ7pfnWxg7pED6V+lbQOCUgkilgucSxZNPBkBul76KgN9b0FxN6jsscLBfPNWvNIYCN0+pgKN9atBYsewhjCmUH3JrzeDqRCMmprp0tiXb42DKU85Sm8rUzFCO4+2yKZLw+kCnAhZcYUv+wRtpdR64JMGhxOOiYs4+tRV720fGB9YdGqL8iV8J0AIfyxFrtJvYO7R17okkvydxFjGbkh/Q6Ztaj5OBUQ0dM=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(35042699022)(14060799003)(376014)(36860700013)(1800799024)(82310400026);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Dec 2024 10:25:09.4793 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 6ac1c220-1253-4a2d-e169-08dd1f4e48fb
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D04.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AS8PR10MB7474
Subject: [ovs-dev] [PATCH ovn v2 3/6] northd: Handle learned routes.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

here we expand the previous routes-sync engine node to not only
advertise routes to the southbound table, but also learn received routes
from this table.

These routes are then passed to the same logic that connected and static
routes are using for flow generation.
However we prioritize these routes lower than connected or static routes
as information in cluster (for the same prefix length) should always be
more correct then learned routes.
This is also consistent with the behaviour of phyiscal routers.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 NEWS                           |   4 +
 lib/stopwatch-names.h          |   1 +
 northd/automake.mk             |   2 +
 northd/en-learned-route-sync.c | 221 ++++++++++++++++++++++++++++++
 northd/en-learned-route-sync.h |  31 +++++
 northd/en-lflow.c              |   5 +-
 northd/inc-proc-northd.c       |  11 +-
 northd/northd.c                | 240 ++++++++++++++++++++-------------
 northd/northd.h                |  32 ++++-
 tests/ovn-northd.at            | 160 +++++++++++++++++-----
 10 files changed, 574 insertions(+), 133 deletions(-)
 create mode 100644 northd/en-learned-route-sync.c
 create mode 100644 northd/en-learned-route-sync.h

diff --git a/lib/stopwatch-names.h b/lib/stopwatch-names.h
index dc4129ee5..c12dd28d0 100644
--- a/lib/stopwatch-names.h
+++ b/lib/stopwatch-names.h
@@ -35,5 +35,6 @@
 #define LR_STATEFUL_RUN_STOPWATCH_NAME "lr_stateful"
 #define LS_STATEFUL_RUN_STOPWATCH_NAME "ls_stateful"
 #define ADVERTISED_ROUTE_SYNC_RUN_STOPWATCH_NAME "advertised_route_sync"
+#define LEARNED_ROUTE_SYNC_RUN_STOPWATCH_NAME "learned_route_sync"
 
 #endif
diff --git a/northd/automake.mk b/northd/automake.mk
index a2797237a..6f4689d37 100644
--- a/northd/automake.mk
+++ b/northd/automake.mk
@@ -36,6 +36,8 @@ northd_ovn_northd_SOURCES = \
 	northd/en-sampling-app.h \
 	northd/en-advertised-route-sync.c \
 	northd/en-advertised-route-sync.h \
+	northd/en-learned-route-sync.c \
+	northd/en-learned-route-sync.h \
 	northd/inc-proc-northd.c \
 	northd/inc-proc-northd.h \
 	northd/ipam.c \
diff --git a/northd/en-learned-route-sync.c b/northd/en-learned-route-sync.c
new file mode 100644
index 000000000..962ccd10e
--- /dev/null
+++ b/northd/en-learned-route-sync.c
@@ -0,0 +1,221 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <config.h>
+#include <stdbool.h>
+
+#include "openvswitch/vlog.h"
+#include "stopwatch.h"
+#include "northd.h"
+
+#include "en-learned-route-sync.h"
+#include "lib/stopwatch-names.h"
+#include "openvswitch/hmap.h"
+#include "ovn-util.h"
+
+VLOG_DEFINE_THIS_MODULE(en_learned_route_sync);
+
+static void
+routes_table_sync(struct ovsdb_idl_txn *ovnsb_txn,
+                  const struct sbrec_learned_route_table
+                      *sbrec_learned_route_table,
+                  const struct hmap *parsed_routes,
+                  const struct hmap *lr_ports,
+                  const struct ovn_datapaths *lr_datapaths,
+                  struct hmap *parsed_routes_out);
+
+bool
+learned_route_sync_northd_change_handler(struct engine_node *node,
+                                         void *data_ OVS_UNUSED)
+{
+    struct northd_data *northd_data = engine_get_input_data("northd", node);
+    if (!northd_has_tracked_data(&northd_data->trk_data)) {
+        return false;
+    }
+
+    /* This node uses the below data from the en_northd engine node.
+     * See (lr_stateful_get_input_data())
+     *   1. northd_data->lr_datapaths
+     *   2. northd_data->lr_ports
+     *      This data gets updated when a logical router or logical router port
+     *      is created or deleted.
+     *      Northd engine node presently falls back to full recompute when
+     *      this happens and so does this node.
+     *      Note: When we add I-P to the created/deleted logical routers or
+     *      logical router ports, we need to revisit this handler.
+     */
+
+    return true;
+}
+
+static void
+routes_sync_init(struct learned_route_sync_data *data)
+{
+    hmap_init(&data->parsed_routes);
+}
+
+static void
+routes_sync_destroy(struct learned_route_sync_data *data)
+{
+    struct parsed_route *r;
+    HMAP_FOR_EACH_POP (r, key_node, &data->parsed_routes) {
+        parsed_route_free(r);
+    }
+    hmap_destroy(&data->parsed_routes);
+}
+
+void
+*en_learned_route_sync_init(struct engine_node *node OVS_UNUSED,
+                     struct engine_arg *arg OVS_UNUSED)
+{
+    struct learned_route_sync_data *data = xzalloc(sizeof *data);
+    routes_sync_init(data);
+    return data;
+}
+
+void
+en_learned_route_sync_cleanup(void *data)
+{
+    routes_sync_destroy(data);
+}
+
+void
+en_learned_route_sync_run(struct engine_node *node, void *data)
+{
+    routes_sync_destroy(data);
+    routes_sync_init(data);
+
+    struct learned_route_sync_data *routes_sync_data = data;
+    struct routes_data *routes_data
+        = engine_get_input_data("routes", node);
+    const struct engine_context *eng_ctx = engine_get_context();
+    const struct sbrec_learned_route_table *sbrec_learned_route_table =
+        EN_OVSDB_GET(engine_get_input("SB_learned_route", node));
+    struct northd_data *northd_data = engine_get_input_data("northd", node);
+
+    stopwatch_start(LEARNED_ROUTE_SYNC_RUN_STOPWATCH_NAME, time_msec());
+
+    routes_table_sync(eng_ctx->ovnsb_idl_txn, sbrec_learned_route_table,
+                      &routes_data->parsed_routes,
+                      &northd_data->lr_ports,
+                      &northd_data->lr_datapaths,
+                      &routes_sync_data->parsed_routes);
+
+    stopwatch_stop(LEARNED_ROUTE_SYNC_RUN_STOPWATCH_NAME, time_msec());
+    engine_set_node_state(node, EN_UPDATED);
+}
+
+
+static void
+parse_route_from_sbrec_route(struct hmap *parsed_routes_out,
+                             const struct hmap *lr_ports,
+                             const struct hmap *lr_datapaths,
+                             const struct sbrec_learned_route *route)
+{
+    const struct ovn_datapath *od = ovn_datapath_from_sbrec(
+        NULL, lr_datapaths, route->datapath);
+
+    /* Verify that the next hop is an IP address with an all-ones mask. */
+    struct in6_addr *nexthop = xmalloc(sizeof(*nexthop));
+    unsigned int plen;
+    if (!ip46_parse_cidr(route->nexthop, nexthop, &plen)) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 1);
+        VLOG_WARN_RL(&rl, "bad 'nexthop' %s in learned route "
+                     UUID_FMT, route->nexthop,
+                     UUID_ARGS(&route->header_.uuid));
+        free(nexthop);
+        return;
+    }
+    if ((IN6_IS_ADDR_V4MAPPED(nexthop) && plen != 32) ||
+        (!IN6_IS_ADDR_V4MAPPED(nexthop) && plen != 128)) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 1);
+        VLOG_WARN_RL(&rl, "bad next hop mask %s in learned route "
+                     UUID_FMT, route->nexthop,
+                     UUID_ARGS(&route->header_.uuid));
+        free(nexthop);
+        return;
+    }
+
+    /* Parse ip_prefix */
+    struct in6_addr prefix;
+    if (!ip46_parse_cidr(route->ip_prefix, &prefix, &plen)) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 1);
+        VLOG_WARN_RL(&rl, "bad 'ip_prefix' %s in learned route "
+                     UUID_FMT, route->ip_prefix,
+                     UUID_ARGS(&route->header_.uuid));
+        free(nexthop);
+        return;
+    }
+
+    /* Verify that ip_prefix and nexthop have same address familiy. */
+    if (IN6_IS_ADDR_V4MAPPED(&prefix) != IN6_IS_ADDR_V4MAPPED(nexthop)) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 1);
+        VLOG_WARN_RL(&rl, "Address family doesn't match between 'ip_prefix'"
+                     " %s and 'nexthop' %s in learned route "UUID_FMT,
+                     route->ip_prefix, route->nexthop,
+                     UUID_ARGS(&route->header_.uuid));
+        free(nexthop);
+        return;
+    }
+
+    /* Verify that ip_prefix and nexthop are on the same network. */
+    const char *lrp_addr_s = NULL;
+    struct ovn_port *out_port = NULL;
+    if (!find_route_outport(lr_ports, route->logical_port->logical_port,
+                            route->ip_prefix, route->nexthop,
+                            IN6_IS_ADDR_V4MAPPED(&prefix),
+                            false,
+                            &out_port, &lrp_addr_s)) {
+        free(nexthop);
+        return;
+    }
+
+    parsed_route_add(od, nexthop, &prefix, plen, false, lrp_addr_s,
+                     out_port, 0, false, false, NULL,
+                     ROUTE_SOURCE_LEARNED, &route->header_, parsed_routes_out);
+}
+
+static void
+routes_table_sync(struct ovsdb_idl_txn *ovnsb_txn,
+                  const struct sbrec_learned_route_table
+                      *sbrec_learned_route_table,
+                  const struct hmap *parsed_routes,
+                  const struct hmap *lr_ports,
+                  const struct ovn_datapaths *lr_datapaths,
+                  struct hmap *parsed_routes_out)
+{
+    if (!ovnsb_txn) {
+        return;
+    }
+
+    struct hmap sync_routes = HMAP_INITIALIZER(&sync_routes);
+
+    const struct parsed_route *route;
+
+    const struct sbrec_learned_route *sb_route;
+    SBREC_LEARNED_ROUTE_TABLE_FOR_EACH (sb_route, sbrec_learned_route_table) {
+        parse_route_from_sbrec_route(parsed_routes_out, lr_ports,
+                                     &lr_datapaths->datapaths,
+                                     sb_route);
+
+    }
+
+    HMAP_FOR_EACH (route, key_node, parsed_routes) {
+        hmap_insert(parsed_routes_out, &parsed_route_clone(route)->key_node,
+                    parsed_route_hash(route));
+    }
+
+    hmap_destroy(&sync_routes);
+}
+
diff --git a/northd/en-learned-route-sync.h b/northd/en-learned-route-sync.h
new file mode 100644
index 000000000..55a7e9f73
--- /dev/null
+++ b/northd/en-learned-route-sync.h
@@ -0,0 +1,31 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at:
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef EN_LEARNED_ROUTE_SYNC_H
+#define EN_LEARNED_ROUTE_SYNC_H 1
+
+#include "lib/inc-proc-eng.h"
+#include "openvswitch/hmap.h"
+
+struct learned_route_sync_data {
+    struct hmap parsed_routes;
+};
+
+bool learned_route_sync_northd_change_handler(struct engine_node *node,
+                                       void *data);
+void *en_learned_route_sync_init(struct engine_node *, struct engine_arg *);
+void en_learned_route_sync_cleanup(void *data);
+void en_learned_route_sync_run(struct engine_node *, void *data);
+
+
+#endif /* EN_LEARNED_ROUTE_SYNC_H */
diff --git a/northd/en-lflow.c b/northd/en-lflow.c
index fa1f0236d..62224eb63 100644
--- a/northd/en-lflow.c
+++ b/northd/en-lflow.c
@@ -26,6 +26,7 @@
 #include "en-northd.h"
 #include "en-meters.h"
 #include "en-sampling-app.h"
+#include "en-learned-route-sync.h"
 #include "lflow-mgr.h"
 
 #include "lib/inc-proc-eng.h"
@@ -46,6 +47,8 @@ lflow_get_input_data(struct engine_node *node,
         engine_get_input_data("bfd_sync", node);
     struct routes_data *routes_data =
         engine_get_input_data("routes", node);
+    struct learned_route_sync_data *learned_route_sync_data =
+        engine_get_input_data("learned_route_sync", node);
     struct route_policies_data *route_policies_data =
         engine_get_input_data("route_policies", node);
     struct port_group_data *pg_data =
@@ -82,7 +85,7 @@ lflow_get_input_data(struct engine_node *node,
     lflow_input->lb_datapaths_map = &northd_data->lb_datapaths_map;
     lflow_input->svc_monitor_map = &northd_data->svc_monitor_map;
     lflow_input->bfd_ports = &bfd_sync_data->bfd_ports;
-    lflow_input->parsed_routes = &routes_data->parsed_routes;
+    lflow_input->parsed_routes = &learned_route_sync_data->parsed_routes;
     lflow_input->route_tables = &routes_data->route_tables;
     lflow_input->route_policies = &route_policies_data->route_policies;
 
diff --git a/northd/inc-proc-northd.c b/northd/inc-proc-northd.c
index 77a7d637c..ed9e27de9 100644
--- a/northd/inc-proc-northd.c
+++ b/northd/inc-proc-northd.c
@@ -42,6 +42,7 @@
 #include "en-sync-sb.h"
 #include "en-sync-from-sb.h"
 #include "en-advertised-route-sync.h"
+#include "en-learned-route-sync.h"
 #include "unixctl.h"
 #include "util.h"
 
@@ -104,7 +105,8 @@ static unixctl_cb_func chassis_features_list;
     SB_NODE(static_mac_binding, "static_mac_binding") \
     SB_NODE(chassis_template_var, "chassis_template_var") \
     SB_NODE(logical_dp_group, "logical_dp_group") \
-    SB_NODE(advertised_route, "advertised_route")
+    SB_NODE(advertised_route, "advertised_route") \
+    SB_NODE(learned_route, "learned_route")
 
 enum sb_engine_node {
 #define SB_NODE(NAME, NAME_STR) SB_##NAME,
@@ -164,6 +166,7 @@ static ENGINE_NODE(routes, "routes");
 static ENGINE_NODE(bfd, "bfd");
 static ENGINE_NODE(bfd_sync, "bfd_sync");
 static ENGINE_NODE(advertised_route_sync, "advertised_route_sync");
+static ENGINE_NODE(learned_route_sync, "learned_route_sync");
 
 void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
                           struct ovsdb_idl_loop *sb)
@@ -270,6 +273,11 @@ void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
     engine_add_input(&en_advertised_route_sync, &en_sb_advertised_route,
                      engine_noop_handler);
 
+    engine_add_input(&en_learned_route_sync, &en_routes, NULL);
+    engine_add_input(&en_learned_route_sync, &en_sb_learned_route, NULL);
+    engine_add_input(&en_learned_route_sync, &en_northd,
+                     learned_route_sync_northd_change_handler);
+
     engine_add_input(&en_sync_meters, &en_nb_acl, NULL);
     engine_add_input(&en_sync_meters, &en_nb_meter, NULL);
     engine_add_input(&en_sync_meters, &en_sb_meter, NULL);
@@ -283,6 +291,7 @@ void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
     engine_add_input(&en_lflow, &en_bfd_sync, NULL);
     engine_add_input(&en_lflow, &en_route_policies, NULL);
     engine_add_input(&en_lflow, &en_routes, NULL);
+    engine_add_input(&en_lflow, &en_learned_route_sync, NULL);
     engine_add_input(&en_lflow, &en_global_config,
                      node_global_config_handler);
 
diff --git a/northd/northd.c b/northd/northd.c
index 0b495a2b6..b003d4791 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -302,11 +302,14 @@ BUILD_ASSERT_DECL(ACL_OBS_STAGE_MAX < (1 << 2));
 /*
  * Route offsets implement logic to prioritize traffic for routes with
  * same ip_prefix values:
- *  -  connected route overrides static one;
- *  -  static route overrides src-ip route. */
-#define ROUTE_PRIO_OFFSET_MULTIPLIER 5
-#define ROUTE_PRIO_OFFSET_STATIC 2
-#define ROUTE_PRIO_OFFSET_CONNECTED 4
+ *  1. (highest priority) connected routes
+ *  2. static routes
+ *  3. routes learned from the outside via ovn-controller (e.g. bgp)
+ *  4. (lowest priority) src-ip routes */
+#define ROUTE_PRIO_OFFSET_MULTIPLIER 8
+#define ROUTE_PRIO_OFFSET_LEARNED 2
+#define ROUTE_PRIO_OFFSET_STATIC 4
+#define ROUTE_PRIO_OFFSET_CONNECTED 6
 
 /* Returns the type of the datapath to which a flow with the given 'stage' may
  * be added. */
@@ -11120,7 +11123,7 @@ build_route_table_lflow(struct ovn_datapath *od, struct lflow_table *lflows,
 }
 
 static uint32_t
-route_hash(struct parsed_route *route)
+route_hash(const struct parsed_route *route)
 {
     return hash_bytes(&route->prefix, sizeof route->prefix,
                       (uint32_t)route->plen);
@@ -11171,7 +11174,7 @@ parsed_route_lookup(struct hmap *routes, size_t hash,
             continue;
         }
 
-        if (pr->route != new_pr->route) {
+        if (pr->source_hint != new_pr->source_hint) {
             continue;
         }
 
@@ -11198,7 +11201,37 @@ parsed_route_lookup(struct hmap *routes, size_t hash,
     return NULL;
 }
 
-static void
+struct parsed_route * parsed_route_clone(const struct parsed_route *pr) {
+    struct parsed_route *new_pr = xzalloc(sizeof *new_pr);
+    new_pr->prefix = pr->prefix;
+    new_pr->plen = pr->plen;
+    if (pr->nexthop) {
+        new_pr->nexthop = xmemdup(pr->nexthop, sizeof(*pr->nexthop));
+    }
+    new_pr->route_table_id = pr->route_table_id;
+    new_pr->is_src_route = pr->is_src_route;
+    new_pr->hash = route_hash(pr);
+    new_pr->ecmp_symmetric_reply = pr->ecmp_symmetric_reply;
+    new_pr->is_discard_route = pr->is_discard_route;
+    new_pr->od = pr->od;
+    new_pr->stale = pr->stale;
+    new_pr->source = pr->source;
+    new_pr->source_hint = pr->source_hint;
+    if (pr->lrp_addr_s) {
+        new_pr->lrp_addr_s = xstrdup(pr->lrp_addr_s);
+    }
+    if (pr->out_port) {
+        new_pr->out_port = pr->out_port;
+    }
+    sset_clone(&new_pr->ecmp_selection_fields, &pr->ecmp_selection_fields);
+    return new_pr;
+}
+
+size_t parsed_route_hash(const struct parsed_route *pr) {
+    return uuid_hash(&pr->od->key);
+}
+
+void
 parsed_route_free(struct parsed_route *pr) {
     free(pr->lrp_addr_s);
     free(pr->nexthop);
@@ -11206,7 +11239,7 @@ parsed_route_free(struct parsed_route *pr) {
     free(pr);
 }
 
-static void
+void
 parsed_route_add(const struct ovn_datapath *od,
                  struct in6_addr *nexthop,
                  const struct in6_addr *prefix,
@@ -11214,12 +11247,12 @@ parsed_route_add(const struct ovn_datapath *od,
                  bool is_discard_route,
                  const char *lrp_addr_s,
                  const struct ovn_port *out_port,
-                 const struct nbrec_logical_router_static_route *route,
                  uint32_t route_table_id,
                  bool is_src_route,
                  bool ecmp_symmetric_reply,
                  const struct sset *ecmp_selection_fields,
                  enum route_source source,
+                 const struct ovsdb_idl_row *source_hint,
                  struct hmap *routes)
 {
 
@@ -11238,14 +11271,14 @@ parsed_route_add(const struct ovn_datapath *od,
     }
     new_pr->out_port = out_port;
     new_pr->source = source;
-    new_pr->route = route;
     if (ecmp_selection_fields) {
         sset_clone(&new_pr->ecmp_selection_fields, ecmp_selection_fields);
     } else {
         sset_init(&new_pr->ecmp_selection_fields);
     }
+    new_pr->source_hint = source_hint;
 
-    size_t hash = uuid_hash(&od->key);
+    size_t hash = parsed_route_hash(new_pr);
     struct parsed_route *pr = parsed_route_lookup(routes, hash, new_pr);
     if (!pr) {
         hmap_insert(routes, &new_pr->key_node, hash);
@@ -11376,9 +11409,9 @@ parsed_routes_add_static(const struct ovn_datapath *od,
     }
 
     parsed_route_add(od, nexthop, &prefix, plen, is_discard_route, lrp_addr_s,
-                     out_port, route, route_table_id, is_src_route,
+                     out_port, route_table_id, is_src_route,
                      ecmp_symmetric_reply, &ecmp_selection_fields, source,
-                     routes);
+                     &route->header_, routes);
     sset_destroy(&ecmp_selection_fields);
 }
 
@@ -11394,9 +11427,9 @@ parsed_routes_add_connected(const struct ovn_datapath *od,
 
         parsed_route_add(od, NULL, &prefix, addr->plen,
                          false, addr->addr_s, op,
-                         NULL, 0, false,
+                         0, false,
                          false, NULL, ROUTE_SOURCE_CONNECTED,
-                         routes);
+                         &op->nbrp->header_, routes);
     }
 
     for (size_t i = 0; i < op->lrp_networks.n_ipv6_addrs; i++) {
@@ -11406,9 +11439,9 @@ parsed_routes_add_connected(const struct ovn_datapath *od,
 
         parsed_route_add(od, NULL, &prefix, addr->plen,
                          false, addr->addr_s, op,
-                         NULL, 0, false,
+                         0, false,
                          false, NULL, ROUTE_SOURCE_CONNECTED,
-                         routes);
+                         &op->nbrp->header_, routes);
     }
 }
 
@@ -11610,13 +11643,30 @@ build_route_prefix_s(const struct in6_addr *prefix, unsigned int plen)
     return prefix_s;
 }
 
+static int
+route_source_to_offset(enum route_source source)
+{
+    switch (source) {
+        case ROUTE_SOURCE_CONNECTED:
+            return ROUTE_PRIO_OFFSET_CONNECTED;
+        case ROUTE_SOURCE_STATIC:
+            return ROUTE_PRIO_OFFSET_STATIC;
+        case ROUTE_SOURCE_LEARNED:
+            return ROUTE_PRIO_OFFSET_LEARNED;
+        default:
+            OVS_NOT_REACHED();
+    }
+}
+
 static void
 build_route_match(const struct ovn_port *op_inport, uint32_t rtb_id,
                   const char *network_s, int plen, bool is_src_route,
-                  bool is_ipv4, struct ds *match, uint16_t *priority, int ofs,
-                  bool has_protocol_match)
+                  bool is_ipv4, struct ds *match, uint16_t *priority,
+                  enum route_source source, bool has_protocol_match)
 {
     const char *dir;
+    int ofs = route_source_to_offset(source);
+
     /* The priority here is calculated to implement longest-prefix-match
      * routing. */
     if (is_src_route) {
@@ -11629,7 +11679,8 @@ build_route_match(const struct ovn_port *op_inport, uint32_t rtb_id,
     if (op_inport) {
         ds_put_format(match, "inport == %s && ", op_inport->json_key);
     }
-    if (rtb_id || ofs == ROUTE_PRIO_OFFSET_STATIC) {
+    if (rtb_id || source == ROUTE_SOURCE_STATIC ||
+            source == ROUTE_SOURCE_LEARNED) {
         ds_put_format(match, "%s == %d && ", REG_ROUTE_TABLE_ID, rtb_id);
     }
 
@@ -11642,6 +11693,45 @@ build_route_match(const struct ovn_port *op_inport, uint32_t rtb_id,
                   network_s, plen);
 }
 
+bool
+find_route_outport(const struct hmap *lr_ports, const char *output_port,
+                   const char *ip_prefix, const char *nexthop, bool is_ipv4,
+                   bool force_out_port,
+                   struct ovn_port **out_port, const char **lrp_addr_s)
+{
+    *out_port = ovn_port_find(lr_ports, output_port);
+    if (!*out_port) {
+        static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 1);
+        VLOG_WARN_RL(&rl, "Bad out port %s for static route %s",
+                     output_port, ip_prefix);
+        return false;
+    }
+    if (nexthop[0]) {
+        *lrp_addr_s = find_lrp_member_ip(*out_port, nexthop);
+    }
+    if (!*lrp_addr_s) {
+        if (!force_out_port) {
+            return false;
+        }
+        /* There are no IP networks configured on the router's port via
+         * which 'route->nexthop' is theoretically reachable.  But since
+         * 'out_port' has been specified, we honor it by trying to reach
+         * 'route->nexthop' via the first IP address of 'out_port'.
+         * (There are cases, e.g in GCE, where each VM gets a /32 IP
+         * address and the default gateway is still reachable from it.) */
+        if (is_ipv4) {
+            if ((*out_port)->lrp_networks.n_ipv4_addrs) {
+                *lrp_addr_s = (*out_port)->lrp_networks.ipv4_addrs[0].addr_s;
+            }
+        } else {
+            if ((*out_port)->lrp_networks.n_ipv6_addrs) {
+                *lrp_addr_s = (*out_port)->lrp_networks.ipv6_addrs[0].addr_s;
+            }
+        }
+    }
+    return true;
+}
+
 /* Output: p_lrp_addr_s and p_out_port. */
 static bool
 find_static_route_outport(const struct ovn_datapath *od,
@@ -11652,33 +11742,10 @@ find_static_route_outport(const struct ovn_datapath *od,
     const char *lrp_addr_s = NULL;
     struct ovn_port *out_port = NULL;
     if (route->output_port) {
-        out_port = ovn_port_find(lr_ports, route->output_port);
-        if (!out_port) {
-            static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(5, 1);
-            VLOG_WARN_RL(&rl, "Bad out port %s for static route %s",
-                         route->output_port, route->ip_prefix);
+        if (!find_route_outport(lr_ports, route->output_port, route->ip_prefix,
+              route->nexthop, is_ipv4, true, &out_port, &lrp_addr_s)) {
             return false;
         }
-        if (route->nexthop[0]) {
-            lrp_addr_s = find_lrp_member_ip(out_port, route->nexthop);
-        }
-        if (!lrp_addr_s) {
-            /* There are no IP networks configured on the router's port via
-             * which 'route->nexthop' is theoretically reachable.  But since
-             * 'out_port' has been specified, we honor it by trying to reach
-             * 'route->nexthop' via the first IP address of 'out_port'.
-             * (There are cases, e.g in GCE, where each VM gets a /32 IP
-             * address and the default gateway is still reachable from it.) */
-            if (is_ipv4) {
-                if (out_port->lrp_networks.n_ipv4_addrs) {
-                    lrp_addr_s = out_port->lrp_networks.ipv4_addrs[0].addr_s;
-                }
-            } else {
-                if (out_port->lrp_networks.n_ipv6_addrs) {
-                    lrp_addr_s = out_port->lrp_networks.ipv6_addrs[0].addr_s;
-                }
-            }
-        }
     } else {
         /* output_port is not specified, find the
          * router port matching the next hop. */
@@ -11717,7 +11784,6 @@ add_ecmp_symmetric_reply_flows(struct lflow_table *lflows,
                                struct ds *route_match,
                                struct lflow_ref *lflow_ref)
 {
-    const struct nbrec_logical_router_static_route *st_route = route->route;
     struct ds match = DS_EMPTY_INITIALIZER;
     struct ds actions = DS_EMPTY_INITIALIZER;
     struct ds ecmp_reply = DS_EMPTY_INITIALIZER;
@@ -11734,12 +11800,12 @@ add_ecmp_symmetric_reply_flows(struct lflow_table *lflows,
     free(cidr);
     ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_DEFRAG, 100,
                              ds_cstr(&match), "ct_next;",
-                             &st_route->header_, lflow_ref);
+                             route->source_hint, lflow_ref);
 
     /* And packets that go out over an ECMP route need conntrack */
     ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_DEFRAG, 100,
                              ds_cstr(route_match), "ct_next;",
-                             &st_route->header_, lflow_ref);
+                             route->source_hint, lflow_ref);
 
     /* Save src eth and inport in ct_label for packets that arrive over
      * an ECMP route.
@@ -11755,7 +11821,7 @@ add_ecmp_symmetric_reply_flows(struct lflow_table *lflows,
             out_port->sb->tunnel_key);
     ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_ECMP_STATEFUL, 100,
                             ds_cstr(&match), ds_cstr(&actions),
-                            &st_route->header_,
+                            route->source_hint,
                             lflow_ref);
 
     /* Bypass ECMP selection if we already have ct_label information
@@ -11776,13 +11842,13 @@ add_ecmp_symmetric_reply_flows(struct lflow_table *lflows,
                   port_ip, out_port->json_key);
     ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_IP_ROUTING, 10300,
                            ds_cstr(&match), ds_cstr(&actions),
-                           &st_route->header_,
+                           route->source_hint,
                            lflow_ref);
 
     /* Egress reply traffic for symmetric ECMP routes skips router policies. */
     ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_POLICY, 65535,
                             ds_cstr(&ecmp_reply), "next;",
-                            &st_route->header_,
+                            route->source_hint,
                             lflow_ref);
 
     /* Use REG_ECMP_ETH_FULL to pass the eth field from ct_label to eth.dst to
@@ -11799,7 +11865,7 @@ add_ecmp_symmetric_reply_flows(struct lflow_table *lflows,
                          " pop(" REG_ECMP_ETH_FULL "); next;";
     ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_ARP_RESOLVE,
                             200, ds_cstr(&ecmp_reply),
-                            action, &st_route->header_,
+                            action, route->source_hint,
                             lflow_ref);
 
     ds_destroy(&match);
@@ -11807,19 +11873,6 @@ add_ecmp_symmetric_reply_flows(struct lflow_table *lflows,
     ds_destroy(&ecmp_reply);
 }
 
-static int
-route_source_to_offset(enum route_source source)
-{
-    switch (source) {
-        case ROUTE_SOURCE_CONNECTED:
-            return ROUTE_PRIO_OFFSET_CONNECTED;
-        case ROUTE_SOURCE_STATIC:
-            return ROUTE_PRIO_OFFSET_STATIC;
-        default:
-            OVS_NOT_REACHED();
-    }
-}
-
 static void
 build_ecmp_route_flow(struct lflow_table *lflows, struct ovn_datapath *od,
                       struct ecmp_groups_node *eg, struct lflow_ref *lflow_ref,
@@ -11832,10 +11885,9 @@ build_ecmp_route_flow(struct lflow_table *lflows, struct ovn_datapath *od,
     struct ds route_match = DS_EMPTY_INITIALIZER;
 
     char *prefix_s = build_route_prefix_s(&eg->prefix, eg->plen);
-    int ofs = route_source_to_offset(eg->source);
     build_route_match(NULL, eg->route_table_id, prefix_s, eg->plen,
                       eg->is_src_route, is_ipv4_prefix, &route_match,
-                      &priority, ofs,
+                      &priority, eg->source,
                       protocol != NULL);
     free(prefix_s);
 
@@ -11898,18 +11950,17 @@ build_ecmp_route_flow(struct lflow_table *lflows, struct ovn_datapath *od,
     struct ds match = DS_EMPTY_INITIALIZER;
     struct sset visited_ports = SSET_INITIALIZER(&visited_ports);
     LIST_FOR_EACH (er, list_node, &eg->route_list) {
-        const struct parsed_route *route_ = er->route;
-        const struct nbrec_logical_router_static_route *route = route_->route;
-        bool is_ipv4_nexthop = IN6_IS_ADDR_V4MAPPED(route_->nexthop);
+        const struct parsed_route *route = er->route;
+        bool is_ipv4_nexthop = IN6_IS_ADDR_V4MAPPED(route->nexthop);
         /* Symmetric ECMP reply is only usable on gateway routers.
          * It is NOT usable on distributed routers with a gateway port.
          */
         if (smap_get(&od->nbr->options, "chassis") &&
-            route_->ecmp_symmetric_reply && sset_add(&visited_ports,
-                                                     route_->out_port->key)) {
-            add_ecmp_symmetric_reply_flows(lflows, od, route_->lrp_addr_s,
-                                           route_->out_port,
-                                           route_, &route_match,
+            route->ecmp_symmetric_reply && sset_add(&visited_ports,
+                                                     route->out_port->key)) {
+            add_ecmp_symmetric_reply_flows(lflows, od, route->lrp_addr_s,
+                                           route->out_port,
+                                           route, &route_match,
                                            lflow_ref);
         }
         ds_clear(&match);
@@ -11919,7 +11970,7 @@ build_ecmp_route_flow(struct lflow_table *lflows, struct ovn_datapath *od,
         ds_clear(&actions);
         ds_put_format(&actions, "%s = ",
                       is_ipv4_nexthop ? REG_NEXT_HOP_IPV4 : REG_NEXT_HOP_IPV6);
-        ipv6_format_mapped(route_->nexthop, &actions);
+        ipv6_format_mapped(route->nexthop, &actions);
         ds_put_format(&actions, "; "
                       "%s = %s; "
                       "eth.src = %s; "
@@ -11927,13 +11978,13 @@ build_ecmp_route_flow(struct lflow_table *lflows, struct ovn_datapath *od,
                       REGBIT_NEXTHOP_IS_IPV4" = %d; "
                       "next;",
                       is_ipv4_nexthop ? REG_SRC_IPV4 : REG_SRC_IPV6,
-                      route_->lrp_addr_s,
-                      route_->out_port->lrp_networks.ea_s,
-                      route_->out_port->json_key,
+                      route->lrp_addr_s,
+                      route->out_port->lrp_networks.ea_s,
+                      route->out_port->json_key,
                       is_ipv4_nexthop);
         ovn_lflow_add_with_hint(lflows, od, S_ROUTER_IN_IP_ROUTING_ECMP, 100,
                                 ds_cstr(&match), ds_cstr(&actions),
-                                &route->header_, lflow_ref);
+                                route->source_hint, lflow_ref);
     }
     sset_destroy(&visited_ports);
     ds_destroy(&match);
@@ -11955,8 +12006,6 @@ add_route(struct lflow_table *lflows, struct ovn_datapath *od,
     uint16_t priority;
     const struct ovn_port *op_inport = NULL;
 
-    int ofs = route_source_to_offset(source);
-
     /* IPv6 link-local addresses must be scoped to the local router port. */
     if (!is_ipv4_prefix) {
         struct in6_addr network;
@@ -11966,7 +12015,7 @@ add_route(struct lflow_table *lflows, struct ovn_datapath *od,
         }
     }
     build_route_match(op_inport, rtb_id, network_s, plen, is_src_route,
-                      is_ipv4_prefix, &match, &priority, ofs, false);
+                      is_ipv4_prefix, &match, &priority, source, false);
 
     struct ds common_actions = DS_EMPTY_INITIALIZER;
     struct ds actions = DS_EMPTY_INITIALIZER;
@@ -12015,23 +12064,22 @@ add_route(struct lflow_table *lflows, struct ovn_datapath *od,
 
 static void
 build_route_flow(struct lflow_table *lflows, struct ovn_datapath *od,
-                        const struct parsed_route *route_,
+                        const struct parsed_route *route,
                         const struct sset *bfd_ports,
                         struct lflow_ref *lflow_ref)
 {
-    const struct nbrec_logical_router_static_route *route = route_->route;
-    bool is_ipv4_prefix = IN6_IS_ADDR_V4MAPPED(&route_->prefix);
-    bool is_ipv4_nexthop = route_->nexthop
-                           ? IN6_IS_ADDR_V4MAPPED(route_->nexthop)
+    bool is_ipv4_prefix = IN6_IS_ADDR_V4MAPPED(&route->prefix);
+    bool is_ipv4_nexthop = route->nexthop
+                           ? IN6_IS_ADDR_V4MAPPED(route->nexthop)
                            : is_ipv4_prefix;
 
-    char *prefix_s = build_route_prefix_s(&route_->prefix, route_->plen);
-    add_route(lflows, route_->is_discard_route ? od : route_->out_port->od,
-              route_->out_port, route_->lrp_addr_s, prefix_s,
-              route_->plen, route_->nexthop, route_->is_src_route,
-              route_->route_table_id, bfd_ports,
-              route ? &route->header_ : &route_->out_port->nbrp->header_,
-              route_->is_discard_route, route_->source, lflow_ref,
+    char *prefix_s = build_route_prefix_s(&route->prefix, route->plen);
+    add_route(lflows, route->is_discard_route ? od : route->out_port->od,
+              route->out_port, route->lrp_addr_s, prefix_s,
+              route->plen, route->nexthop, route->is_src_route,
+              route->route_table_id, bfd_ports,
+              route->source_hint,
+              route->is_discard_route, route->source, lflow_ref,
               is_ipv4_prefix, is_ipv4_nexthop);
 
     free(prefix_s);
diff --git a/northd/northd.h b/northd/northd.h
index 2be34e249..385a46ade 100644
--- a/northd/northd.h
+++ b/northd/northd.h
@@ -185,6 +185,10 @@ struct routes_data {
     struct hmap bfd_active_connections;
 };
 
+struct routes_sync_data {
+    struct hmap parsed_routes;
+};
+
 struct route_policies_data {
     struct hmap route_policies;
     struct hmap bfd_active_connections;
@@ -701,6 +705,8 @@ enum route_source {
     ROUTE_SOURCE_CONNECTED,
     /* The route is derived from a northbound static route entry. */
     ROUTE_SOURCE_STATIC,
+    /* the route is learned by an ovn-controller */
+    ROUTE_SOURCE_LEARNED,
 };
 
 struct parsed_route {
@@ -711,17 +717,41 @@ struct parsed_route {
     bool is_src_route;
     uint32_t route_table_id;
     uint32_t hash;
-    const struct nbrec_logical_router_static_route *route;
     bool ecmp_symmetric_reply;
     bool is_discard_route;
     const struct ovn_datapath *od;
     bool stale;
     struct sset ecmp_selection_fields;
     enum route_source source;
+    const struct ovsdb_idl_row *source_hint;
     char *lrp_addr_s;
     const struct ovn_port *out_port;
 };
 
+struct parsed_route * parsed_route_clone(const struct parsed_route *pr);
+size_t parsed_route_hash(const struct parsed_route *pr);
+void parsed_route_free(struct parsed_route *pr);
+void parsed_route_add(const struct ovn_datapath *od,
+                      struct in6_addr *nexthop,
+                      const struct in6_addr *prefix,
+                      unsigned int plen,
+                      bool is_discard_route,
+                      const char *lrp_addr_s,
+                      const struct ovn_port *out_port,
+                      uint32_t route_table_id,
+                      bool is_src_route,
+                      bool ecmp_symmetric_reply,
+                      const struct sset *ecmp_selection_fields,
+                      enum route_source source,
+                      const struct ovsdb_idl_row *source_hint,
+                      struct hmap *routes);
+
+bool
+find_route_outport(const struct hmap *lr_ports, const char *output_port,
+                   const char *ip_prefix, const char *nexthop, bool is_ipv4,
+                   bool force_out_port,
+                   struct ovn_port **out_port, const char **lrp_addr_s);
+
 void ovnnb_db_run(struct northd_input *input_data,
                   struct northd_data *data,
                   struct ovsdb_idl_txn *ovnnb_txn,
diff --git a/tests/ovn-northd.at b/tests/ovn-northd.at
index 370f1d38d..b1c88fd8e 100644
--- a/tests/ovn-northd.at
+++ b/tests/ovn-northd.at
@@ -6823,9 +6823,9 @@ AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
   table=??(lr_in_ip_routing   ), priority=10300, match=(ct_mark.ecmp_reply_port == 1 && reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; eth.src = 00:00:20:20:12:13; reg5 = 192.168.0.1; outport = "lr0-public"; next;)
   table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=162  , match=(reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=260  , match=(reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
 ])
 
 AT_CHECK([grep -e "lr_in_ip_routing_ecmp" lr0flows | ovn_strip_lflows], [0], [dnl
@@ -6841,9 +6841,9 @@ AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
   table=??(lr_in_ip_routing   ), priority=10300, match=(ct_mark.ecmp_reply_port == 1 && reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; eth.src = 00:00:20:20:12:13; reg5 = 192.168.0.1; outport = "lr0-public"; next;)
   table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=162  , match=(reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=260  , match=(reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
 ])
 AT_CHECK([grep -e "lr_in_ip_routing_ecmp" lr0flows | sed 's/192\.168\.0\..0/192.168.0.??/' | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing_ecmp), priority=0    , match=(1), action=(drop;)
@@ -6870,9 +6870,9 @@ AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
   table=??(lr_in_ip_routing   ), priority=10300, match=(ct_mark.ecmp_reply_port == 1 && reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; eth.src = 00:00:20:20:12:13; reg5 = 192.168.0.1; outport = "lr0-public"; next;)
   table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=162  , match=(reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=260  , match=(reg7 == 0 && ip4.dst == 1.0.0.1/32), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(1, 2);)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
 ])
 AT_CHECK([grep -e "lr_in_ip_routing_ecmp" lr0flows | sed 's/192\.168\.0\..0/192.168.0.??/' | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing_ecmp), priority=0    , match=(1), action=(drop;)
@@ -6888,14 +6888,14 @@ check ovn-nbctl --wait=sb lr-route-add lr0 1.0.0.0/24 192.168.0.10
 ovn-sbctl dump-flows lr0 > lr0flows
 
 AT_CHECK([grep -e "lr_in_ip_routing.*192.168.0.10" lr0flows | ovn_strip_lflows], [0], [dnl
-  table=??(lr_in_ip_routing   ), priority=122  , match=(reg7 == 0 && ip4.dst == 1.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 1.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
 ])
 
 check ovn-nbctl --wait=sb lr-route-add lr0 2.0.0.0/24 lr0-public
 
 ovn-sbctl dump-flows lr0 > lr0flows
 AT_CHECK([grep -e "lr_in_ip_routing.*2.0.0.0" lr0flows | ovn_strip_lflows], [0], [dnl
-  table=??(lr_in_ip_routing   ), priority=122  , match=(reg7 == 0 && ip4.dst == 2.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 2.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
 ])
 
 check ovn-nbctl lr-route-add lr0 3.3.0.0/16 192.168.0.11
@@ -6910,7 +6910,7 @@ check ovn-nbctl set logical_router_static_route $route2_uuid selection_fields="i
 check ovn-nbctl --wait=sb sync
 ovn-sbctl dump-flows lr0 > lr0flows
 AT_CHECK([grep -e "(lr_in_ip_routing   ).*3.3.0.0" lr0flows | sed 's/table=../table=??/' | sort], [0], [dnl
-  table=??(lr_in_ip_routing   ), priority=82   , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src");)
+  table=??(lr_in_ip_routing   ), priority=132  , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src");)
 ])
 
 check ovn-nbctl set logical_router_static_route $route1_uuid selection_fields="ip_src,ip_dst,tp_src,tp_dst"
@@ -6919,10 +6919,10 @@ check ovn-nbctl set logical_router_static_route $route2_uuid selection_fields="i
 check ovn-nbctl --wait=sb sync
 ovn-sbctl dump-flows lr0 > lr0flows
 AT_CHECK([grep -e "(lr_in_ip_routing   ).*3.3.0.0" lr0flows | sed 's/table=../table=??/' | sort], [0], [dnl
-  table=??(lr_in_ip_routing   ), priority=82   , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src");)
-  table=??(lr_in_ip_routing   ), priority=83   , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16 && sctp), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src,sctp_dst,sctp_src");)
-  table=??(lr_in_ip_routing   ), priority=83   , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16 && tcp), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src,tcp_dst,tcp_src");)
-  table=??(lr_in_ip_routing   ), priority=83   , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16 && udp), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src,udp_dst,udp_src");)
+  table=??(lr_in_ip_routing   ), priority=132  , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src");)
+  table=??(lr_in_ip_routing   ), priority=133  , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16 && sctp), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src,sctp_dst,sctp_src");)
+  table=??(lr_in_ip_routing   ), priority=133  , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16 && tcp), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src,tcp_dst,tcp_src");)
+  table=??(lr_in_ip_routing   ), priority=133  , match=(reg7 == 0 && ip4.dst == 3.3.0.0/16 && udp), action=(ip.ttl--; flags.loopback = 1; reg8[[0..15]] = 1; reg8[[16..31]] = select(values=(1, 2); hash_fields="ip_dst,ip_proto,ip_src,udp_dst,udp_src");)
 ])
 
 AT_CLEANUP
@@ -6960,14 +6960,14 @@ ovn-sbctl dump-flows lr0 > lr0flows
 AT_CHECK([grep -e "lr_in_ip_routing " lr0flows | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
   table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
-  table=??(lr_in_ip_routing   ), priority=122  , match=(reg7 == 0 && ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=122  , match=(reg7 == 0 && ip4.dst == 11.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = 2001:db8::10; xxreg1 = 2001:db8::1; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=322  , match=(reg7 == 0 && ip6.dst == 2001:db8:1::/64), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.20; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=322  , match=(reg7 == 0 && ip6.dst == 2001:db8:2::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = 2001:db8::20; xxreg1 = 2001:db8::1; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lr0-private" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1214; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(ip6.dst == 2001:db8::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = 2001:db8::1; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 11.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = 2001:db8::10; xxreg1 = 2001:db8::1; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=516  , match=(reg7 == 0 && ip6.dst == 2001:db8:1::/64), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.20; reg5 = 192.168.0.1; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=516  , match=(reg7 == 0 && ip6.dst == 2001:db8:2::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = 2001:db8::20; xxreg1 = 2001:db8::1; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-private" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1214; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-public" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:20ff:fe20:1213; eth.src = 00:00:20:20:12:13; outport = "lr0-public"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(ip6.dst == 2001:db8::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = 2001:db8::1; eth.src = 00:00:20:20:12:14; outport = "lr0-private"; flags.loopback = 1; reg9[[9]] = 0; next;)
 ])
 
 AT_CHECK([grep -e "lr_in_arp_resolve" lr0flows | ovn_strip_lflows], [0], [dnl
@@ -7406,16 +7406,16 @@ AT_CHECK([grep "lr_in_ip_routing_pre" lr0flows | ovn_strip_lflows], [0], [dnl
 grep -e "(lr_in_ip_routing   ).*outport" lr0flows
 
 AT_CHECK([grep -e "(lr_in_ip_routing   ).*outport" lr0flows | ovn_strip_lflows], [0], [dnl
-  table=??(lr_in_ip_routing   ), priority=122  , match=(reg7 == 1 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.1.10; reg5 = 192.168.1.1; eth.src = 00:00:00:00:01:01; outport = "lrp1"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.1.1; eth.src = 00:00:00:00:01:01; outport = "lrp1"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=124  , match=(ip4.dst == 192.168.2.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.2.1; eth.src = 00:00:00:00:02:01; outport = "lrp2"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=162  , match=(reg7 == 2 && ip4.dst == 1.1.1.1/32), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.20; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=2    , match=(reg7 == 0 && ip4.dst == 0.0.0.0/0), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=2    , match=(reg7 == 2 && ip4.dst == 0.0.0.0/0), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lrp0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 0; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lrp1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:101; eth.src = 00:00:00:00:01:01; outport = "lrp1"; flags.loopback = 1; reg9[[9]] = 0; next;)
-  table=??(lr_in_ip_routing   ), priority=324  , match=(inport == "lrp2" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:201; eth.src = 00:00:00:00:02:01; outport = "lrp2"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 1 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.1.10; reg5 = 192.168.1.1; eth.src = 00:00:00:00:01:01; outport = "lrp1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.1.1; eth.src = 00:00:00:00:01:01; outport = "lrp1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 192.168.2.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 192.168.2.1; eth.src = 00:00:00:00:02:01; outport = "lrp2"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=260  , match=(reg7 == 2 && ip4.dst == 1.1.1.1/32), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.20; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=4    , match=(reg7 == 0 && ip4.dst == 0.0.0.0/0), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=4    , match=(reg7 == 2 && ip4.dst == 0.0.0.0/0), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 192.168.0.10; reg5 = 192.168.0.1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lrp0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:1; eth.src = 00:00:00:00:00:01; outport = "lrp0"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lrp1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:101; eth.src = 00:00:00:00:01:01; outport = "lrp1"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lrp2" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:201; eth.src = 00:00:00:00:02:01; outport = "lrp2"; flags.loopback = 1; reg9[[9]] = 0; next;)
 ])
 
 AT_CLEANUP
@@ -14500,3 +14500,95 @@ AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$d
 AT_CLEANUP
 ])
 
+OVN_FOR_EACH_NORTHD_NO_HV([
+AT_SETUP([dynamic-routing - learning routes from sb])
+AT_KEYWORDS([dynamic-routing])
+ovn_start
+
+# we start with announcing routes on a lr with 2 lrps and 2 static routes
+check ovn-nbctl lr-add lr0
+check ovn-nbctl --wait=sb set Logical_Router lr0 option:dynamic-routing=true \
+                                 option:dynamic-routing-connected=true \
+                                 option:dynamic-routing-static=true
+check ovn-nbctl --wait=sb lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24
+sw0=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw0)
+check ovn-nbctl --wait=sb lrp-add lr0 lr0-sw1 00:00:00:00:ff:02 10.0.1.1/24
+sw1=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw1)
+check ovn-nbctl --wait=sb lr-route-add lr0 192.168.0.0/24 10.0.0.10
+check ovn-nbctl --wait=sb lr-route-add lr0 192.168.1.0/24 10.0.1.10
+check_row_count Advertised_Route 4
+datapath=$(ovn-sbctl --bare --columns _uuid list datapath_binding lr0)
+
+# validate the routes
+ovn-sbctl dump-flows lr0 > lr0flows
+AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
+  table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.10; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.1.10; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff01; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff02; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 0; next;)
+])
+
+# learn a route to 172.16.0.0/24 via 10.0.0.11 learned on lr0-sw0
+ovn-sbctl create Learned_Route datapath=$datapath logical_port=$sw0 ip_prefix=172.16.0.0/24 nexthop=10.0.0.11
+check ovn-nbctl --wait=sb sync
+check_row_count Advertised_Route 4
+check_row_count Learned_Route 1
+ovn-sbctl dump-flows lr0 > lr0flows
+AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
+  table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=194  , match=(reg7 == 0 && ip4.dst == 172.16.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.11; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.10; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.1.10; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff01; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff02; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 0; next;)
+])
+
+# learn a route to 172.16.1.0/24 via 100.100.100.100 learned on lr0-sw1
+# this is not reachable so will not produce a lflow
+ovn-sbctl create Learned_Route datapath=$datapath logical_port=$sw1 ip_prefix=172.16.1.0/24 nexthop=100.100.100.100
+check ovn-nbctl --wait=sb sync
+check_row_count Advertised_Route 4
+check_row_count Learned_Route 2
+ovn-sbctl dump-flows lr0 > lr0flows
+AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
+  table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=194  , match=(reg7 == 0 && ip4.dst == 172.16.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.11; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.10; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.1.10; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff01; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff02; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 0; next;)
+])
+
+# if we now add 100.100.100.10/24 as an additional network to lr0-sw1 we will
+# get another connected route and the previous received route will be active
+check ovn-nbctl --wait=sb set Logical_Router_Port lr0-sw1 networks="10.0.1.1/24 100.100.100.10/24"
+check_row_count Advertised_Route 5
+check_row_count Learned_Route 2
+ovn-sbctl dump-flows lr0 > lr0flows
+AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
+  table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=194  , match=(reg7 == 0 && ip4.dst == 172.16.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.11; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=194  , match=(reg7 == 0 && ip4.dst == 172.16.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 100.100.100.100; reg5 = 100.100.100.10; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.10; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.1.10; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.1.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.1.1; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 100.100.100.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 100.100.100.10; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff01; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 0; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff02; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 0; next;)
+])
+
+AT_CLEANUP
+])
+

From patchwork Wed Dec 18 10:24:59 2024
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2024811
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=DdKGgVRm;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=DdKGgVRm;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=140.211.166.138; helo=smtp1.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp1.osuosl.org (smtp1.osuosl.org [140.211.166.138])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YCqZy6412z1yRt
	for <incoming@patchwork.ozlabs.org>; Wed, 18 Dec 2024 21:26:02 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp1.osuosl.org (Postfix) with ESMTP id 5189884E12;
	Wed, 18 Dec 2024 10:26:01 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id yANKAkQTku8D; Wed, 18 Dec 2024 10:26:00 +0000 (UTC)
X-Comment: SPF check N/A for local connections -
 client-ip=2605:bc80:3010:104::8cd3:938; helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp1.osuosl.org DDCE284DE3
Authentication-Results: smtp1.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=DdKGgVRm;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=DdKGgVRm
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org
 [IPv6:2605:bc80:3010:104::8cd3:938])
	by smtp1.osuosl.org (Postfix) with ESMTPS id DDCE284DE3;
	Wed, 18 Dec 2024 10:25:59 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 97EE9C0886;
	Wed, 18 Dec 2024 10:25:59 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp2.osuosl.org (smtp2.osuosl.org [140.211.166.133])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 84B14C0864
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:57 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp2.osuosl.org (Postfix) with ESMTP id 9CE2B4172E
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:39 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp2.osuosl.org ([127.0.0.1])
 by localhost (smtp2.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id 6rGb2mpg4vfb for <dev@openvswitch.org>;
 Wed, 18 Dec 2024 10:25:37 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:c20f::7;
 helo=osppr02cu001.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp2.osuosl.org EA8494170A
Authentication-Results: smtp2.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp2.osuosl.org EA8494170A
Authentication-Results: smtp2.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=DdKGgVRm;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=DdKGgVRm
Received: from OSPPR02CU001.outbound.protection.outlook.com
 (mail-norwayeastazlp170130007.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:c20f::7])
 by smtp2.osuosl.org (Postfix) with ESMTPS id EA8494170A
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:35 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=ybLvPOmvOxx8+zwuZZmz4loSkH/Nzo6sdoQ1gTyH1XltHKoCUxWuQ+CNx2ZgQChbJvgLCh1GmFlEi+Mhvte0zieC5sRHvPs7SPKe7yzmfFpndqkH8S/hFHeH0G+F4jdjxUj8WRTASB+6fJl6NJ3M3S2ReNRU99sGsVj1luTt9yAWWF7G3g8+1er9xToq51qX++QTi7SJNoFkAEhS7hOddlx/XTISEcxbjBQto+2A4QhsmgvkgI925LGAahKDJ3PhIYblHPqFiLzaCqHT9b4Jfn1Nlu5wodkYKVYwhvgzGfEr2zdcKsCIXW47xwtE+V2c3o7wM9Q2OhUkA8v85rEsLw==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ZZuLGfOBbonWX9eDxa0eTZdxAWsKjL1btGNa09Hzq8I=;
 b=M5EQPruqbIv055RZdio6QNTleY8QqtvkIxiH27m1LtSuSA8Pbkzcc6c9I8EpV3Aicn+tBpFidQBEyWOpuMa0sznUaHVeFSWVE+FAcrc+OU9SIRJA7Yjy2S3OLoXS4adz+oeX2OMzOqZCGV5Wwc3Z1VeORZjR4vcUmTCSaEhTcQI8nG4tktO0njHQVBSh+5p50avBuwcqaid226vSOp65fUN+BfoilhM39FKGJfsak9kNbvmuNyfuJaGND1M8yKCx+2jM9HjSh2O5PIXukAjKniAD/hpTO1IBTfwvFX9jMGRqQM8cfRToPThLz7+x8503s/1WF9YQ5jjE2dxKVe7bmQ==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ZZuLGfOBbonWX9eDxa0eTZdxAWsKjL1btGNa09Hzq8I=;
 b=DdKGgVRmlAIkZyUgHG/kRZJ1Y/QN+VHvFm+scZ3HpcZfzgMFLVwfAqWfVb0Xxgy5/3zmhKAXslVEyQkH+qH/0VbzY2WqY5IbWJf6pSYQRCo4qArEDhQnWhR1eqK95FgOt9JfREHL4fSEpC4/uWcG+D42oeOsJXjDEftQXVnb6ZA2QZ/0DU5h1zhk2Pvm0LWBtl/yGIdOzNuAhQkaGcJeyaRG+uyphfgq2/gFyE/1g8oXPmB/AhxxQ1VTPL7711w5h3iad4bnWyXltO8XDMqg8Aff8LUc+ZsNlZkdlz2jXXmcKOuUk3k0jQGEkq6oDExY2Zt7hlht2cW9JtLM9T1qNQ==
Received: from DUZP191CA0072.EURP191.PROD.OUTLOOK.COM (2603:10a6:10:4fa::12)
 by DU0PR10MB5388.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:32a::9) with
 Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.13; Wed, 18 Dec
 2024 10:25:28 +0000
Received: from DU2PEPF00028D0F.eurprd03.prod.outlook.com
 (2603:10a6:10:4fa:cafe::c2) by DUZP191CA0072.outlook.office365.com
 (2603:10a6:10:4fa::12) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8251.22 via Frontend Transport; Wed,
 18 Dec 2024 10:25:28 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 DU2PEPF00028D0F.mail.protection.outlook.com (10.167.242.23) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8251.15 via Frontend Transport; Wed, 18 Dec 2024 10:25:26 +0000
Received: from EUR05-DB8-obe.outbound.protection.outlook.com (104.47.17.111)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Wed, 18 Dec 2024 10:25:26
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 6151370
X-ExclaimerImprintLatency: 3186435
X-ExclaimerImprintAction: 14b362002860492fa076136009095b7c
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=bJ5xRuObrYsjlYvUaUmMrhPeaqYfWQUDHf7RAIv9mKgWtv901yqArNV8/95RcVC83aL0PgSCkVL2h/MaJAieFOF4XKqiYvY/SzAruG5eUqWDkmSLSkmpoqVC+CNhPVf5k9RofP0Ayga75FdpOTBazPT7nGt7hue9kvo/A1bETFZNss1MPX7QJ74wi+cZ+XF4dhygAG2hWBNP8g9y2tr59ahxkK+j72vXiv78gxfId8QRUtq9Xfof08Gwx7YjPKeIPf/yaN0wR1ZwGmeTT6rtUO0N0jsPaJI64QjpuY0OkEVSiKyn4GOhNHgJ90pcAVfMs5rXaP/8wvRqKyaerWuGoA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=ZZuLGfOBbonWX9eDxa0eTZdxAWsKjL1btGNa09Hzq8I=;
 b=snnHauFRvUSWY3QLWkI//mYDSPjJtBSU55ta0r46AMdsI9qgcdOuqSRFOtj2b/r5+rD3Px9AEoWrYFN8cnUF+tEDxj3/xp020W8ClsmvGHMTpbUAC8Jetlne/6/t4ZO5i2Gh8D4RLiImikQqj8SpgZK2G5rV8LQil7q9h3owZ+w5jEj9xScpZi3y/B4/FjV6F/lyjhApcpXwR1vvEZuzjw2Orv3Pp6+aJdIz3wLwuAPaX0oNei48aefq8VID/rUqoKPgyCbt32PqzkIbJ3lquvYcNErpSNcvlG7EalvmIBnMFWIlEsweHnw8QQcfPR29ZU1+0ZtRsp2CfbT2VFHn3Q==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=ZZuLGfOBbonWX9eDxa0eTZdxAWsKjL1btGNa09Hzq8I=;
 b=DdKGgVRmlAIkZyUgHG/kRZJ1Y/QN+VHvFm+scZ3HpcZfzgMFLVwfAqWfVb0Xxgy5/3zmhKAXslVEyQkH+qH/0VbzY2WqY5IbWJf6pSYQRCo4qArEDhQnWhR1eqK95FgOt9JfREHL4fSEpC4/uWcG+D42oeOsJXjDEftQXVnb6ZA2QZ/0DU5h1zhk2Pvm0LWBtl/yGIdOzNuAhQkaGcJeyaRG+uyphfgq2/gFyE/1g8oXPmB/AhxxQ1VTPL7711w5h3iad4bnWyXltO8XDMqg8Aff8LUc+ZsNlZkdlz2jXXmcKOuUk3k0jQGEkq6oDExY2Zt7hlht2cW9JtLM9T1qNQ==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU4PR10MB9191.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:568::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:25:01 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8272.005; Wed, 18 Dec 2024
 10:25:01 +0000
Date: Wed, 18 Dec 2024 11:24:59 +0100
To: dev@openvswitch.org
Message-ID: 
 <0664b2cd76ade6b4f5e056454d28c7929064e0a5.1734513750.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1734513749.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1734513749.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0107.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::17) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU4PR10MB9191:EE_|DU2PEPF00028D0F:EE_|DU0PR10MB5388:EE_
X-MS-Office365-Filtering-Correlation-Id: ce79ad36-8b10-4910-f853-08dd1f4e4a3f
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info-Original: 
 ly4wcHzAuVHAvrOtfoaOYce4ReN/v17T0ttjkwOhBh2wRlIDXP4HrK7WD39x1jAuFiVNxqHVH2rdMcwxwGyM664D1sUSgFbmG6q8iegGikYFQHb3ILYmDJi8S3roe445UxHKOQvEfT02cAUyTIVfDN8D8YeUPo2h+T9aAaSGr4zQo9DiR3n+OpaLHg4Nwn0HV2ZEEs4eZf/9+T2uQ50Tb81qsvpYnuqXd3fkQGLmbcuBbYdYgNkXyt0qu4u9K6cXi0/KHTLre4/j5Bp8AKAdt2UA30UmmnjoWDt+h87CpEzA+/NByM1XJDOlAbD27Ufhip14TMlt8bCIFPtHssdaCCTKbpd75es6HL6xdk4VUUxypXHq7lP9Bi5S9s37/UU4qB06cgfgy22CxZJQEloYZcEB3CjTL421nFwN+zOXs3Zxco/+mhJD+vzDCu300ZnO3VVCPvBwGw+Hi18E5BOpWWaD28t4nmuDrQlYFwNvCMZzcao0fvLG0aqdHsFIwbVy77DgRVdvOsgbEtVUVLXtvYO6ZM+e8v2PeTci0Swq/WhHIIhUn1wFueqpLrVh/Z3NSQngniCrrx8FqeSGV9ZLyca5cXNrtu2DsTAgNPNH807VbZrJo94KoJBbpO0S30HOyrJR7sFr+yDE3oSVgIm8/0CxCvNEKe3qMcsT0E9WMD2JdEfS0UNl55ZfYIXEX5+wC2TtbdObhRtiEJtjDGWgzf2mpSNib9348OWL80LgD9F4vmvoOW5erhpdl4uSuW6gpvo0JpXTp5NQcRcv3xD25N7fj9YUdKaCK9DL4fISNMHErVbDncKMW1lP5TzovO3n5aNBDRqck0c4uUnAKSZPKfKuloCA7D57UxD8sYCus30Uvwx8P3ukMqCC0Axxq7Hbogz2Z6oiEMBriRxJuKwmDz85VF6GoSlMAikOKmIa/3PC17VI6A9HK8XS9A8xVj24YUz4uM/3Xx3L/6myt3rd8ZDeQ3C9puQZcnwe7iXzPJJS2iYjOSONJwiWtL1jWYLCFiFVU6qAcV9Ray+uR96R2dQ/gNfT/fb1GwZ8/gzDW3ot9N4m/fETIqjZ7+m1lp7PLOWuYHzGoR7ibE649hDJoThwX8OSBzxh1R5ER/mMhm6rMJTW/nK6knrbiTLRIMQCeY0oeIEzsmgqhO3/9N5U36rqaBJbamczMeg7RE0RMe7v68OvzYc5W4KUWPrPER0HHiFjOBju4cfPcE3ryrcXsaHUFM8W4bTUM81anpD9hnK2cvj9U83tmC3QAVNW2JnN+xPaC73prdgz0LjUl+5oU6f5hoLAUGUk7fY2ZPPwkq4Og6DLU9JF1Guhdqyl8Yw5Wsyhte/OzOcxtQuKYmZ5Qacd7EPNi6c6babLfzX7Qbpe5gWM6nuNAoDSNRHUl3fr
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(376014)(366016)(1800799024); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU4PR10MB9191
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 DU2PEPF00028D0F.eurprd03.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 2e58029f-d551-4919-5b69-08dd1f4e3ac1
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|35042699022|82310400026|1800799024|14060799003|376014|36860700013;
X-Microsoft-Antispam-Message-Info: 
 UEIMvUdRGR6O+2xF8L78uqgpOHykK7a8VztIjgkgkpjjcEzEZKhR741SZ7FOesGwWHV+44lAXdrg4k0mtC/LCjPAg8afv4JTd9MYcOjOZpnjM0QGPrJqJ6VU0mkcu95D8dNg0kCu+1rA/bER0TQF5+GCIzfrb5+XNFJLTD75fBnNRaaLYih+Ytq8Hvq037roPhd3SrmKOBLeHeDDLeHvHKLyp8ZXY7Q/+XRR7lC6YgUf9/G/DsGvuWaoZTFasLdLNXq1Xpa1U/FYIax7nyna2HzYYiDk8GeVLCKokereVc0YD3S5pXXavj0nnOPdAhpbACPvGLRjn3MgatPulaCH7C4QcO22YS4dJf1G+rkUToCi9LWAMw905N9WFFZ2SRHuNPuYC0iMDLVvMb5KgngQvquhexlITw5mrT8o6kSKhbAeULdjT69mfpUEfovNo7oSX5pP1a1F73tyNTDpHShOtQanHgMMacGj0sx4upnO7QPL0yZJhJvoqjzQIqoF61V4Q7ucRIKB2cWwfoM4RUal4UL1B3ZyiYNYGngIRsUxV8q5WwozrjrF0tYX3+Ndrp5/HvkHava6MHKhZqFV3bzj8deQLW47X1J0/CpR02hyz/uTNfQSkbUZCfwsio0aaO1jlcPnjkXGWCMy1Y51IIMVsqr2u58CC8DDoChwiOggUyB3Y68QoXgF9V4KscylofxlF0q/0cePa7KQXjMgknE4gMxTiPVi5fcpOmTFvU47szpfVmV9EKxNY0eP7FdC3oR3aKTFvmxonfxD6ktAQ1soCIYUxz+IcbuwJ1LNzHgZqFzjgNR2/PIwAiAOv63Sv1DdbQM8JpgwvpwYLiPu/d3KfsIb6qXl47rHMgz3iQz0v3ZqhqQkD56pdIvLjDkcHqCAFC4mm93EONVPw1IahRD8lBu+PXKaQ94Eds9e+fNVAiNVMGH7cTQh7OvwWkr3nqA7new8nXhWMDMMKHJndj6rRzsdPTNrtqzvPKCVMhTsszAQEFiUwxBwGZ0z9WbcgQTzS0O9JiAjOOYaKoZBMzyLDoiakSw16CIa9QwKyyXG4t23pP0vV3wDGg0NXSDuWs1y/FiaV0B1yQr6qv9iwIowwyTknpe9RhEYI4AGF6oppVII1GrzqTeeYT2R92AsuZ31E3RCn86tgRcg2CHYkbZOl7jKkYBUm/m0FHt5HM7/JYSuD9pZ9qL5+TQDPE2qGTs2OMjmQUI/du7Qk7ZSZXMoak316PshES6F5JgECbhuFQmgecTjLCwiKCK4Imu437R+X9EiBD0MwwGbVe6OGpFlWz6aTWbAh1+7XhLBbS5Jw9Ql9rxVzBQLtjUOL/mCAhWZ74wiRD1ehwmZ/FcL42Slc0BrvfeYCTg7ZTl50Y/kG7z9HM6x6u9En6LoqrTWr31nBO0LxwJDPQxUbe/USXwR0M6GHtpBg+Zp6rtymBP/MxnQu/aftDoX3sE3hkjbBMvulJUYXhU77ogNU3Op/cnq7OmU83FxcZ2D1wwek4nbwEo=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(35042699022)(82310400026)(1800799024)(14060799003)(376014)(36860700013);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Dec 2024 10:25:26.6188 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 ce79ad36-8b10-4910-f853-08dd1f4e4a3f
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 DU2PEPF00028D0F.eurprd03.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB5388
Subject: [ovs-dev] [PATCH ovn v2 4/6] northd: Remove learned routes if lrp
 is removed.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

learned routes must be bound to a lrp on which the routes where learned.
In case the lrp is deleted for whatever reason no ovn-controller would
clean these routes up, therefor we do this in northd.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 northd/en-learned-route-sync.c |  5 +++++
 northd/northd.c                | 35 +---------------------------------
 northd/northd.h                | 34 +++++++++++++++++++++++++++++++++
 tests/ovn-northd.at            | 15 +++++++++++++++
 4 files changed, 55 insertions(+), 34 deletions(-)

diff --git a/northd/en-learned-route-sync.c b/northd/en-learned-route-sync.c
index 962ccd10e..7ec9f48db 100644
--- a/northd/en-learned-route-sync.c
+++ b/northd/en-learned-route-sync.c
@@ -205,6 +205,11 @@ routes_table_sync(struct ovsdb_idl_txn *ovnsb_txn,
 
     const struct sbrec_learned_route *sb_route;
     SBREC_LEARNED_ROUTE_TABLE_FOR_EACH (sb_route, sbrec_learned_route_table) {
+        if (!ovn_port_find(lr_ports,
+                           sb_route->logical_port->logical_port)) {
+            sbrec_learned_route_delete(sb_route);
+            continue;
+        }
         parse_route_from_sbrec_route(parsed_routes_out, lr_ports,
                                      &lr_datapaths->datapaths,
                                      sb_route);
diff --git a/northd/northd.c b/northd/northd.c
index b003d4791..75519e734 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -1289,34 +1289,6 @@ ovn_port_destroy(struct hmap *ports, struct ovn_port *port)
     }
 }
 
-/* Returns the ovn_port that matches 'name'.  If 'prefer_bound' is true and
- * multiple ports share the same name, gives precendence to ports bound to
- * an ovn_datapath.
- */
-static struct ovn_port *
-ovn_port_find__(const struct hmap *ports, const char *name,
-                bool prefer_bound)
-{
-    struct ovn_port *matched_op = NULL;
-    struct ovn_port *op;
-
-    HMAP_FOR_EACH_WITH_HASH (op, key_node, hash_string(name, 0), ports) {
-        if (!strcmp(op->key, name)) {
-            matched_op = op;
-            if (!prefer_bound || op->od) {
-                return op;
-            }
-        }
-    }
-    return matched_op;
-}
-
-static struct ovn_port *
-ovn_port_find(const struct hmap *ports, const char *name)
-{
-    return ovn_port_find__(ports, name, false);
-}
-
 static bool
 lsp_is_clone_to_unknown(const struct nbrec_logical_switch_port *nbsp)
 {
@@ -1331,12 +1303,6 @@ lsp_is_clone_to_unknown(const struct nbrec_logical_switch_port *nbsp)
     return false;
 }
 
-static struct ovn_port *
-ovn_port_find_bound(const struct hmap *ports, const char *name)
-{
-    return ovn_port_find__(ports, name, true);
-}
-
 /* Returns true if the logical switch port 'enabled' column is empty or
  * set to true.  Otherwise, returns false. */
 static bool
@@ -3410,6 +3376,7 @@ cleanup_mac_bindings(
     }
 }
 
+
 static void
 cleanup_sb_ha_chassis_groups(
     const struct sbrec_ha_chassis_group_table *sbrec_ha_chassis_group_table,
diff --git a/northd/northd.h b/northd/northd.h
index 385a46ade..9b80f422d 100644
--- a/northd/northd.h
+++ b/northd/northd.h
@@ -904,4 +904,38 @@ is_vxlan_mode(const struct smap *nb_options,
 
 uint32_t get_ovn_max_dp_key_local(bool _vxlan_mode);
 
+/* Returns the ovn_port that matches 'name'.  If 'prefer_bound' is true and
+ * multiple ports share the same name, gives precendence to ports bound to
+ * an ovn_datapath.
+ */
+static struct ovn_port *
+ovn_port_find__(const struct hmap *ports, const char *name,
+                bool prefer_bound)
+{
+    struct ovn_port *matched_op = NULL;
+    struct ovn_port *op;
+
+    HMAP_FOR_EACH_WITH_HASH (op, key_node, hash_string(name, 0), ports) {
+        if (!strcmp(op->key, name)) {
+            matched_op = op;
+            if (!prefer_bound || op->od) {
+                return op;
+            }
+        }
+    }
+    return matched_op;
+}
+
+static inline struct ovn_port *
+ovn_port_find(const struct hmap *ports, const char *name)
+{
+    return ovn_port_find__(ports, name, false);
+}
+
+static inline struct ovn_port *
+ovn_port_find_bound(const struct hmap *ports, const char *name)
+{
+    return ovn_port_find__(ports, name, true);
+}
+
 #endif /* NORTHD_H */
diff --git a/tests/ovn-northd.at b/tests/ovn-northd.at
index b1c88fd8e..1dd2613c3 100644
--- a/tests/ovn-northd.at
+++ b/tests/ovn-northd.at
@@ -14589,6 +14589,21 @@ AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
   table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw1" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff02; eth.src = 00:00:00:00:ff:02; outport = "lr0-sw1"; flags.loopback = 1; reg9[[9]] = 0; next;)
 ])
 
+# deleting lr0-sw1 will remove the flows and also the learned route
+check ovn-nbctl --wait=sb lrp-del lr0-sw1
+check_row_count Advertised_Route 2
+check_row_count Learned_Route 1
+check_row_count Learned_Route 1 logical_port=$sw0
+ovn-sbctl dump-flows lr0 > lr0flows
+AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
+  table=??(lr_in_ip_routing   ), priority=0    , match=(1), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=10550, match=(nd_rs || nd_ra), action=(drop;)
+  table=??(lr_in_ip_routing   ), priority=194  , match=(reg7 == 0 && ip4.dst == 172.16.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.11; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=196  , match=(reg7 == 0 && ip4.dst == 192.168.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = 10.0.0.10; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=198  , match=(ip4.dst == 10.0.0.0/24), action=(ip.ttl--; reg8[[0..15]] = 0; reg0 = ip4.dst; reg5 = 10.0.0.1; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 1; next;)
+  table=??(lr_in_ip_routing   ), priority=518  , match=(inport == "lr0-sw0" && ip6.dst == fe80::/64), action=(ip.ttl--; reg8[[0..15]] = 0; xxreg0 = ip6.dst; xxreg1 = fe80::200:ff:fe00:ff01; eth.src = 00:00:00:00:ff:01; outport = "lr0-sw0"; flags.loopback = 1; reg9[[9]] = 0; next;)
+])
+
 AT_CLEANUP
 ])
 

From patchwork Wed Dec 18 10:25:01 2024
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2024814
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=pzMCOajV;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=pzMCOajV;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=140.211.166.138; helo=smtp1.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp1.osuosl.org (smtp1.osuosl.org [140.211.166.138])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YCqbF1Qv8z1yRt
	for <incoming@patchwork.ozlabs.org>; Wed, 18 Dec 2024 21:26:17 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp1.osuosl.org (Postfix) with ESMTP id CEA5B84DE6;
	Wed, 18 Dec 2024 10:26:15 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp1.osuosl.org ([127.0.0.1])
 by localhost (smtp1.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id 65ltTHPQCEKi; Wed, 18 Dec 2024 10:26:10 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp1.osuosl.org B53D384E91
Authentication-Results: smtp1.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=pzMCOajV;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=pzMCOajV
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp1.osuosl.org (Postfix) with ESMTPS id B53D384E91;
	Wed, 18 Dec 2024 10:26:09 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id 620A1C0886;
	Wed, 18 Dec 2024 10:26:09 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp3.osuosl.org (smtp3.osuosl.org [IPv6:2605:bc80:3010::136])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 02E8AC0864
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:26:04 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp3.osuosl.org (Postfix) with ESMTP id F080B61441
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:34 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id H2f9V_DiQyHi for <dev@openvswitch.org>;
 Wed, 18 Dec 2024 10:25:33 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:c201::;
 helo=am0pr83cu005.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp3.osuosl.org F3FA1614A2
Authentication-Results: smtp3.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org F3FA1614A2
Authentication-Results: smtp3.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=pzMCOajV;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=pzMCOajV
Received: from AM0PR83CU005.outbound.protection.outlook.com
 (mail-westeuropeazlp170100000.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:c201::])
 by smtp3.osuosl.org (Postfix) with ESMTPS id F3FA1614A2
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:32 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=yKUVhZPoQuGe33/n9D4ZIMncS5WrBMDNdPc9IOq7LZZ85bIs1s9JcvZ63rdxYLa+k+BHH6ph4bQXwR/mSnp3sT6zo9QE6emwmtR5/JrniQsS2DgIEI+6JjSfwGbYVRD3jJQPgHe/W4up3nwYqMWHsHnxBSxAz5lhRTHoPnxdEPJW3ZMEKO/mcBpHtEL+mtcRrnbIzl1v58aZrujiuccSek60OuqlN5N0uRtV+5rhCFxl2LWBnAhUUphSFxEq0FplBkMoWdBPb6CltETgcE1HlXf61QE6Ay1YlXThAm/8bha82Z8P8cFUTYjxEIE1hWuWEQroPveH/2ULNW0hkcMRrg==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Zb4WAGeLZBFBAHqu0RZepig4qoi3yBTWSTokCELQmNc=;
 b=sPGqXRSfgTcxDLZboI38IfnHVA2Hvt7WkHrcuxAu3OcNH6jU/zKbK40B/gHbj8s97ZCH2pCJsMkwjdXa8sGYR+2gqWBVOxFySKXnXYyAXm/5AXk5WovqxSbe4eTVVen9ICNcp0Kq/IPZpHstc3C2L9VTpJThITd+moOCTjt6f2o7EOdWKMZ52pUF0POZynl/PMr4MHcIup3Orrxoy04E+RBHv9a5WQ4JJXXUjkSDksa+veGpL6CXxp5Sck/RzdV3JyrgtjYa4JKPwzvynVeGZorkhlaKanjnf7Kmp6/VvvoP1TtN4yRUC4Nb0IVHXg1gxHCFpuVNWRnkoM4kbyy6fQ==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Zb4WAGeLZBFBAHqu0RZepig4qoi3yBTWSTokCELQmNc=;
 b=pzMCOajVKo01FUep4ZSAJrMDO6BAXu8CPogW0jf5zxpAPdj6XZGZ7zS3w4P3roTmbT+3tbFxSqoCOv86B+K2ODP+HVVn0SFYym/OOUv7IQkqnoXO69O5L697O24YbDN9LY3eEOew3Rz9E0eO6uq6WBy7AqB1Ltb0U4hFle2hYZoEEhqa6ooVCE0Bo9wFrKGFuLYHNeZCmE3xnanycNK+0ONFi47tN4g5d4wPEb8HRLuHbXKDIhvxuanb0y/hP1L9jQRMcyhnr8Wv8JS24Jj8L7worGRph8PYDWYxilwyXZELp0pEj8pu6rpFGKo96iR5C0T6KggzRMKtuzrl6xg8cQ==
Received: from AS9PR06CA0507.eurprd06.prod.outlook.com (2603:10a6:20b:49b::33)
 by DU0PR10MB7408.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:443::17)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.13; Wed, 18 Dec
 2024 10:25:30 +0000
Received: from AMS0EPF0000019D.eurprd05.prod.outlook.com
 (2603:10a6:20b:49b:cafe::ef) by AS9PR06CA0507.outlook.office365.com
 (2603:10a6:20b:49b::33) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8251.22 via Frontend Transport; Wed,
 18 Dec 2024 10:25:30 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 AMS0EPF0000019D.mail.protection.outlook.com (10.167.16.249) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8251.15 via Frontend Transport; Wed, 18 Dec 2024 10:25:29 +0000
Received: from EUR05-DB8-obe.outbound.protection.outlook.com (104.47.17.111)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Wed, 18 Dec 2024 10:25:29
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 7370065
X-ExclaimerImprintLatency: 5876987
X-ExclaimerImprintAction: 6097c4b007e544c4b10225f65b1a1a81
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=XAPlqT7aIWQYFViRYQW6FHLkUrLeP+VzroTSgUA6hAKV4L7qdDz64nvwDlJic1jDw0Hbo/FCGkbvstGNwr0MRXoNh1d/Jk5XwyHkHPV4ajmZaxTGQfBqOhBOZl13iYhGE5o2TPQjr9QcaHK0KkH6QCWbdG/9ID4DGOwZ6hu2DG6fxBwzye3tuIYyQSlNCo0ms2WVG8xhyeA+8be34Ur3O/n6lGWh30OeEKjl/kE8FPsqFlj9b2NCxrXU/czAK4Se2zJy3bbxkcci4xTrPDVDL/JiLhN2ipb9wT/z3CefLA97qIxO6/h5k20AU5ZMvV9fDSRVYhZgPsE6vpXSAFr8LA==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=Zb4WAGeLZBFBAHqu0RZepig4qoi3yBTWSTokCELQmNc=;
 b=QwKWQjd/Nfi7XMgtdtmnEe6RBcdpDhay17HN29jcOYZRGP6tqx8XlwSV6DXYbKtFMCKZIjf0SnAKe/0KRoaXTn2cwOLS8AUcOnYv9kiCBjf38Y8CptO6LbQQeU6PW3f5g8oHvck6+PjSVlk1X8XG/DbZAJoANGpa+xwqctZXdUUWVmfoL2dpMOqhovvF3xF9OMvvUSfab3cd7zNZjSWmHMZqDL/Jchyx5H5G9R+hSWqRMyp6e1wulqmm45JQEWb/FsSWF1PPPBKiPu43NNKwxR9HdWeAJ7IHDWZ9V5eYQ7f28YCVFLDoNikFt3t+oQ4V1gkBAbhHVDpFjMEn+jFZlg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=Zb4WAGeLZBFBAHqu0RZepig4qoi3yBTWSTokCELQmNc=;
 b=pzMCOajVKo01FUep4ZSAJrMDO6BAXu8CPogW0jf5zxpAPdj6XZGZ7zS3w4P3roTmbT+3tbFxSqoCOv86B+K2ODP+HVVn0SFYym/OOUv7IQkqnoXO69O5L697O24YbDN9LY3eEOew3Rz9E0eO6uq6WBy7AqB1Ltb0U4hFle2hYZoEEhqa6ooVCE0Bo9wFrKGFuLYHNeZCmE3xnanycNK+0ONFi47tN4g5d4wPEb8HRLuHbXKDIhvxuanb0y/hP1L9jQRMcyhnr8Wv8JS24Jj8L7worGRph8PYDWYxilwyXZELp0pEj8pu6rpFGKo96iR5C0T6KggzRMKtuzrl6xg8cQ==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU4PR10MB9191.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:568::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:25:03 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8272.005; Wed, 18 Dec 2024
 10:25:03 +0000
Date: Wed, 18 Dec 2024 11:25:01 +0100
To: dev@openvswitch.org
Message-ID: 
 <8de407d64b259a2f6010cc7714757c52946e37db.1734513750.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1734513749.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1734513749.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0111.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::14) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU4PR10MB9191:EE_|AMS0EPF0000019D:EE_|DU0PR10MB7408:EE_
X-MS-Office365-Filtering-Correlation-Id: fa74eca3-7d29-4f24-ff20-08dd1f4e4bd9
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info-Original: 
 U6nvW1x4UMFRN/GTSHtSV+c0uvhl+D20LTxTrXbMjllhMBjzINqx/pfSnqIt1zyeOm7PbrOnQ5Of3dCYsLAnJhODVrkWC6JgNfA+ECeVcxBmGcVO2Ww7LkoC3GYw8nn/50kf3mmmS3IrBFQcKc78h+H2kL1j93gqqR/+smZ4flggw5ldvpPfDsjeoxvs3hL+dFsGKknD/+P+ollVkZkN4g86AW+kijSNIaJJivnXcV/opdO3+Mb4Al0C+VVGKdr6QzVH+3zLN0jxUKFxsf1d036KaIDv55v8NRxX2VYHHQVYAJlrM+VWSNkPd8l1yxOBoBUjg1+P07STWsbJKJjP6lQo1Ki8GbApyaamn2HUNO2oCdzPcy5IIhlcuZUJucAT8hfV+JnEg8LVA6h85tWg9L82dIjOK8hRNpYynV30a2aviSjGsf2Xp7WA+Yp0JNOPv0l2MhgxyxjQEwST/728JALEhfAQesX30nZcW0QvC5Vt+pRQ6Ho4evw81ZXgl7ymrhqCoCALSUy7M/LEmOc1XjCPD4EwGptkwpUccfF6dKtS2BEbDvXbTbksIsFytZa5ZpYAyCakFlUJZMI5Jyvjoj/hANVx8JNTmZeXz4nZsDDsU/CJutlUdJbZFcTcJqH8HXT9LW4jLdd9sgfAdwm/r7Gjzrx7jNVOCHmBO+tGJopYW9Wcjl8LlA66D72v7B7NHhvkvpeYcFVbl4gLH0aRwseP8i3FLROWLp0GHx/hqTWZlL3a2ZGxSAtJJJPaMe7kBLplWtm7IJ4Ar6aBK8qEg1T6/bjzEiV3Uz1vQXh0hJ5h7W7Zvl73vHkXXT7dpZXVDtpsAX5bhIroLLmaq/Zji1G+e/zfdB8rY4k384Q/oBfGRblmnrGl+03R81a2BqUoJS64Hmsz0nTbEEhal2r/VTGl3zhwnip9ZxaFye/nIum4w8KZqiRmPMoM4ZAnFcftfq+pNiDXpR88UpC0ux5Kyq+Xp+3q1E3CE4dPgr7BgiwrxslOfeVfHOc/kfK2Y3WPIxaaBzD2hvJUiXJu8ugInstxYcFBcrok3yfEPinDyxMSOP2Wq1PB6dtG76PMXq4gcDoeLRwoc5tJ3d/3n4WdzaoSll82vlCj1dxQ4MVVuWqCGflCN+fZyeunz48GhzGD14HBP7FAm6d3nVpd8svHvuJTIpWSl1hgaFfhU8kHkoHZ0nBJr0+MTC/LcUlNGLlTb/RiLRJiqpL7BVHqRcJlnaTaoWsQhA0eCbe07Ct8RTdPzzSojoE5WAWOTJlICJsqlDXMru2AvogxAdifFbZcb5WXrveptHaZnz0iyKZY0FLJ5oDKFPD6qncTb8vWIlQt5r/fggTJKdVg+sAfKlDWYjxjY3f9kRQ8UdlITEC5sfEQIfjnUY0YHpX6rnNt6xDV
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(376014)(366016)(1800799024); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU4PR10MB9191
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 AMS0EPF0000019D.eurprd05.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 7721be9b-4326-4dab-a611-08dd1f4e3bea
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|14060799003|1800799024|376014|36860700013|35042699022|82310400026;
X-Microsoft-Antispam-Message-Info: 
 /jujgXIILTMhb8CVn4P6tAlMoKqt6wBoGYlwwDsu2pmvtv7GTk2gN+qPY9bHXu/17VEdIxATkD8do/x4gwbAX2rzeEDTUS+/1ZCKYWCyqVd+jWebv3kRH6vnvECX8Hyq7DgwZfsaSsTTqVnKft4LWsPf4+AjMCSdRbkoZZWASsrZkZ10/TT62mSvb2kSQqwiLGlPsO+k3Nq9va2Kv4+mFewEmyhNRF4dLD2Bg0CshCLGlKeaZLoniZkrr/Smfj5tYVSR3bFbaYYECsJ1tvMEce1d0Rgqx3dm5Ep76BBVRwuAs+Cfkq/vZWZE5wkPxPedhmBTmnAuW8KfjAWquA3Vwu08SMjPbdQzfGg1QdR3ichjgz2aOkJ/4Y0YNRMzUSpITlCQGGAQOUluBTkDAbx6wGEHc8eCE0opxar3R0gGKsBI6S85Ni78A+bAFGl1TN0O2a0brQLQNGWZ8ijFPEcmWZxesRmpgNTg0W8dHtcqdTS4vxpwTolsQ2opZIGo/TpyRJ2ixvhg/3G+hCWMgY9SDGyvpQsy3IHVJEhQ7ooTDtERwAgTOJxrB4WZMeQrhTWA27smRCc6GdLliVlNNVEyteg0F/8G+6cY0eXPThXHZ2GlYm+vuki2JMdfgUYEa4SngkPEI/fWPNGTSDMy49suR1u+9GkJ2QZKE4AjSN4xdXk4YiMFDr49HsMZ4DTUillJhf+Cr3sFsVgLhOpasN+SFuX6JIfk0L+41COVjrpJ1w3gIZu4E2ZkSPhAPNAVdA/X9TWqFIbz/wb2hYvz6P8SEz23UhnxWjukpecWbEI/d87WhBzVukpUXbU9J+w79tLYyKdUhTBRgyHcypq6STMNng5lW5Dlhf3FmbqBmPDnRgIzO+YkI1fSsQ4Y+FC0zXmXLu+oPnnn6mu5oHnG6V79TqK8GTsPi0T/djpSqkuRb01Ekwt+LnckcfXhbeiST9388Hmc8h+6/g4tnHBBUpNbkKn55WbvdgWB4LUTlfsZTRMi0cHbijZsT/J6+HaECKghjFzjL0IXwsu4CICkhJvnnNWtIkYelnheKM2TD3QOq1S2OSp8+3I2jFpBc2MIvJ5yvL0AZ+rFtBar+oBrnUXy01QZ58t0JrIetzetwpdSuF7c8VRKmYFRM58aZJzPv5BuZNrLv0esBE/Wab8WvDl3d4qAQmBWL4EIbDQ0biOZ++pSY2y+sZMCz5mfiSDN/+EQRHXi8wJS4DgJbw1JkYcftB56I6hFBP7zvq7TruoiYXBM65uAmHmsu2/0Bgfza4LxYlmF3VCUfVw2w9UCP61Kr7mJ15rBQeQ6fIxXXAxShg1sxpC/wG+97Q918mNcf+eZKeGkgENepIUwNiWr1Sv92biLyqvBgdOVY4raN3xDLZQYwxV+9//Mb5/IhzwFpI53TyjyMjTgH3wHaY7ZXUUJy53AIokBHnSa28rCBPtPbNM3AWmltiygPaA1akfSlLWQ27CsXXoxCYuVXZ02GjX7JVH5JA+0P/SRgDd9+pYXJhc=
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(14060799003)(1800799024)(376014)(36860700013)(35042699022)(82310400026);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Dec 2024 10:25:29.0872 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 fa74eca3-7d29-4f24-ff20-08dd1f4e4bd9
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 AMS0EPF0000019D.eurprd05.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU0PR10MB7408
Subject: [ovs-dev] [PATCH ovn v2 5/6] northd: Allow announcing individual
 host routes.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

sometimes we want to use individual host routes instead of the connected
routes of LRPs.
This allows the network fabric to know which adresses are actually in
use and e.g. drop traffic to adresses that are not used anyway.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 NEWS                              |   2 +
 northd/en-advertised-route-sync.c | 270 +++++++++++++++++++++++++++---
 northd/en-advertised-route-sync.h |  16 ++
 northd/inc-proc-northd.c          |   4 +
 northd/northd.c                   |  32 ++--
 northd/northd.h                   |  25 ++-
 ovn-nb.xml                        |  27 +++
 tests/ovn-northd.at               |  71 ++++++++
 8 files changed, 402 insertions(+), 45 deletions(-)

diff --git a/northd/en-advertised-route-sync.c b/northd/en-advertised-route-sync.c
index 33097ed72..065c73861 100644
--- a/northd/en-advertised-route-sync.c
+++ b/northd/en-advertised-route-sync.c
@@ -13,6 +13,7 @@
  */
 
 #include <config.h>
+#include <stdbool.h>
 
 #include "openvswitch/vlog.h"
 #include "smap.h"
@@ -20,6 +21,7 @@
 #include "northd.h"
 
 #include "en-advertised-route-sync.h"
+#include "en-lr-stateful.h"
 #include "lib/stopwatch-names.h"
 #include "openvswitch/hmap.h"
 #include "ovn-util.h"
@@ -30,34 +32,129 @@ static void
 advertised_route_table_sync(
     struct ovsdb_idl_txn *ovnsb_txn,
     const struct sbrec_advertised_route_table *sbrec_advertised_route_table,
-    const struct hmap *parsed_routes);
+    const struct lr_stateful_table *lr_stateful_table,
+    const struct hmap *parsed_routes,
+    struct advertised_route_sync_tracked_data *trk_data);
+
+bool
+advertised_route_sync_lr_stateful_change_handler(struct engine_node *node,
+                                                 void *data_)
+{
+    /* We only actually use lr_stateful data if we expose individual host
+     * routes. In this case we for now just recompute.
+     * */
+    struct ed_type_lr_stateful *lr_stateful_data =
+        engine_get_input_data("lr_stateful", node);
+    struct advertised_route_sync_data *data = data_;
+
+    struct hmapx_node *hmapx_node;
+    const struct lr_stateful_record *lr_stateful_rec;
+    HMAPX_FOR_EACH (hmapx_node, &lr_stateful_data->trk_data.crupdated) {
+        lr_stateful_rec = hmapx_node->data;
+        if (uuidset_contains(&data->trk_data.nb_lr_stateful,
+                             &lr_stateful_rec->nbr_uuid)) {
+            return false;
+        }
+    }
+
+    return true;
+}
+
+bool
+advertised_route_sync_northd_change_handler(struct engine_node *node,
+                                            void *data_)
+{
+    struct advertised_route_sync_data *data = data_;
+    struct northd_data *northd_data = engine_get_input_data("northd", node);
+    if (!northd_has_tracked_data(&northd_data->trk_data)) {
+        return false;
+    }
+
+    /* This node uses the below data from the en_northd engine node.
+     * See (lr_stateful_get_input_data())
+     *   1. Indirectly  northd_data->ls_ports if we announce host routes
+     *      This is what we check below
+     */
+
+    struct hmapx_node *hmapx_node;
+    const struct ovn_port *op;
+    HMAPX_FOR_EACH (hmapx_node, &northd_data->trk_data.trk_lsps.created) {
+        op = hmapx_node->data;
+        if (uuidset_contains(&data->trk_data.nb_ls,
+                             &op->od->nbs->header_.uuid)) {
+            return false;
+        }
+    }
+    HMAPX_FOR_EACH (hmapx_node, &northd_data->trk_data.trk_lsps.updated) {
+        op = hmapx_node->data;
+        if (uuidset_contains(&data->trk_data.nb_ls,
+                             &op->od->nbs->header_.uuid)) {
+            return false;
+        }
+    }
+    HMAPX_FOR_EACH (hmapx_node, &northd_data->trk_data.trk_lsps.deleted) {
+        op = hmapx_node->data;
+        if (uuidset_contains(&data->trk_data.nb_ls,
+                             &op->od->nbs->header_.uuid)) {
+            return false;
+        }
+    }
+
+    return true;
+}
+
+static void
+routes_sync_init(struct advertised_route_sync_data *data)
+{
+    uuidset_init(&data->trk_data.nb_lr_stateful);
+    uuidset_init(&data->trk_data.nb_ls);
+}
+
+static void
+routes_sync_destroy(struct advertised_route_sync_data *data)
+{
+    uuidset_destroy(&data->trk_data.nb_lr_stateful);
+    uuidset_destroy(&data->trk_data.nb_ls);
+}
+
 
 void
 *en_advertised_route_sync_init(struct engine_node *node OVS_UNUSED,
                      struct engine_arg *arg OVS_UNUSED)
 {
-    return NULL;
+    struct advertised_route_sync_data *data = xzalloc(sizeof *data);
+    routes_sync_init(data);
+    return data;
 }
 
 void
 en_advertised_route_sync_cleanup(void *data OVS_UNUSED)
 {
+    routes_sync_destroy(data);
 }
 
 void
 en_advertised_route_sync_run(struct engine_node *node, void *data OVS_UNUSED)
 {
+    routes_sync_destroy(data);
+    routes_sync_init(data);
+
+    struct advertised_route_sync_data *routes_sync_data = data;
     struct routes_data *routes_data
         = engine_get_input_data("routes", node);
     const struct engine_context *eng_ctx = engine_get_context();
     const struct sbrec_advertised_route_table *sbrec_advertised_route_table =
         EN_OVSDB_GET(engine_get_input("SB_advertised_route", node));
+    struct ed_type_lr_stateful *lr_stateful_data =
+        engine_get_input_data("lr_stateful", node);
 
     stopwatch_start(ADVERTISED_ROUTE_SYNC_RUN_STOPWATCH_NAME, time_msec());
 
     advertised_route_table_sync(eng_ctx->ovnsb_idl_txn,
                       sbrec_advertised_route_table,
-                      &routes_data->parsed_routes);
+                      &lr_stateful_data->table,
+                      &routes_data->parsed_routes,
+                      &routes_sync_data->trk_data);
 
     stopwatch_stop(ADVERTISED_ROUTE_SYNC_RUN_STOPWATCH_NAME, time_msec());
     engine_set_node_state(node, EN_UPDATED);
@@ -71,6 +168,7 @@ struct ar_entry {
 
     const struct sbrec_port_binding *logical_port;
     char *ip_prefix;
+    const struct sbrec_port_binding *tracked_port;
     bool stale;
 };
 
@@ -78,13 +176,17 @@ static struct ar_entry *
 ar_alloc_entry(struct hmap *routes,
                   const struct sbrec_datapath_binding *sb_db,
                   const struct sbrec_port_binding *logical_port,
-                  const char *ip_prefix)
+                  const char *ip_prefix,
+                  const struct sbrec_port_binding *tracked_port)
 {
     struct ar_entry *route_e = xzalloc(sizeof *route_e);
 
     route_e->sb_db = sb_db;
     route_e->logical_port = logical_port;
     route_e->ip_prefix = xstrdup(ip_prefix);
+    if (tracked_port) {
+        route_e->tracked_port = tracked_port;
+    }
     route_e->stale = false;
     uint32_t hash = uuid_hash(&sb_db->header_.uuid);
     hash = hash_string(logical_port->logical_port, hash);
@@ -98,7 +200,8 @@ static struct ar_entry *
 ar_lookup_or_add(struct hmap *route_map,
                     const struct sbrec_datapath_binding *sb_db,
                     const struct sbrec_port_binding *logical_port,
-                    const char *ip_prefix)
+                    const char *ip_prefix,
+                    const struct sbrec_port_binding *tracked_port)
 {
     struct ar_entry *route_e;
     uint32_t hash;
@@ -121,11 +224,50 @@ ar_lookup_or_add(struct hmap *route_map,
             continue;
         }
 
+        if (!tracked_port != !route_e->tracked_port) {
+            continue;
+        }
+
+        if (tracked_port && !uuid_equals(
+                &tracked_port->header_.uuid,
+                &route_e->tracked_port->header_.uuid)) {
+            continue;
+        }
+
         return route_e;
     }
 
     route_e = ar_alloc_entry(route_map, sb_db,
-                             logical_port, ip_prefix);
+                             logical_port, ip_prefix, tracked_port);
+    return route_e;
+}
+
+static struct ar_entry *
+ar_sync_to_sb(struct ovsdb_idl_txn *ovnsb_txn, struct hmap *route_map,
+                 const struct sbrec_datapath_binding *sb_db,
+                 const struct sbrec_port_binding *logical_port,
+                 const char *ip_prefix,
+                 const struct sbrec_port_binding *tracked_port)
+{
+    struct ar_entry *route_e = ar_lookup_or_add(route_map,
+                                                sb_db,
+                                                logical_port,
+                                                ip_prefix,
+                                                tracked_port);
+    route_e->stale = false;
+
+    if (!route_e->sb_route) {
+        const struct sbrec_advertised_route *sr =
+            sbrec_advertised_route_insert(ovnsb_txn);
+        sbrec_advertised_route_set_datapath(sr, route_e->sb_db);
+        sbrec_advertised_route_set_logical_port(sr, route_e->logical_port);
+        sbrec_advertised_route_set_ip_prefix(sr, route_e->ip_prefix);
+        if (route_e->tracked_port) {
+            sbrec_advertised_route_set_tracked_port(sr, route_e->tracked_port);
+        }
+        route_e->sb_route = sr;
+    }
+
     return route_e;
 }
 
@@ -143,11 +285,91 @@ get_nbrp_or_nbr_option(const struct ovn_port *op, const char *key)
         smap_get_bool(&op->od->nbr->options, key, false));
 }
 
+static void
+publish_lport_addresses(struct ovsdb_idl_txn *ovnsb_txn,
+                        struct hmap *route_map,
+                        const struct sbrec_datapath_binding *sb_db,
+                        const struct ovn_port *logical_port,
+                        struct lport_addresses *addresses,
+                        const struct ovn_port *tracking_port)
+{
+    for (int i = 0; i < addresses->n_ipv4_addrs; i++) {
+        const struct ipv4_netaddr *addr = &addresses->ipv4_addrs[i];
+        char *addr_s = xasprintf("%s/32", addr->addr_s);
+        ar_sync_to_sb(ovnsb_txn, route_map,
+                         sb_db,
+                         logical_port->sb,
+                         addr_s,
+                         tracking_port->sb);
+        free(addr_s);
+    }
+    for (int i = 0; i < addresses->n_ipv6_addrs; i++) {
+        if (in6_is_lla(&addresses->ipv6_addrs[i].network)) {
+            continue;
+        }
+        const struct ipv6_netaddr *addr = &addresses->ipv6_addrs[i];
+        char *addr_s = xasprintf("%s/128", addr->addr_s);
+        ar_sync_to_sb(ovnsb_txn, route_map,
+                         sb_db,
+                         logical_port->sb,
+                         addr_s,
+                         tracking_port->sb);
+        free(addr_s);
+    }
+}
+
+
+static void
+publish_host_routes(struct ovsdb_idl_txn *ovnsb_txn,
+                    struct hmap *route_map,
+                    const struct lr_stateful_table *lr_stateful_table,
+                    const struct parsed_route *route,
+                    struct advertised_route_sync_tracked_data *trk_data)
+{
+    struct ovn_port *port;
+    struct ovn_datapath *lsp_od = route->out_port->peer->od;
+    uuidset_insert(&trk_data->nb_ls, &lsp_od->nbs->header_.uuid);
+    HMAP_FOR_EACH (port, dp_node, &lsp_od->ports) {
+        if (port->peer) {
+            /* This is a LSP connected to an LRP */
+            struct lport_addresses *addresses = &port->peer->lrp_networks;
+            publish_lport_addresses(ovnsb_txn, route_map, route->od->sb,
+                                    route->out_port,
+                                    addresses, port->peer);
+
+            const struct lr_stateful_record *lr_stateful_rec;
+            lr_stateful_rec = lr_stateful_table_find_by_index(
+                lr_stateful_table, port->peer->od->index);
+            uuidset_insert(&trk_data->nb_lr_stateful,
+                           &lr_stateful_rec->nbr_uuid);
+            struct ovn_port_routable_addresses addrs = get_op_addresses(
+                port->peer, lr_stateful_rec, false);
+            for (int i = 0; i < addrs.n_addrs; i++) {
+                publish_lport_addresses(ovnsb_txn, route_map, route->od->sb,
+                                        route->out_port,
+                                        &addrs.laddrs[i],
+                                        port->peer);
+            }
+            destroy_routable_addresses(&addrs);
+        } else {
+            /* This is just a plain LSP */
+            for (int i = 0; i < port->n_lsp_addrs; i++) {
+                publish_lport_addresses(ovnsb_txn, route_map, route->od->sb,
+                                        route->out_port,
+                                        &port->lsp_addrs[i],
+                                        port);
+            }
+        }
+    }
+}
+
 static void
 advertised_route_table_sync(
     struct ovsdb_idl_txn *ovnsb_txn,
     const struct sbrec_advertised_route_table *sbrec_advertised_route_table,
-    const struct hmap *parsed_routes)
+    const struct lr_stateful_table *lr_stateful_table,
+    const struct hmap *parsed_routes,
+    struct advertised_route_sync_tracked_data *trk_data)
 {
     if (!ovnsb_txn) {
         return;
@@ -164,7 +386,8 @@ advertised_route_table_sync(
         route_e = ar_alloc_entry(&sync_routes,
                                     sb_route->datapath,
                                     sb_route->logical_port,
-                                    sb_route->ip_prefix);
+                                    sb_route->ip_prefix,
+                                    sb_route->tracked_port);
         route_e->stale = true;
         route_e->sb_route = sb_route;
     }
@@ -180,10 +403,18 @@ advertised_route_table_sync(
                            false)) {
             continue;
         }
-        if (route->source == ROUTE_SOURCE_CONNECTED &&
-                !get_nbrp_or_nbr_option(route->out_port,
+        if (route->source == ROUTE_SOURCE_CONNECTED) {
+            if (!get_nbrp_or_nbr_option(route->out_port,
                                         "dynamic-routing-connected")) {
-            continue;
+                continue;
+            }
+            if (smap_get_bool(&route->out_port->nbrp->options,
+                              "dynamic-routing-connected-as-host-routes",
+                              false)) {
+                publish_host_routes(ovnsb_txn, &sync_routes,
+                                    lr_stateful_table, route, trk_data);
+                continue;
+            }
         }
         if (route->source == ROUTE_SOURCE_STATIC &&
                 !get_nbrp_or_nbr_option(route->out_port,
@@ -193,18 +424,11 @@ advertised_route_table_sync(
 
         char *ip_prefix = normalize_v46_prefix(&route->prefix,
                                                route->plen);
-        route_e = ar_lookup_or_add(&sync_routes, route->od->sb,
-                                   route->out_port->sb, ip_prefix);
-        route_e->stale = false;
-
-        if (!route_e->sb_route) {
-            const struct sbrec_advertised_route *sr =
-                sbrec_advertised_route_insert(ovnsb_txn);
-            sbrec_advertised_route_set_datapath(sr, route_e->sb_db);
-            sbrec_advertised_route_set_logical_port(sr, route_e->logical_port);
-            sbrec_advertised_route_set_ip_prefix(sr, route_e->ip_prefix);
-            route_e->sb_route = sr;
-        }
+        ar_sync_to_sb(ovnsb_txn, &sync_routes,
+                         route->od->sb,
+                         route->out_port->sb,
+                         ip_prefix,
+                         NULL);
 
         free(ip_prefix);
     }
diff --git a/northd/en-advertised-route-sync.h b/northd/en-advertised-route-sync.h
index c6a41c713..8206d7e27 100644
--- a/northd/en-advertised-route-sync.h
+++ b/northd/en-advertised-route-sync.h
@@ -15,10 +15,26 @@
 #define EN_ADVERTISED_ROUTE_SYNC_H 1
 
 #include "lib/inc-proc-eng.h"
+#include "lib/uuidset.h"
+
+struct advertised_route_sync_tracked_data {
+  /* Contains the uuids of all NB Logical Routers where we used a
+   * lr_stateful_record during computation. */
+  struct uuidset nb_lr_stateful;
+  /* Contains the uuids of all NB Logical Switches where we rely on port
+   * port changes for host routes. */
+  struct uuidset nb_ls;
+};
 
 struct advertised_route_sync_data {
+    /* Node's tracked data. */
+    struct advertised_route_sync_tracked_data trk_data;
 };
 
+bool advertised_route_sync_lr_stateful_change_handler(struct engine_node *node,
+                                                      void *data);
+bool advertised_route_sync_northd_change_handler(struct engine_node *node,
+                                       void *data);
 void *en_advertised_route_sync_init(struct engine_node *, struct engine_arg *);
 void en_advertised_route_sync_cleanup(void *data);
 void en_advertised_route_sync_run(struct engine_node *, void *data);
diff --git a/northd/inc-proc-northd.c b/northd/inc-proc-northd.c
index ed9e27de9..ab500a86a 100644
--- a/northd/inc-proc-northd.c
+++ b/northd/inc-proc-northd.c
@@ -272,6 +272,10 @@ void inc_proc_northd_init(struct ovsdb_idl_loop *nb,
     engine_add_input(&en_advertised_route_sync, &en_routes, NULL);
     engine_add_input(&en_advertised_route_sync, &en_sb_advertised_route,
                      engine_noop_handler);
+    engine_add_input(&en_advertised_route_sync, &en_lr_stateful,
+                     advertised_route_sync_lr_stateful_change_handler);
+    engine_add_input(&en_advertised_route_sync, &en_northd,
+                     advertised_route_sync_northd_change_handler);
 
     engine_add_input(&en_learned_route_sync, &en_routes, NULL);
     engine_add_input(&en_learned_route_sync, &en_sb_learned_route, NULL);
diff --git a/northd/northd.c b/northd/northd.c
index 75519e734..c6344b48a 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -1096,19 +1096,6 @@ build_datapaths(struct ovsdb_idl_txn *ovnsb_txn,
     ods_build_array_index(lr_datapaths);
 }
 
-/* Structure representing logical router port
- * routable addresses. This includes DNAT and Load Balancer
- * addresses. This structure will only be filled in if the
- * router port is a gateway router port. Otherwise, all pointers
- * will be NULL and n_addrs will be 0.
- */
-struct ovn_port_routable_addresses {
-    /* The parsed routable addresses */
-    struct lport_addresses *laddrs;
-    /* Number of items in the laddrs array */
-    size_t n_addrs;
-};
-
 static bool lsp_can_be_inc_processed(const struct nbrec_logical_switch_port *);
 
 /* This function returns true if 'op' is a gateway router port.
@@ -1143,7 +1130,7 @@ is_cr_port(const struct ovn_port *op)
     return op->primary_port;
 }
 
-static void
+void
 destroy_routable_addresses(struct ovn_port_routable_addresses *ra)
 {
     for (size_t i = 0; i < ra->n_addrs; i++) {
@@ -1156,12 +1143,14 @@ static char **get_nat_addresses(const struct ovn_port *op, size_t *n,
                                 bool routable_only, bool include_lb_ips,
                                 const struct lr_stateful_record *);
 
-static struct ovn_port_routable_addresses
-get_op_routable_addresses(struct ovn_port *op,
-                          const struct lr_stateful_record *lr_stateful_rec)
+struct ovn_port_routable_addresses
+get_op_addresses(struct ovn_port *op,
+                 const struct lr_stateful_record *lr_stateful_rec,
+                 bool routable_only)
 {
     size_t n;
-    char **nats = get_nat_addresses(op, &n, true, true, lr_stateful_rec);
+    char **nats = get_nat_addresses(op, &n, routable_only, true,
+                                    lr_stateful_rec);
 
     if (!nats) {
         return (struct ovn_port_routable_addresses) {
@@ -1194,6 +1183,13 @@ get_op_routable_addresses(struct ovn_port *op,
     };
 }
 
+static struct ovn_port_routable_addresses
+get_op_routable_addresses(struct ovn_port *op,
+                          const struct lr_stateful_record *lr_stateful_rec)
+{
+    return get_op_addresses(op, lr_stateful_rec, true);
+}
+
 
 static void
 ovn_port_set_nb(struct ovn_port *op,
diff --git a/northd/northd.h b/northd/northd.h
index 9b80f422d..3bc6f6f04 100644
--- a/northd/northd.h
+++ b/northd/northd.h
@@ -25,6 +25,7 @@
 #include "openvswitch/hmap.h"
 #include "simap.h"
 #include "ovs-thread.h"
+#include "en-lr-stateful.h"
 
 struct northd_input {
     /* Northbound table references */
@@ -185,10 +186,6 @@ struct routes_data {
     struct hmap bfd_active_connections;
 };
 
-struct routes_sync_data {
-    struct hmap parsed_routes;
-};
-
 struct route_policies_data {
     struct hmap route_policies;
     struct hmap bfd_active_connections;
@@ -938,4 +935,24 @@ ovn_port_find_bound(const struct hmap *ports, const char *name)
     return ovn_port_find__(ports, name, true);
 }
 
+/* Structure representing logical router port
+ * routable addresses. This includes DNAT and Load Balancer
+ * addresses. This structure will only be filled in if the
+ * router port is a gateway router port. Otherwise, all pointers
+ * will be NULL and n_addrs will be 0.
+ */
+struct ovn_port_routable_addresses {
+    /* The parsed routable addresses */
+    struct lport_addresses *laddrs;
+    /* Number of items in the laddrs array */
+    size_t n_addrs;
+};
+
+struct ovn_port_routable_addresses get_op_addresses(
+    struct ovn_port *op,
+    const struct lr_stateful_record *lr_stateful_rec,
+    bool routable_only);
+
+void destroy_routable_addresses(struct ovn_port_routable_addresses *ra);
+
 #endif /* NORTHD_H */
diff --git a/ovn-nb.xml b/ovn-nb.xml
index fb178cbed..eb7ee72df 100644
--- a/ovn-nb.xml
+++ b/ovn-nb.xml
@@ -3749,6 +3749,33 @@ or
         key="dynamic-routing-static" table="Logical_Router_Port"/> will be
         used.
       </column>
+      <column name="options" key="dynamic-routing-connected-as-host-routes"
+              type='{"type": "boolean"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> on the respective Logical_Router is set
+        to <code>true</code> and also
+        <ref column="options" key="dynamic-routing-connected"/> is enabled on
+        the LR or LRP.
+
+        In this case the prefix connected to the LRP is not advertised as a
+        whole. Rather each individual IP address that is actually in use inside
+        this prefix is announced as a host route.
+
+        This can be used to:
+        <ul>
+          <li>
+            allow the fabric outside of OVN to drop traffic towards IP
+            addresses that are not actually used. This traffic would otherwise
+            hit this LR and then be dropped.
+          </li>
+
+          <li>
+            If this LR has multiple LRPs connected to the fabric on different
+            chassis: allows the fabric outside of OVN to steer packets to the
+            chassis which already hosts this backing ip address.
+          </li>
+        </ul>
+      </column>
     </group>
 
     <group title="Attachment">
diff --git a/tests/ovn-northd.at b/tests/ovn-northd.at
index 1dd2613c3..b7a5acd72 100644
--- a/tests/ovn-northd.at
+++ b/tests/ovn-northd.at
@@ -14607,3 +14607,74 @@ AT_CHECK([grep -w "lr_in_ip_routing" lr0flows | ovn_strip_lflows], [0], [dnl
 AT_CLEANUP
 ])
 
+OVN_FOR_EACH_NORTHD_NO_HV([
+AT_SETUP([dynamic-routing - host routes])
+AT_KEYWORDS([dynamic-routing])
+ovn_start
+
+# we start with announcing routes on a lr with 2 lrps
+# lr0-sw0 is connected to ls sw0
+check ovn-nbctl lr-add lr0
+check ovn-nbctl set Logical_Router lr0 option:dynamic-routing=true \
+                                 option:dynamic-routing-connected=true \
+                                 option:dynamic-routing-static=true
+check ovn-nbctl lrp-add lr0 lr0-sw0 00:00:00:00:ff:01 10.0.0.1/24
+sw0=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw0)
+check ovn-nbctl lrp-add lr0 lr0-sw1 00:00:00:00:ff:02 10.0.1.1/24
+sw1=$(ovn-sbctl --bare --columns _uuid list port_binding lr0-sw1)
+check ovn-nbctl ls-add sw0
+check ovn-nbctl lsp-add sw0 sw0-lr0
+check ovn-nbctl --wait=sb set Logical_Switch_Port sw0-lr0 type=router options:router-port=lr0-sw0
+check_row_count Advertised_Route 2 tracked_port='[[]]'
+datapath=$(ovn-sbctl --bare --columns _uuid list datapath_binding lr0)
+
+# configuring the LRP lr0-sw0 to send host routes
+# as sw0 is quite empty we will only see the addresses of lr0-sw0
+check ovn-nbctl --wait=sb set Logical_Router_Port lr0-sw0 options:dynamic-routing-connected-as-host-routes=true
+check_row_count Advertised_Route 2
+AT_CHECK_UNQUOTED([ovn-sbctl --columns ip_prefix,tracked_port --bare find Advertised_Route datapath=$datapath logical_port=$sw0], [0], [dnl
+10.0.0.1/32
+$sw0
+])
+
+# adding a VIF to the LS sw0 will advertise it as well
+check ovn-nbctl lsp-add sw0 sw0-vif0
+check ovn-nbctl --wait=sb lsp-set-addresses sw0-vif0 "00:aa:bb:cc:dd:ee 10.0.0.2"
+vif0=$(ovn-sbctl --bare --columns _uuid list port_binding sw0-vif0)
+check_row_count Advertised_Route 3
+check_row_count Advertised_Route 2 tracked_port!='[[]]'
+AT_CHECK_UNQUOTED([ovn-sbctl --columns tracked_port --bare find Advertised_Route datapath=$datapath logical_port=$sw0 ip_prefix=10.0.0.2/32], [0], [dnl
+$vif0
+])
+
+# adding a LR lr1 to the LS sw0 will advertise the LRP of the new router
+check ovn-nbctl lr-add lr1
+check ovn-nbctl lrp-add lr1 lr1-sw0 00:00:00:01:ff:01 10.0.0.10/24
+check ovn-nbctl lsp-add sw0 sw0-lr1
+lr1=$(ovn-sbctl --bare --columns _uuid list port_binding lr1-sw0)
+check ovn-nbctl --wait=sb set Logical_Switch_Port sw0-lr1 type=router options:router-port=lr1-sw0
+check_row_count Advertised_Route 4
+check_row_count Advertised_Route 3 tracked_port!='[[]]'
+AT_CHECK_UNQUOTED([ovn-sbctl --columns tracked_port --bare find Advertised_Route datapath=$datapath logical_port=$sw0 ip_prefix=10.0.0.10/32], [0], [dnl
+$lr1
+])
+
+# adding a NAT rule to lr1 will advertise it as well
+check ovn-nbctl --wait=sb lr-nat-add lr1 dnat_and_snat 10.0.0.100 192.168.0.1
+check_row_count Advertised_Route 5
+check_row_count Advertised_Route 4 tracked_port!='[[]]'
+AT_CHECK_UNQUOTED([ovn-sbctl --columns tracked_port --bare find Advertised_Route datapath=$datapath logical_port=$sw0 ip_prefix=10.0.0.100/32], [0], [dnl
+$lr1
+])
+
+# adding a static route to lr1 will be advertised just normally
+check ovn-nbctl --wait=sb lr-route-add lr0 172.16.0.0/24 10.0.0.200
+check_row_count Advertised_Route 6
+check_row_count Advertised_Route 4 tracked_port!='[[]]'
+AT_CHECK([ovn-sbctl --columns ip_prefix --bare find Advertised_Route datapath=$datapath logical_port=$sw0 ip_prefix=172.16.0.0/24], [0], [dnl
+172.16.0.0/24
+])
+
+AT_CLEANUP
+])
+

From patchwork Wed Dec 18 10:25:03 2024
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
X-Patchwork-Submitter: Felix Huettner <felix.huettner@stackit.cloud>
X-Patchwork-Id: 2024812
X-Patchwork-Delegate: dceara@redhat.com
Return-Path: <ovs-dev-bounces@openvswitch.org>
X-Original-To: incoming@patchwork.ozlabs.org
Delivered-To: patchwork-incoming@legolas.ozlabs.org
Authentication-Results: legolas.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key;
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=LXB23XWq;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=LXB23XWq;
	dkim-atps=neutral
Authentication-Results: legolas.ozlabs.org;
 spf=pass (sender SPF authorized) smtp.mailfrom=openvswitch.org
 (client-ip=2605:bc80:3010::136; helo=smtp3.osuosl.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=patchwork.ozlabs.org)
Received: from smtp3.osuosl.org (smtp3.osuosl.org [IPv6:2605:bc80:3010::136])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature ECDSA (secp384r1) server-digest SHA384)
	(No client certificate requested)
	by legolas.ozlabs.org (Postfix) with ESMTPS id 4YCqb60nYKz1yRt
	for <incoming@patchwork.ozlabs.org>; Wed, 18 Dec 2024 21:26:10 +1100 (AEDT)
Received: from localhost (localhost [127.0.0.1])
	by smtp3.osuosl.org (Postfix) with ESMTP id 9D02B6148A;
	Wed, 18 Dec 2024 10:26:08 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp3.osuosl.org ([127.0.0.1])
 by localhost (smtp3.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id xjq3nwqJlwAo; Wed, 18 Dec 2024 10:26:06 +0000 (UTC)
X-Comment: SPF check N/A for local connections - client-ip=140.211.9.56;
 helo=lists.linuxfoundation.org;
 envelope-from=ovs-dev-bounces@openvswitch.org; receiver=<UNKNOWN>
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp3.osuosl.org 816D3614B1
Authentication-Results: smtp3.osuosl.org;
	dkim=fail reason="signature verification failed" (2048-bit key,
 unprotected) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=LXB23XWq;
	dkim=fail reason="signature verification failed" (2048-bit key)
 header.d=stackit.cloud header.i=@stackit.cloud header.a=rsa-sha256
 header.s=selector1 header.b=LXB23XWq
Received: from lists.linuxfoundation.org (lf-lists.osuosl.org [140.211.9.56])
	by smtp3.osuosl.org (Postfix) with ESMTPS id 816D3614B1;
	Wed, 18 Dec 2024 10:26:05 +0000 (UTC)
Received: from lf-lists.osuosl.org (localhost [127.0.0.1])
	by lists.linuxfoundation.org (Postfix) with ESMTP id D5818C09C1;
	Wed, 18 Dec 2024 10:26:04 +0000 (UTC)
X-Original-To: dev@openvswitch.org
Delivered-To: ovs-dev@lists.linuxfoundation.org
Received: from smtp4.osuosl.org (smtp4.osuosl.org [IPv6:2605:bc80:3010::137])
 by lists.linuxfoundation.org (Postfix) with ESMTP id 4CAABC0864
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:26:03 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
 by smtp4.osuosl.org (Postfix) with ESMTP id EF46741E63
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:40 +0000 (UTC)
X-Virus-Scanned: amavis at osuosl.org
Received: from smtp4.osuosl.org ([127.0.0.1])
 by localhost (smtp4.osuosl.org [127.0.0.1]) (amavis, port 10024) with ESMTP
 id QXMLWsF3Wdtk for <dev@openvswitch.org>;
 Wed, 18 Dec 2024 10:25:40 +0000 (UTC)
Received-SPF: Pass (mailfrom) identity=mailfrom;
 client-ip=2a01:111:f403:260e::607;
 helo=eur03-am7-obe.outbound.protection.outlook.com;
 envelope-from=felix.huettner@stackit.cloud; receiver=<UNKNOWN>
DMARC-Filter: OpenDMARC Filter v1.4.2 smtp4.osuosl.org 9D34F41E49
Authentication-Results: smtp4.osuosl.org; dmarc=pass (p=reject dis=none)
 header.from=stackit.cloud
DKIM-Filter: OpenDKIM Filter v2.11.0 smtp4.osuosl.org 9D34F41E49
Authentication-Results: smtp4.osuosl.org;
 dkim=pass (2048-bit key, unprotected) header.d=stackit.cloud
 header.i=@stackit.cloud header.a=rsa-sha256 header.s=selector1
 header.b=LXB23XWq;
 dkim=pass (2048-bit key) header.d=stackit.cloud header.i=@stackit.cloud
 header.a=rsa-sha256 header.s=selector1 header.b=LXB23XWq
Received: from EUR03-AM7-obe.outbound.protection.outlook.com
 (mail-am7eur03on20607.outbound.protection.outlook.com
 [IPv6:2a01:111:f403:260e::607])
 by smtp4.osuosl.org (Postfix) with ESMTPS id 9D34F41E49
 for <dev@openvswitch.org>; Wed, 18 Dec 2024 10:25:39 +0000 (UTC)
ARC-Seal: i=2; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=pass;
 b=JJNv6coqSKWkNHFR46+rJcgrIx3ojj2O3eDTJ51gkBd2EprjcWnihQHmHjw2XlZbTUIy/GShTNq3zLNVGtGu2r/t/6udkOBntxqcKF3lqrjmuyceqnv2gi0NChmgfioKfeWUzSyeIiFQ8Q7NBoD6PM0EWvTVShgv4rijTX23cLT3mzt8kYQ62KGV9/RTMwZlzT8X2wWOvd5m+dgCIKNou8XzFKIfi8U6QarVEcafw3dTDJE+xuhQRaHW9xq0N57AmSh1mJh4yP5J2BWNFYkpqwiWBYZyxsncbRRVtO6JGEapCgJzdrJ/TYZhpbkordNmVHBLXQGlRJuz3LP6dzsgNw==
ARC-Message-Signature: i=2; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=F3ZEOMguquhlWiDbUtsxhkzDvBJ0P9zgeyGafaLVz5g=;
 b=GQe76ZBgHk19T6mylH1wZIzBVVpESr179QuewYWgnWijVmgTJ5GgtO0StbxELHhUgpO1PCn0X2CiYjRit+OUt80kxOUSH1qPjSKDeOba7r0M6yns/PbGp3ucBXVtwW9cmVJKIXJRpwRDWdFgu6Bigd784Rqwuegn3LoR1q6HqBvuABmaL7B30hqk9Rgyh++HibDQxiWw/VmX1XRjpjv9oh/EVPXfi0bd0YHpNUDQ9qDzQf+iouAen4/mNcMaWLbgto2biGTJMLskfLVnzUnoDeZcRHhbW8PpzCpgaQFzaDYf/NM2rIqBmSuZ88QsK9EyMhx12GxpB4Gwd515wv+reA==
ARC-Authentication-Results: i=2; mx.microsoft.com 1; spf=fail (sender ip is
 104.40.229.156) smtp.rcpttodomain=openvswitch.org
 smtp.mailfrom=stackit.cloud; dmarc=pass (p=reject sp=none pct=100)
 action=none header.from=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud; arc=pass (0 oda=1 ltdi=1
 spf=[1,1,smtp.mailfrom=stackit.cloud] dkim=[1,1,header.d=stackit.cloud]
 dmarc=[1,1,header.from=stackit.cloud])
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=F3ZEOMguquhlWiDbUtsxhkzDvBJ0P9zgeyGafaLVz5g=;
 b=LXB23XWqwwOrOKrix6eWCVEw+AqqmkOZlgEKv8xm9blizcrzMR+67V5gSZVNio3Egxt1WMa1vTX9PQbLnlLGS0gfHnsW+W9lsZ+xIsHFPXaSDXtMyzFY5oLv/Y9JMt6i24+WI6ThlsVYr1KsB8mPRWCfl92GKWI14gABX/lvAfVHVHQgXVOlzh22H6FhjsCDRxueccB1wPnVWA2zwX/XKxqOkljtdPfQYwSvWC1nNU0LLr1yrtnQ/arA/59CghowtlaklTRfLt7eYpXMG69SMjzlre4JMX1tXSqysGFiDcRtuAtEmN6lAUhA40lsb8gQ+krUntO6deADWOHGsqLvQw==
Received: from AM0PR10CA0026.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:208:17c::36)
 by AS4PR10MB6040.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:20b:577::10)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.13; Wed, 18 Dec
 2024 10:25:35 +0000
Received: from AM4PEPF00025F9C.EURPRD83.prod.outlook.com
 (2603:10a6:208:17c:cafe::65) by AM0PR10CA0026.outlook.office365.com
 (2603:10a6:208:17c::36) with Microsoft SMTP Server (version=TLS1_3,
 cipher=TLS_AES_256_GCM_SHA384) id 15.20.8251.23 via Frontend Transport; Wed,
 18 Dec 2024 10:25:35 +0000
X-MS-Exchange-Authentication-Results: spf=fail (sender IP is 104.40.229.156)
 smtp.mailfrom=stackit.cloud; dkim=pass (signature was verified)
 header.d=stackit.cloud;dmarc=pass action=none header.from=stackit.cloud;
Received-SPF: Fail (protection.outlook.com: domain of stackit.cloud does not
 designate 104.40.229.156 as permitted sender)
 receiver=protection.outlook.com; client-ip=104.40.229.156;
 helo=eu1.smtp.exclaimer.net;
Received: from eu1.smtp.exclaimer.net (104.40.229.156) by
 AM4PEPF00025F9C.mail.protection.outlook.com (10.167.16.11) with Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.8293.6 via Frontend Transport; Wed, 18 Dec 2024 10:25:30 +0000
Received: from EUR05-DB8-obe.outbound.protection.outlook.com (104.47.17.111)
 by eu1.smtp.exclaimer.net (104.40.229.156) with Exclaimer Signature Manager
 ESMTP Proxy eu1.smtp.exclaimer.net (tlsversion=TLS12,
 tlscipher=TLS_DIFFIEHELLMAN_WITH_AES256_NONE); Wed, 18 Dec 2024 10:25:34
 +0000
X-ExclaimerHostedSignatures-MessageProcessed: true
X-ExclaimerProxyLatency: 36357852
X-ExclaimerImprintLatency: 35085664
X-ExclaimerImprintAction: e5e6d9b0d86340688f8bbb078c6848fe
ARC-Seal: i=1; a=rsa-sha256; s=arcselector10001; d=microsoft.com; cv=none;
 b=UIE3J2Tl+g746qZzCIPABFAXDuKcy80Dt1ajkM2MI/fnuPz+p4BMnioo9aprQbQjbNTdyjyhJO55xlw8JD0TH8jVgQwezURXHL7JJDTB0E3WKRKOgqEdLhQ0nXPQqPOVcOps0jhKqElG3j8CyaG/ri/QwtKgz2wQLs6m9HcvMzIGPaF5chSdl0NKhcfWOfmcseFyKVU5S/pJ5FkA7JZ8jl2AkvUiHNlkGN/g9Ig9DQg0hEMIA6FuJksha4iAM3EyfaeznqW8A1cd7uiA4Y3JfXxq/TX9Bx93EOZeYLim6wKUVMeit7k7JL36sye8gtxEPqk4Ga9oGm/+Kq0IpQDITQ==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com;
 s=arcselector10001;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-AntiSpam-MessageData-ChunkCount:X-MS-Exchange-AntiSpam-MessageData-0:X-MS-Exchange-AntiSpam-MessageData-1;
 bh=F3ZEOMguquhlWiDbUtsxhkzDvBJ0P9zgeyGafaLVz5g=;
 b=YterbhZxRxom2FxnoZM5sZUORdklfsLgISLGOOYPc0BUMBj0Rn/q2TFbq+sZBQGQ/hpz23pfInkKJlRWmAceFtkvlqLgWT4rU9lAVWb3JPC/HrQ1rtMKA/l6oTy7jCPaStPvAmwEfcHyvGmVuBa5Gqc+ktfMiHZcOsnHGOcS6YENPwQRPaW6C6nLysn+p5pNH9WSKqtlgj7+HekLEj4rBYayPAUveRUByT0uyyILGTVSD9/di/jJRcVe0idk3cO/0tIFbmRo7hwUI/o24kFDBXB+RGUoQjtfA7rYU8CbLB9jHbdeFJlXZ4dWao0uuuAr6VUecgX4DmwY4ta1XmgpQw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=stackit.cloud; dmarc=pass action=none
 header.from=stackit.cloud; dkim=pass header.d=stackit.cloud; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=stackit.cloud;
 s=selector1;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=F3ZEOMguquhlWiDbUtsxhkzDvBJ0P9zgeyGafaLVz5g=;
 b=LXB23XWqwwOrOKrix6eWCVEw+AqqmkOZlgEKv8xm9blizcrzMR+67V5gSZVNio3Egxt1WMa1vTX9PQbLnlLGS0gfHnsW+W9lsZ+xIsHFPXaSDXtMyzFY5oLv/Y9JMt6i24+WI6ThlsVYr1KsB8mPRWCfl92GKWI14gABX/lvAfVHVHQgXVOlzh22H6FhjsCDRxueccB1wPnVWA2zwX/XKxqOkljtdPfQYwSvWC1nNU0LLr1yrtnQ/arA/59CghowtlaklTRfLt7eYpXMG69SMjzlre4JMX1tXSqysGFiDcRtuAtEmN6lAUhA40lsb8gQ+krUntO6deADWOHGsqLvQw==
Authentication-Results-Original: dkim=none (message not signed)
 header.d=none;dmarc=none action=none header.from=stackit.cloud;
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:102:30d::9)
 by DU4PR10MB9191.EURPRD10.PROD.OUTLOOK.COM (2603:10a6:10:568::16)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.8272.12; Wed, 18 Dec
 2024 10:25:05 +0000
Received: from PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8]) by PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 ([fe80::f00d:feeb:e45e:54f8%4]) with mapi id 15.20.8272.005; Wed, 18 Dec 2024
 10:25:05 +0000
Date: Wed, 18 Dec 2024 11:25:03 +0100
To: dev@openvswitch.org
Message-ID: 
 <6e78fd9e05c602445615cb950bf9eb1eed96eff3.1734513750.git.felix.huettner@stackit.cloud>
Mail-Followup-To: dev@openvswitch.org
References: <cover.1734513749.git.felix.huettner@stackit.cloud>
Content-Disposition: inline
In-Reply-To: <cover.1734513749.git.felix.huettner@stackit.cloud>
X-please-dont-add-a-signature: thanks
X-ClientProxiedBy: FR3P281CA0113.DEUP281.PROD.OUTLOOK.COM
 (2603:10a6:d10:a3::12) To PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM
 (2603:10a6:102:30d::9)
MIME-Version: 1.0
X-MS-TrafficTypeDiagnostic: 
 PAVPR10MB6914:EE_|DU4PR10MB9191:EE_|AM4PEPF00025F9C:EE_|AS4PR10MB6040:EE_
X-MS-Office365-Filtering-Correlation-Id: bcb77cc3-7fff-4a1a-93da-08dd1f4e4e76
X-MS-Exchange-SenderADCheck: 1
X-MS-Exchange-AntiSpam-Relay: 0
X-Microsoft-Antispam-Untrusted: BCL:0;ARA:13230040|376014|366016|1800799024;
X-Microsoft-Antispam-Message-Info-Original: 
 v1mL/hJw4wtM2motz8WR8yytDm/r39tt0SvQXqqR/HeG56flJ4HRNkYi2xvdGcr5sejhW/uRLwOEDanUlzwCjaxIH16HaMMr8ASMtPyOUe4BoiCXCply47ctJeIIfiLzaU1H+A4kOtCr1V1yVM7WHG8ZxmsBeL741v7mv4ShJrMvlXSFkAHkUNrG8376S0vy0Mx4MFx887QpB/ufXEJRogEb1VJ5I7b9Aizz0A2fDHnbGAGKu1B8VFaarVNjud3ngOaSXhsZ5S75zU6Xg6YRQsccJbPiGmFn1X0C6fwiId5kzTuWeL82+TU4ItnjuOkIv4E9no8Iivn60fHAF0DZMbJh4PM2U+aiHRtd5Emps96ZjDG2eBIfUVALkADWHDpcsQ8F2egrwSgHkR8IVgKCfXU3JRxoJdDVd8skN5E59VMD0tPCrxtV30+CYxeskMOzPYdMn9cV3NPcNQtmdkBY/LHoSVgtyrvCcjBPMGaV3GrLKZ6RLrP0pXNiPitMQG5ZANxxEhCS4W98hFomJvCVAe6eXJJM1Es9ASwM75giINVYUPiKhu0JWH2DOcIJ1d1y6B9oYW7nr+b4vCEcz0FK/pPDbph0EDGIa3ts5oK+TjaEEzI3WTQ4TgR+0v2jTgLiDVON2C7uh07hhWEZ/o+5vf+7EmTLeuXcK13DJpN18YfsO/A98Ec5qvDSNhLFMke4Kxqklr8ckuO0qstlQyY9pTkITkq8XEScG66QydNUnzw4ZKuP8crZAK64GPdf4G3Y+LnZCWJUQIyXLVYy3nvURh4+WpVMV1tX/6ZYABhzgHOq3/Ul+gyx7NdGWb7NTu0PaTaHVK8pdIjA2JIioqq3LsUnCsFCcCjzEflSRJQXmdbx2Z6wqtxsKnVqt2aeMyhxHDV9y9eke2MGCR6jdLuDti+0D3XHTzdF9KtAjjfYqUw26XbAz7o+36h609tZ1R1R8+gnwgYbEg7sLO+ghkEomtgcX+hVoEpSx9DbEnKvL6jCHKSOA4BvGO4zjyDXG6GoFO2FGgiu/ANixVnoRAGTynwTNatTOXenM4yIrp7tX0TjgODwcm3fq2YxX9D9V0bW/c7qk7XjcuyQMu4JyeaOUhRPRwITryTFPysLRd/c7Q9EKgVZr10IDgM4KCXs623pF+6wd+kq+9E6Lc70Puc7oxvMbZFkzeVRMO36q4F9NZfn26yAWSVacv8iYhmyFvzMae8UfmflRCUO9g6LqbNRAtR2fQvxKU2Te7PqzDzT2v2SMBjkM2AQ1A/m9gGP64WdiR7cCzSU3zBTzREfDGs41MzruN6bPvkcEd2Ilgt7tgX4SR2fMuptj2PU7qNpViLk4CFQEBSBUqZPyeI5Eig1jQCmWrxvoDiJXGgb/47SJ3U=
X-Forefront-Antispam-Report-Untrusted: CIP:255.255.255.255; CTRY:; LANG:en;
 SCL:1; SRV:; IPV:NLI; SFV:NSPM; H:PAVPR10MB6914.EURPRD10.PROD.OUTLOOK.COM;
 PTR:; CAT:NONE; SFS:(13230040)(376014)(366016)(1800799024); DIR:OUT;
 SFP:1101;
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DU4PR10MB9191
X-EOPAttributedMessage: 0
X-MS-Exchange-Transport-CrossTenantHeadersStripped: 
 AM4PEPF00025F9C.EURPRD83.prod.outlook.com
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id-Prvs: 
 3d8f55b3-267f-4006-7991-08dd1f4e3d2b
X-Microsoft-Antispam: BCL:0;
 ARA:13230040|1800799024|14060799003|376014|36860700013|35042699022|82310400026;
X-Microsoft-Antispam-Message-Info: 
 l3OoOzITI+KaVq/3F8stC0kaBP/EXsS+h0Cam3uo2vjgZNyCQBrqSoBDuCzWWB3KaFg5kvsRfvuoRSmXELh3k/5VXj1K3DEiAKv55tkJl3QXEiKRpF7nvAA/cB4hO043c/zmp6o4usy47jEUGNwrBt020jg1snpUwgQLthijlsLByEhWgFyFxCexNY8cHnoq5qkE+hnuhXlMRP2vGhEP5X92hdjpPouzCnsGn+lHkiFZV9dAw34bH3hWgw/Pyo88SqKRFHVMDfK7EbSTNda4Dmos0tKUUWVMqiNVk/5kXTtkznGGVagRa/T9MU1ggzwmE6ZbXKq6dyP0dOebiTYYv6/V/Lf/tuB/iAu9cG8QLaqdxi4n3mc2BUmsfBb1LkZaLkanFX4wwKQ+xjZYBdV/IN9JqKDzdRgK2+p89qCECqFkaALJZZYX+yr0WTcKDfRMq0imi7b8BQ7a8XMKY4WyQ8Q0afE1GUgOO10HZgQ5OkNOw/FFpePyn4kAsq8pFtqR7hXnL/88E3oPNWM7Rm+uYsykJR0xcXZ/dwMGGb1omOMLJizapQ7wu5YSsqknTdyFWGhnrC2HI8LLshx2xBhXO2E4q9maon9qSJyYnO3cHOtW0rvdF/x33Lk74G2Q5p9J1qXRon/2jDCZJwNY0RR91Im3JzNVbNUznyBDkei2tGTCdEUf7eBj5fu1fTd/UWr4T4mw6bBBppTeaAo/gaSZ8omEef+luKI9IjAyxKvaossC8MV+UnJ4nOogiRwmOUMYz4tmMrwFy3PCyNtRZXFaUkJfsttmEtcEro6cRSI/52EHyt1DMo+RHP9B1q3USwbs5hDiSTceb95KE7cxxz5x+Cw3fUpc/sCHFW+gD8bE7p/RrsbxL+nQtEUz8vraz5TiwvfZOkCbClR2gkb7tQHJo4dHsMvwL4zRvuk5ltEYxwIxwkXHaqHIPaJYmCmIVaUZ78oEbxKimBsUOyZJ+H29te7afi/SjW8ijQSN2bSTYSaj1W/D85fGsbPlg0JZJM385fd/WOI9L4eRdiXpVGponyOWxTx9P+MxIPUjFjlhN/5tdLzOKNnElkZ7YieKlSPX79WiN76lULY/pWe08QI2Ybu1ck0zHjZBpqgKhCr8aLbvaTK1aTBS5EVH4PfZawjea6LemiGZN4nslPl+mCENjxNSWxu0IhZxaicwM+CecMP005fA3JD/eD4XaETPYhFGE0yA0aBhiBtvSsL1oce3tO45sO6wcxh63LZfj49wOg5navmxmVQwqW6k9zpQetTi9CJUvmZ2p/ldkJ6U4R40h2qzunHQVP2t3kc2Xz9h2Ugs94yzZNKals+I5JoyZrgVfutyZtXrYeSocGSvnTNi//o6hnygUa7AA2SbJa/2jf3bailERoWoBleJ0W6bnSIp1eV0AIabrPbSQv2XPOt/Ko1RPu+ltJaK09lemDaqqI6UXZrJFrGctVLwQCysHk327yjI+PpJeyDj+1GF6Jym5w==
X-Forefront-Antispam-Report: CIP:104.40.229.156; CTRY:NL; LANG:en; SCL:1;
 SRV:;
 IPV:CAL; SFV:NSPM; H:eu1.smtp.exclaimer.net; PTR:eu1.smtp.exclaimer.net;
 CAT:NONE;
 SFS:(13230040)(1800799024)(14060799003)(376014)(36860700013)(35042699022)(82310400026);
 DIR:OUT; SFP:1101;
X-OriginatorOrg: stackit.cloud
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 18 Dec 2024 10:25:30.5469 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: 
 bcb77cc3-7fff-4a1a-93da-08dd1f4e4e76
X-MS-Exchange-CrossTenant-Id: d04f4717-5a6e-4b98-b3f9-6918e0385f4c
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: 
 TenantId=d04f4717-5a6e-4b98-b3f9-6918e0385f4c; Ip=[104.40.229.156];
 Helo=[eu1.smtp.exclaimer.net]
X-MS-Exchange-CrossTenant-AuthSource: 
 AM4PEPF00025F9C.EURPRD83.prod.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: AS4PR10MB6040
Subject: [ovs-dev] [PATCH ovn v2 6/6] northd: Sync routing data to pb.
X-BeenThere: ovs-dev@openvswitch.org
X-Mailman-Version: 2.1.30
Precedence: list
List-Id: <ovs-dev.openvswitch.org>
List-Unsubscribe: <https://mail.openvswitch.org/mailman/options/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=unsubscribe>
List-Archive: <http://mail.openvswitch.org/pipermail/ovs-dev/>
List-Post: <mailto:ovs-dev@openvswitch.org>
List-Help: <mailto:ovs-dev-request@openvswitch.org?subject=help>
List-Subscribe: <https://mail.openvswitch.org/mailman/listinfo/ovs-dev>,
 <mailto:ovs-dev-request@openvswitch.org?subject=subscribe>
X-Patchwork-Original-From: Felix Huettner via dev <ovs-dev@openvswitch.org>
From: Felix Huettner <felix.huettner@stackit.cloud>
Reply-To: Felix Huettner <felix.huettner@stackit.cloud>
Errors-To: ovs-dev-bounces@openvswitch.org
Sender: "dev" <ovs-dev-bounces@openvswitch.org>

this allows the the ovn-controller to later find all ports that
participate in dynamic routing.

Signed-off-by: Felix Huettner <felix.huettner@stackit.cloud>
---
 northd/northd.c | 15 +++++++++++++++
 ovn-nb.xml      | 23 +++++++++++++++++++++++
 2 files changed, 38 insertions(+)

diff --git a/northd/northd.c b/northd/northd.c
index c6344b48a..903ddf732 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -4052,6 +4052,21 @@ sync_pb_for_lrp(struct ovn_port *op,
         }
     }
 
+    if (is_cr_port(op) || chassis_name) {
+        if (smap_get_bool(&op->nbrp->options, "maintain-vrf", false)) {
+            smap_add(&new, "maintain-vrf", "true");
+        }
+        if (smap_get_bool(&op->od->nbr->options, "dynamic-routing", false)) {
+            smap_add(&new, "dynamic-routing", "true");
+        }
+        const char *ifname = smap_get(&op->nbrp->options,
+                                      "dynamic-routing-ifname");
+        if (ifname) {
+            smap_add(&new, "dynamic-routing-ifname", ifname);
+        }
+    }
+
+
     const char *ipv6_pd_list = smap_get(&op->sb->options, "ipv6_ra_pd_list");
     if (ipv6_pd_list) {
         smap_add(&new, "ipv6_ra_pd_list", ipv6_pd_list);
diff --git a/ovn-nb.xml b/ovn-nb.xml
index eb7ee72df..2726a2017 100644
--- a/ovn-nb.xml
+++ b/ovn-nb.xml
@@ -3776,6 +3776,29 @@ or
           </li>
         </ul>
       </column>
+
+      <column name="options" key="maintain-vrf" type='{"type": "boolean"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> on the respective Logical_Router is set
+          to <code>true</code>.
+
+          If this LRP is bound to a specific chassis then the ovn-controller of
+          this chassis will maintain a vrf named "ovnvrf" with the datapath id
+          of the Logical Router appended to it.
+          This vrf will contain all the routes that should be announced from
+          this LRP.
+      </column>
+
+      <column name="options" key="dynamic-routing-ifname"
+          type='{"type": "string"}'>
+        Only relevant if <ref column="options" key="dynamic-routing"
+        table="Logical_Router"/> on the respective Logical_Router is set
+          to <code>true</code>.
+
+          Only learn routes associated with the interface specified here.
+          This allows a single chassis to learn different routes on separate
+          LRPs bound to this chassis.
+      </column>
     </group>
 
     <group title="Attachment">
